{
  "message": "SYSTEM: Wiki: Contents\n[\nhide\n]\n1\nRelevant deliverables\n2\nRepository Metadata (from the SEALS wiki)\n2.1\nSEALS Metadata\n2.2\nConstraints\n2.3\nExamples\n2.3.1\nPersistent Test Data Collection\n2.3.2\nPersistent Test Data Version\n2.4\nUsage Example\n3\nTest Data Repository Service (from the SEALS wiki)\n3.1\nInformation\n3.1.1\nEnvironments\n3.1.2\nChangelog\n3.2\nUsage\n4\nSuite Metadata (from the SEALS wiki)\n4.1\nSuite Ontology\n4.2\nStructure of a Suite\n4.3\nDescribing and Accessing Suites\nRelevant deliverables\n\nD4.2 SEALS Metadata\nD5.2\nD5.4-2.1-FR\nRepository Metadata (from the SEALS wiki)\n\n(Inserted here since that wiki is restricted)\nThis page applies to version 1.1 (as of 28.04.2010) of the repository services.\nThis page describes how to use the SEALS Metadata to describe entities, that are to be stored in the Test Data Repository Service (TDRS), Tools Repository Service (TRS) or Results Repository Service (RRS). In order to distinguish between the\nsuite metadata\n, we further use the terms\nrepository metadata\nto refer to the metadata describing these entities.\nIn the following examples we will assume that the repositories services are accessable under the following URLs:\nTest Data Repository Service:\nhttp://seals-test.sti2.at/tdrs-web/\nTools Repository Service:\nhttp://seals-test.sti2.at/trs-web/\nResults Repository Service:\nhttp://seals-test.sti2.at/rrs-web/\nSEALS Metadata\n\nThe SEALS metadata defines the data model used in all the systems developed in the SEALS project (i.e., the SEALS Portal and the SEALS Platform) as well as in any other system that requires interacting with them. It is defined in deliverable D4.2 and is available as an OWL ontology at\nhttp://www.seals-project.eu/ontologies/SEALSMetadata.owl\n. Consequently, as the aforementioned repositories are part of the SEALS platform, the repository metadata is based on the vocabulary defined by the SEALS Metadata ontology.\nConstraints\n\nOptional definition of dc:identifier:\nIf a dc:identifierattribute is given in the metadata of an entity, the repository service will use the value of this statement as an identifier of the entity. Therefore, it needs to be unique within the repository in which the entity will be stored, otherwise the registration of the entity will fail. This identifier will then be used to create a subject for the metadata, which will also be the dereferenceable URI of the entity.\ndc:identifier is auto-generated:\nIf the metadata of an entity lacks the definition of a dc:identifier attribute, the identifier will be automatically generated in the form of a universally unique identifier (UUID) and will be visible in the metadata returned by the repository after the successful registration of the entity. This identifier will then be used to create a subject for the metadata, which will also be the dereferenceable URI of the entity.\nBlank node as subject:\nA blank node must be used as subject in the metadata of the entity. All statements in the metadata having this blank node as subject will then be updated to use as subject the new dereferenceable URI of the form\nhttp://seals-test.sti2.at/.../\n<identifier>/\n. In the case of a persistent test data collection which has the dc:identifier\nConformance Benchmark Suite\n, this URI will look like\nhttp://seals.sti2.at/tdrs-web/testdata/persistent/Conforname+Benchmark+Suite/\n. For a persistent test data version having the dc:identifier\ncbs-1.0\n, which is added to the aforementioned collection, this URI will look like\nhttp://seals.sti2.at/tdrs-web/testdata/persistent/Conforname+Benchmark+Suite/cbs-1.0/\nSingle blank node for statements:\nOnly a single blank node should be used for the statements in the metadata, which represents the single entity described by the metadata.\nArtifacts must have a seals:hasName property:\nAn artifact (e.g., test data collection, tool or interpretation) needs to have a seals:hasName attribute defining its human readable name. This name does not have to be unique.\nArtifact versions must have a seals:hasVersion number property:\nAn artifact version (e.g., test data version or tool version) needs to have a seals:hasVersionNumber defining its humand readable version number. This version number does not have to be unique.\nAny other properties can be added to the metadata, regardless if an ontology defining these exists or not.\nExamples\n\nIn the following we give for each type of entity a (minimalistic) metadata example.\nPersistent Test Data Collection\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rdf:RDF\n        xmlns:rdfs=\"\nhttp://www.w3.org/2000/01/rdf-schema#\n\"\n        xmlns:rdf=\"\nhttp://www.w3.org/1999/02/22-rdf-syntax-ns#\n\"\n        xmlns:seals=\"\nhttp://www.seals-project.eu/ontologies/SEALSMetadata.owl#\n\"\n        xmlns:dcterms=\"\nhttp://purl.org/dc/terms/\n\">\n    <seals:PersistentTestData>\n        <seals:hasName rdf:datatype=\"\nhttp://www.w3.org/XMLSchema#string\n\">Conference Testsuite</seals:hasName>\n        <dcterms:description rdf:datatype=\"\nhttp://www.w3.org/XMLSchema#string\n\">The conference dataset</dcterms:description>\n    </seals:PersistentTestData>\n</rdf:RDF>\nIf registered in the TDRS, the service will return something like the following:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rdf:RDF\n        xmlns:rdfs=\"\nhttp://www.w3.org/2000/01/rdf-schema#\n\"\n        xmlns:rdf=\"\nhttp://www.w3.org/1999/02/22-rdf-syntax-ns#\n\"\n        xmlns:seals=\"\nhttp://www.seals-project.eu/ontologies/SEALSMetadata.owl#\n\"\n        xmlns:dcterms=\"\nhttp://purl.org/dc/terms/\n\">\n    <seals:PersistentTestData rdf:about=\"\nhttp://seals.sti2.at/tdrs-web/testdata/persistent/afe1ecf7-a7e9-45f7-beb6-19e109c4761f/\n\">\n        <seals:hasName rdf:datatype=\"\nhttp://www.w3.org/2001/XMLSchema#string\n\">Conference Testsuite</seals:hasName>\n        <dcterms:description rdf:datatype=\"\nhttp://www.w3.org/2001/XMLSchema#string\n\">The conference dataset</dcterms:description>\n        <dcterms:identifier rdf:datatype=\"\nhttp://www.w3.org/XMLSchema#string\n\">afe1ecf7-a7e9-45f7-beb6-19e109c4761f</dcterms:identifier>\n        <dcterms:created rdf:datatype=\"\nhttp://www.w3.org/2001/XMLSchema#dateTime\n\">2010-12-20T16:42:14.518+01:00</dcterms:created>\n    </seals:PersistentTestData>\n</rdf:RDF>\nPersistent Test Data Version\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rdf:RDF xmlns:rdf=\"\nhttp://www.w3.org/1999/02/22-rdf-syntax-ns#\n\"\n        xmlns:seals=\"\nhttp://www.seals-project.eu/ontologies/SEALSMetadata.owl#\n\"\n        xmlns:dcterms=\"\nhttp://purl.org/dc/terms/\n\">\n    <seals:TestDataVersion>\n        <seals:hasVersionNumber rdf:datatype=\"\nhttp://www.w3.org/XMLSchema#string\n\">2010</seals:hasVersionNumber>\n        <dcterms:description rdf:datatype=\"\nhttp://www.w3.org/XMLSchema#string\n\">Version 2010 of the Conference Testsuite</dcterms:description>\n    </seals:TestDataVersion>\n</rdf:RDF>\nUsage Example\n\nIn this section we give an example on how to use the Tools Repository Service by registering a tool and adding a version for this tool to the repository. Assume we want to submit the IRIS reasoner to the Tool Repository Service, which has the following metadata.\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rdf:RDF\n        xmlns:rdfs=\"\nhttp://www.w3.org/2000/01/rdf-schema#\n\"\n        xmlns:rdf=\"\nhttp://www.w3.org/1999/02/22-rdf-syntax-ns#\n\"\n        xmlns:seals=\"\nhttp://www.seals-project.eu/ontologies/SEALSMetadata.owl#\n\"\n        xmlns:dcterms=\"\nhttp://purl.org/dc/terms/\n\">\n    <seals:Tool>\n        <seals:hasName rdf:datatype=\"\nhttp://www.w3.org/2001/XMLSchema#string\n\">IRIS</seals:hasName>\n        <dcterms:description rdf:datatype=\"\nhttp://www.w3.org/2001/XMLSchema#string\n\">Open-source Datalog reasoner implemented in Java</dcterms:description>\n        <seals:hasExternalURL rdf:datatype=\"\nhttp://www.w3.org/XMLSchema#string\n\">\nhttp://www.iris-reasoner.org\n\"</hasExternalURL>\n        <seals:hasToolCategory rdf:resource=\"\nhttp://www.seals-project.eu/ontologies/SEALSMetadata.owl#ReasonerOrStorageTool\n\" />\n    </seals:Tool>\n</rdf:RDF>\nFirst, we register the tool along with the metadata shown above by creating a HTTP request with the content type\napplication/x-www-form-urlencoded\n, consisting of single key-value pair for the RDF/XML encoded metadata, where\nmetadata\nis the name of the pair. The HTTP request is then sent to the following URI using the HTTP method\nPOST\n:\nhttp://seals-test.sti2.at/trs-web/tools/\nThe status code of the HTTP response will indicate the success of the operation. If the operation was invoked successfully, the status code will be\n201\nand the body will contain the RDF/XML encoded metadata added to the repository, similar to the following:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rdf:RDF\n        xmlns:rdfs=\"\nhttp://www.w3.org/2000/01/rdf-schema#\n\"\n        xmlns:rdf=\"\nhttp://www.w3.org/1999/02/22-rdf-syntax-ns#\n\"\n        xmlns:seals=\"\nhttp://www.seals-project.eu/ontologies/SEALSMetadata.owl#\n\"\n        xmlns:dcterms=\"\nhttp://purl.org/dc/terms/\n\">\n    <seals:Tool rdf:about=\"\nhttp://seals-test.sti2.at/trs-web/tools/35ded060-287e-11e0-91fa-0800200c9a66/\n\">\n        <seals:hasName rdf:datatype=\"\nhttp://www.w3.org/2001/XMLSchema#string\n\">IRIS</seals:hasName>\n        <dcterms:description rdf:datatype=\"\nhttp://www.w3.org/2001/XMLSchema#string\n\">Open-source Datalog reasoner implemented in Java</dcterms:description>\n        <seals:hasExternalURL rdf:datatype=\"\nhttp://www.w3.org/XMLSchema#string\n\">\nhttp://www.iris-reasoner.org\n\"</hasExternalURL>\n        <seals:hasToolCategory rdf:resource=\"\nhttp://www.seals-project.eu/ontologies/SEALSMetadata.owl#ReasonerOrStorageTool\n\" />\n        <dcterms:identifier rdf:datatype=\"\nhttp://www.w3.org/XMLSchema#string\n\">35ded060-287e-11e0-91fa-0800200c9a66</dcterms:identifier>\n        <dcterms:created rdf:datatype=\"\nhttp://www.w3.org/2001/XMLSchema#dateTime\n\">2011-01-25T16:42:14.518+01:00</dcterms:created>\n    </seals:Tool>\n</rdf:RDF>\nAdditionally, the HTTP header\nContent-Location\nwill contain the URL of the newly created resource for the tool. This URL will have the following form:\nhttp://seals-test.sti2.at/trs-web/tools/35ded060-287e-11e0-91fa-0800200c9a66/\nAssume we want to add version 0.7.3 of the tool. In order to do this we create a HTTP request with the content type\nmultipart/form-data\n, consisting of a part\nmetadata\n, which contains the RDF/XML encoded metadata of the tool version, as shown below, and a part\ndata\n, which streams the tool version packed in a ZIP file\niris-0.7.3.zip\n.\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rdf:RDF\n        xmlns:rdfs=\"\nhttp://www.w3.org/2000/01/rdf-schema#\n\"\n        xmlns:rdf=\"\nhttp://www.w3.org/1999/02/22-rdf-syntax-ns#\n\"\n        xmlns:seals=\"\nhttp://www.seals-project.eu/ontologies/SEALSMetadata.owl#\n\"\n        xmlns:dcterms=\"\nhttp://purl.org/dc/terms/\n\">\n    <seals:ToolVersion>\n        <seals:hasVersionNumber rdf:datatype=\"\nhttp://www.w3.org/2001/XMLSchema#string\n\">0.7.3</seals:hasVersionNumber>\n        <dcterms:description rdf:datatype=\"\nhttp://www.w3.org/2001/XMLSchema#string\n\">Version 0.7.3 of the IRIS Datalog reasoner</dcterms:description>\n    </seals:ToolVersion>\n</rdf:RDF>\nThe HTTP request is then sent to the URL of the tool using the HTTP method\nPOST\n, which is\nhttp://seals-test.sti2.at/trs-web/tools/35ded060-287e-11e0-91fa-0800200c9a66/\n, which has the effect, that the tool version is added to the collection of versions. This is also reflected in the metadata of the tool, which from now on has an additional property \"seals:hasVersion\nhttp://seals-test.sti2.at/trs-web/tools/35ded060-287e-11e0-91fa-0800200c9a66/2d3c6d00-287e-11e0-91fa-0800200c9a66/\n\".\nThe status code of the HTTP response will indicate the success of the operation. If the operation was invoked successfully, the status code will be\n201\nand the body will contain the RDF/XML encoded metadata added to the repository, similar to the following:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rdf:RDF\n        xmlns:rdfs=\"\nhttp://www.w3.org/2000/01/rdf-schema#\n\"\n        xmlns:rdf=\"\nhttp://www.w3.org/1999/02/22-rdf-syntax-ns#\n\"\n        xmlns:seals=\"\nhttp://www.seals-project.eu/ontologies/SEALSMetadata.owl#\n\"\n        xmlns:dcterms=\"\nhttp://purl.org/dc/terms/\n\">\n    <seals:ToolVersion rdf:about=\"\nhttp://seals-test.sti2.at/trs-web/tools/35ded060-287e-11e0-91fa-0800200c9a66/2d3c6d00-287e-11e0-91fa-0800200c9a66/\n\">\n        <seals:hasVersionNumber rdf:datatype=\"\nhttp://www.w3.org/2001/XMLSchema#string\n\">0.7.3</seals:hasVersionNumber>\n        <dcterms:description rdf:datatype=\"\nhttp://www.w3.org/2001/XMLSchema#string\n\">Version 0.7.3 of the IRIS Datalog reasoner</dcterms:description>\n        <dcterms:identifier rdf:datatype=\"\nhttp://www.w3.org/XMLSchema#string\n\">2d3c6d00-287e-11e0-91fa-0800200c9a66</dcterms:identifier>\n        <dcterms:created rdf:datatype=\"\nhttp://www.w3.org/2001/XMLSchema#dateTime\n\">2011-01-25T16:44:15.623+01:00</dcterms:created>\n    </seals:ToolVersion>\n</rdf:RDF>\nAdditionally, the HTTP header\nContent-Location\nwill contain the URL of the newly created resource for the tool version. This URL will have the following form:\nhttp://seals-test.sti2.at/trs-web/tools/35ded060-287e-11e0-91fa-0800200c9a66/2d3c6d00-287e-11e0-91fa-0800200c9a66/\nTest Data Repository Service (from the SEALS wiki)\n\n(Inserted here since that wiki is restricted)\nThis page provides documentation of the\nTest Data Repository Service\n(TDRS), which provides storage and retrieval facilities for test data.\nInformation\n\nDetailed technical information about using the TDRS is documented in\nD5.2\nand\nD5.4-1.1-FR\n.\nEnvironments\n\nA\nproduction environment\nrunning\nTDRS 1.1-b\nis hosted at\nhttp://seals.sti2.at/tdrs-web/\nInformation about the repository metadata can be found at\nRepository Metadata\nInformation about the suite metadata can be found at\nSuite Metadata\nThe documentation of the REST interface can be found in chapter 2 of\nD5.2\nA usage example can be found in section 5.3 of\nD5.2\nA\ntest environment\nrunning\nTDRS 1.1\nis hosted at\nhttp://seals-test.sti2.at/tdrs-web/\nInformation about the repository metadata can be found at\nRepository Metadata (New)\nInformation about the suite metadata can be found at\nSuite Metadata\nThe documentation of the REST interface can be found at\nTest Data Repository Service REST API\nA usage example can be found in Section 4.4 of\nD5.4-1.1-FR\nChangelog\n\nTDRS 2.0-b\n(will be released M29)\nSPARQL endpoints can be created for data items/components of a suite.\nPlaceholders can be used in the suite metadata, which are automatically substituted with the concrete values upon insertion of the suite into the repository.\nFixed issues:\n645\n,\n646\n,\n647\n,\n655\n,\n671\nNow uses Sesame 2.4.2.\nSyntactically and semantically backwards-compatible with TDRS 1.1.\nTDRS 1.1\n(released M23)\ndcterms:identifier\nis used as identifier rather than\nseals:hasName\n, see\nRepository Metadata (New)\n.\nIdentifier is auto-generated if not defined in the repository metadata.\nRoot node in repository metadata must be a blank node and is automatically overwritten with a dereferenceable URI.\nJava clients have been aligned with those changes.\nSyntactically compatible with TDRS 1.1-b. However, artifacts are now identified by its\ndcterms:identifier\nand the repository metadata has to be aligned with the changes.\nTDRS 1.1-b\n(released M18)\nStorage and retrieval of suites and suite items.\nSuites are described according to\nSuite Metadata\nCompatible with TDRS 1.0\nTDRS 1.0\n(released M10)\nStorage and retrieval of persistent test data.\nRegistration and execution of synthetic test data generators.\nUsage\n\nWe have uploaded\na ZIP file\ncontaining\na HTML form to register a new test data collection (RegisterTestCollection.html)\na HTML form to add a test data version to the collection (AddTestDataVersion.html)\nthe repository metadata for the test data collection (OWLDLImportTestSuiteCollection.xml)\nthe repository metadata for the test data version (OWLDLImportTestSuite1.0.xml)\nthe ZIP file containing the test data (OWLDLImportTestSuite1.0.zip)\nPlease note, that the given test data has already been regisered in the repository. The following instructions describe how this has been accomplished.\nYou first have to register a new test data collection using the HTML file RegisterTestCollection.html. There you paste the RDF/XML metadata of the test data collection (OWLDLImportTestSuiteCollection.xml) to the text area. Then you have to open the HTML file AddTestDataVersion.html and paste the RDF/XML metadata of the test data version (OWLDLImportTestSuite1.0.xml) to the text area and select the ZIP file containing the test data (OWLDLImportTestSuite1.0.zip).\nPlease note\n, that, although, the test data represents a test suite, it is not describing using the\nSuite Ontology\nbut using a ontology defined in WP10.\nThe metadata of the test data collection can be accessed through the URL\nhttp://seals.sti2.at/tdrs-web/testdata/persistent/OWL+DL+Import+Test+Suite/\nand the metadata of the test data version through the URL\nhttp://seals.sti2.at/tdrs-web/testdata/persistent/OWL+DL+Import+Test+Suite/1.0/\n. If you want to retrieve the test data ZIP file, you need to change the value of the Accept header in your HTTP request to \"application/zip\" and send the request to\nhttp://seals.sti2.at/tdrs-web/testdata/persistent/OWL+DL+Import+Test+Suite/1.0/\n. To change the Accept header you can use the Firefox add-on\nModify Headers\n.\nIf you want to use the forms to register and add different test data, please make sure to use a subject URI (in the metadata) that makes sense, i.e. a URI that corresponds to the URL for the resource to be created. For instance, if you register a collection with the seals:hasName value \"Foo Bar\", the subject URI should be \"\nhttp://seals.sti2.at/tdrs-web/testdata/persistent/Foo+Bar\n\". Later, it is VERY important to edit the AddTestDataVersion.html file and change the value of the \"action\" attribute of the form to, for instance, \"\nhttp://seals.sti2.at/tdrs-web/testdata/persistent/Foo+Bar\n\". That means, you have to POST the concrete ZIP file, which corresponds to a version of the test data collection, to the URL of the collection.\nSuite Metadata (from the SEALS wiki)\n\nThis page describes how to use the\nSuite Ontology\nto describe suites of entities, e.g. suites of test data or interpretations, that are to be stored in the Test Data Repository Service (TDRS), Tools Repository Service (TRS) or Results Repository Service (RRS). In order to distinguish between the\nrepository metadata\n, we further use the terms suite metadata to refer to the metadata describing these suites.\nIn the following examples we will assume that the repositories services are accessable under the following URLs:\nTest Data Repository Service:\nhttp://seals.sti2.at/tdrs-web/\nTools Repository Service:\nhttp://seals.sti2.at/trs-web/\nResults Repository Service:\nhttp://seals.sti2.at/rrs-web/\nSuite Ontology\n\nThe suite metadata is based on the UIBK proposal of the\nsuite ontology\n, which uses the concepts of a\nSuite\n,\nSuiteItem\nand\nDataItem\n, where a\nSuite\nconsist of multiple\nSuiteItems\n, which consists of various\nDataItems\n. It defines the specific characteristics of the Suite and the SuiteItems. For instance, the suite metadata describes all the test cases (corresponding to a SuiteItem) defined in a test suite (corresponding to a Suite) and the test data (corresponding to a DataItem) corresponding to each test case. A data item can also have a certain type, for instance, source ontology. If such a type is given for a data item, we refer to it as a\ncomponent\n.\nStructure of a Suite\n\nA suite is encapsulated in a ZIP file, that contains files in arbitrary directories in the ZIP file. The only constraint is, that the suite metadata is in a separate file at the top level of the ZIP file and has the file name\nMetadata.rdf\n. Apart from this constraint, the files(DataItems) in the ZIP can have any name and can remain in any directory in the ZIP file. The metadata defines to which SuiteItem a DataItem belongs, where this DataItem is located and what the name and optionally the component type of the DataItem is. Given these descriptions, there are multiple ways to access such DataItems or components. An example ZIP file structure can be seen below. See section\n#Describing and Accessing Suites\nfor a full example.\n/Metadata.rdf\n/TestCase01/ontology01.owl\n/TestCase01/ontology02.owl\n/TestCase02/ontology01.owl\n/TestCase02/ontology02.owl\n...\nDescribing and Accessing Suites\n\nWe illustrate how to describe and access a suite using an example based on the\nConference Testsuite (version 2010)\nof WP12.\nDescribing the suite\nThe Conference Testsuite ZIP file contains multiple ontology files residing in different directories, and a RDF file containing the suite metadata.\n/Metadata.rdf\n/ont/cmt.owl\n/ont/conference.owl\n/ref/cmt-conference.rdf\nThe test suite consists of various test cases (suite items), each typically associated with a source and target ontology and a reference alignment (data items). Below we see an extract of the suite metadata stored in the Metadata.rdf file. We use a namespace\nconference\nas a shortcut for the URI\nhttp://www.seals-project.eu/alignment/conference#\n:\n<rdf:RDF \n    xmlns:rdf=\"\nhttp://www.w3.org/1999/02/22-rdf-syntax-ns#\n\" \n     xmlns:seals=\"\nhttp://www.seals-project.eu/ontologies/SEALSMetadata.owl#\n\" \n     xmlns:owl=\"\nhttp://www.w3.org/2002/07/owl#\n\" \n     xmlns:dc=\"\nhttp://purl.org/dc/terms/\n\" \n     xmlns:xsd=\"\nhttp://www.w3.org/2001/XMLSchema#\n\" \n     xmlns:rdfs=\"\nhttp://www.w3.org/2000/01/rdf-schema#\n\"> \n\n<rdf:Description rdf:about=\"\nhttp://www.seals-project.eu/alignment/conference#ConferenceSuite\n\">\n    <rdf:type rdf:resource=\"\nhttp://www.seals-project.eu/ontologies/SEALSMetadata.owl#Suite\n\" />\n    <seals:hasSuiteItem rdf:resource=\"\nhttp://www.seals-project.eu/alignment/conference#cmt-conference\n\" />\n</rdf:Description>\n\n<rdf:Description rdf:about=\"\nhttp://www.seals-project.eu/alignment/conference#cmt-conference\n\">\n    <rdf:type rdf:resource=\"\nhttp://www.seals-project.eu/ontologies/SEALSMetadata.owl#SuiteItem\n\" />\n    <seals:hasDataItem rdf:resource=\"\nhttp://www.seals-project.eu/alignment/conference#cmt-source\n\" />\n    <seals:hasDataItem rdf:resource=\"\nhttp://www.seals-project.eu/alignment/conference#conference-target\n\" />\n    <seals:hasDataItem rdf:resource=\"\nhttp://www.seals-project.eu/alignment/conference#cmt-conference-ref\n\" />\n    <dc:identifier>cmt-conference</dc:identifier> \n</rdf:Description>\n\n<rdf:Description rdf:about=\"\nhttp://www.seals-project.eu/alignment/conference#cmt-source\n\">\n    <rdf:type rdf:resource=\"\nhttp://www.seals-project.eu/ontologies/SEALSMetadata.owl#DataItem\n\" />\n    <seals:isLocatedAt>./ont/cmt.owl</seals:isLocatedAt>\n    <seals:hasComponentType>source</seals:hasComponentType>\n    <dc:identifier>cmt-source</dc:identifier> \n</rdf:Description>\n\n<rdf:Description rdf:about=\"\nhttp://www.seals-project.eu/alignment/conference#conference-target\n\">\n    <rdf:type rdf:resource=\"\nhttp://www.seals-project.eu/ontologies/SEALSMetadata.owl#DataItem\n\" />\n    <seals:isLocatedAt>./ont/conference.owl</seals:isLocatedAt>\n    <seals:hasComponentType>target</seals:hasComponentType>\n    <dc:identifier>conference-target</dc:identifier> \n</rdf:Description>\n\n<rdf:Description rdf:about=\"\nhttp://www.seals-project.eu/alignment/conference#cmt-conference-ref\n\">\n    <rdf:type rdf:resource=\"\nhttp://www.seals-project.eu/ontologies/SEALSMetadata.owl#DataItem\n\" />\n    <seals:isLocatedAt>./ref/cmt-conference.rdf</seals:isLocatedAt>\n    <seals:hasComponentType>reference</seals:hasComponentType>\n    <dc:identifier>cmt-conference-ref</dc:identifier> \n</rdf:Description>\nFirst we describe the suite with the subject conference:ConferenceSuite of type seals:Suite and define the suite items associated with the suite using the property seals:hasSuiteItem and add a statement with this property for each suite item. In this case we only have a single suite item with the subject conference:cmt-conference of type seals:SuiteItem. The suite item has a dc:identifier property defining the name of the suite items, which we later use for retrieval of the associated data items.\nAssociated with this suite item are three data items, defined by the seals:hasDataItem statements, in particular, conference:cmt-source, conference:conference-target and conference:cmt-conference-ref. Each of these data items are described separately. In the metadata we define that the data items are of type seals:DataItem. Furthermore, we give the location as a path relative to the top level within the ZIP file using the seals:isLocatedAt property. With the seals:hasComponentType we give the data item a component type, with which we can later refer to and access the data item (or component). Similar to the suite item, the dc:identifier statement has the purpose to name the data item, which allows us to later access the data item.\nAccessing the Suite\nRetrieve the suite metadata:\nhttp://seals.sti2.at/tdrs-web/testdata/persistent/Conference+Testsuite/2010/suite/\nRetrieve the source ontology of test case cmt-conference:\nhttp://seals.sti2.at/tdrs-web/testdata/persistent/Conference+Testsuite/2010/suite/cmt-conference/component/source/\nRetrieve the target ontology of test case cmt-conference:\nhttp://seals.sti2.at/tdrs-web/testdata/persistent/Conference+Testsuite/2010/suite/cmt-conference/component/target/\nRetrieve the reference alignment of test case cmt-conference:\nhttp://seals.sti2.at/tdrs-web/testdata/persistent/Conference+Testsuite/2010/suite/cmt-conference/component/reference/\nRetrieve the file cmt-source of test case cmt-conference:\nhttp://seals.sti2.at/tdrs-web/testdata/persistent/Conference+Testsuite/2010/suite/cmt-conference/item/cmt-source/\nRetrieve the file cmt-target of test case cmt-conference:\nhttp://seals.sti2.at/tdrs-web/testdata/persistent/Conference+Testsuite/2010/suite/cmt-conference/item/cmt-target/\nRetrieve the file cmt-conference-ref of test case cmt-conference:\nhttp://seals.sti2.at/tdrs-web/testdata/persistent/Conference+Testsuite/2010/suite/cmt-conference/item/cmt-conference-ref/\nAs you can see, the dc:identifier value of the suite item conference:cmt-conference is used to access the items and components associated with it. As we have defined a component type for all three data items of conference:cmt-conference, we can access them via the\ncomponent\nresource, using the value of the seals:hasComponentType property. However, we can still access the data items over the\nitem\nresource using the dc:identifier value of the data items. Generally speaking, the following URL schemes are used to access the suite metadata and the data items:\nRetrieve the suite metadata:\nhttp://seals.sti2.at/tdrs-web/testdata/persistent/\n[collection name]/[version number]/suite/\nRetrieve a component:\nhttp://seals.sti2.at/tdrs-web/testdata/persistent/\n[collection name]/[version number]/suite/[suite item identifier]/component/[component type]/\nRetrieve a data item:\nhttp://seals.sti2.at/tdrs-web/testdata/persistent/\n[collection name]/[version number]/suite/[suite item identifier]/item/[item identifier]/",
  "speaker": "SYSTEM",
  "uuid": "bf46fd1a-8428-4234-9ae0-16b04dc7c398"
}