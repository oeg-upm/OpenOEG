{
  "message": "SYSTEM: Wiki: https://delicias.dia.fi.upm.es/wiki/index.php/Queries_SPARQL_t%C3%ADpicas \n\nSome sources\n\nhttps://github.com/fadmaa/rdf-analytics/blob/master/queries.txt\nhttps://github.com/sindice/sparqled/tree/master/sparql-summary\nhttp://data.aalto.fi/visu\nhttp://ceur-ws.org/Vol-782/PresuttiEtAl_COLD2011.pdf\nhttps://github.com/scampi/gosparqled\nhttp://www.irisa.fr/LIS/ferre/sparklis/\nhttps://github.com/alangrafu/farrah\nBottom-up techniques\n\nWhich types/classes are used:\nSELECT DISTINCT ?concept\n WHERE { ?uri a ?concept. }\nGiven a specific concept, you  can infer from the data what are the predicates/properties for it:\nSELECT DISTINCT ?prp\n WHERE { [] ?prp <a-concept>. }\nWhich predicates are used?\nSELECT DISTINCT ?p\n WHERE {?x ?p ?o}\nWhich predicates are used by instances of the type :foo found in Q1\nSELECT DISTINCT ?p\n WHERE {?x ?p :foo}\nHaving some statistics on the types may help too\nSELECT ?type (COUNT(?instance) AS ?count)\n WHERE { ?instance a ?type . } GROUP BY ?type\nUseful techniques if the model is declared explicitly\n\nGet all the classes\nSELECT DISTINCT ?class\n WHERE { {?class a owl:Class} UNION {?class a rdfs:Class}}\nGet all domains and ranges of properties\nSELECT DISTINCT ?property ?domain ?range\n WHERE { {?property rdfs:domain ?domain} UNION {?property rdfs:range ?range}}\nThat said, if the model is exposed with the data, the values of rdf:type will contain e.g., rdfs:Class and owl:Class ... Of course in the ideal situation where you have an ontology, the following would bring its elements.\nSELECT DISTINCT ?o ?x ?type\n WHERE {?x rdf:type ?type.\n        ?x rdfs:isDefinedBy ?o.\n        ?o a owl:Ontology }\nAnother. Not clear what it does\nSELECT  ?label  (COUNT (?label) AS ?cardinality) ?source ?target\n WHERE {\n   {\n     SELECT ?s (GROUP_CONCAT(concat('<',str(?type),'>')) AS ?source)\n     WHERE {\n         {\n           SELECT ?s ?type\n           WHERE {\n               { ?s a ?type . }\n           } ORDER BY ?type\n         }\n     } GROUP BY ?s\n   }\n   ?s ?label ?sSon .\n   OPTIONAL {\n       {\n         SELECT ?sSon (GROUP_CONCAT(concat('<',str(?typeSon),'>')) AS ?target)\n         WHERE {\n             {\n               SELECT ?sSon ?typeSon\n               WHERE {\n                   { ?sSon a ?typeSon . }\n               } ORDER BY ?typeSon\n             }\n         } GROUP BY ?sSon\n       }\n   }\n } GROUP BY ?label ?source ?target",
  "speaker": "SYSTEM",
  "uuid": "b5e76140-496b-4f65-a4dc-74bb1ae584ab"
}