{
  "message": "SYSTEM: Poveda_et_al_ISWC_2010_vFinal.pdf: Página 7\nP13. Missing inverse relationships: there are two relationships in the ontology that \nshould be defined as inverse relations. For example, the case in which the \nontology developer omits the inverse definition between the relations \n“hasLanguageCode” and “isCodeOf”.  \nP14. Misusing “allValuesFrom” [11]: this pitfall can appear in two different ways. \nIn the first, the anomalie is to use the universal restriction (“allValuesFrom”) as \nthe \ndefault \nqualifier \ninstead \nof \nusing \nthe \nexistential \nrestriction \n(“someValuesFrom”). \nThis \nmeans \nthat \nthe \ndeveloper \nthinks \nthat \n“allValuesFrom” implies “someValuesFrom”. In the second, the mistake is to \ninclude “allValuesFrom” to close off the possibility of further additions for a \ngiven property. An example of this type of pitfall is to define the class “Book” as \n„producedBy some Writer and uses only Paper‟ and closing the possibility of \nadding “Ink” as element use in the writing.  \nP15. Misusing “not some” and “some not” [8]: to confuse the representation of \n“some not” and “not some”. An example of this type of pitfall is to define a \nvegetarian pizza as any pizza which both has some topping which is not meat \nand also has some topping which is not fish. \nP16. Misusing primitive and defined classes [11]: to fail to make the definition \n„complete‟ rather than „partial‟ (or „necessary and sufficient‟ rather than just \n„necessary). It is critical to understand that, in general, nothing will be inferred \nto be subsumed under a primitive class by the classifier. This pitfall implies that \nthe developer does not understand the open world assumption.  \nP17. Specializing too much a hierarchy: the hierarchy in the ontology is specialized \nin such a way that the final leaves can not have instances. An example of this \ntype of pitfall is to create the class “RatingOfRestaurants” and the classes \n“1fork”, “2forks”, and so on, as subclasses instead of as instances. This pitfall is \nrelated to the guidelines for distinguishing between a class and an instance \nprovided in [8]. \nP18. Specifying largely the domain or the range [8, 11]: not to find a domain or a \nrange general enough. An example of this type of pitfall is to restrict the domain \nof the relationship “isOfficialLanguage” to the class “City”, instead of allowing \nalso \nthe \nclass \n“Country” \nor \na \nmore \ngeneral \nconcept \nsuch \nas \n“GeopoliticalObject”. \nP19. Swapping intersection and union: the ranges and/or domains of the properties \n(relationships and attributes) are defined by intersecting several classes in cases \nin which the ranges and/or domains should be the union of such classes. An \nexample of this type of pitfall is to create the relationship “takesPlaceIn” with \ndomain “OlympicGames” and with range the intersection of the classes “City” \nand “Nation”. Another example can be to create the attribute “Name” for the \nclasses “City” and “Drink” and to define its domain as the intersection of both \nclasses. This pitfall is related to the common error that appears when defining \nranges and domains described in [11] and also related to the guidelines for \ndefining these elements provided in [8].  \nP20. Swapping Label and Comment: the contents of the Label and Comment \nannotation properties are swapped. An example of this type of pitfall is to \ninclude in the Label annotation of the class “Crossroads” the following sentence \n",
  "speaker": "SYSTEM",
  "uuid": "9aa7534a-7523-4817-9d90-971057679dd4"
}