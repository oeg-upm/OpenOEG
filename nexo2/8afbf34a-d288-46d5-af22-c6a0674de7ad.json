{
  "message": "SYSTEM: BUSQUEDA.pdf: Página 14\nBÚSQUEDA \n \n14 \nJ. Rubio / P.R. Muro / J. Bañares \n \nOctubre 2004 - Curso 2004-2005 \nen Lisp. Por ejemplo, si deseamos almacenar una colección de números enteros en \nPascal o C emplearíamos una estructura de la familia \"vector\" (un \"array\"). En Lisp \nesto puede ser conseguido utilizando una lista. Para tratar con una lista de enteros \nes necesario impedir su evaluación: \n \n> (1 2 3) ===> ¡¡¡¡ ERROR !!!! \n \n> '(1 2 3) \n===> (1 2 3) \nAhora necesitamos operadores predefinidos que nos permitan acceder a los \nelementos de una lista. El operador first extrae el primer miembro de una lista, \nmientras que el operador rest devuelve una lista como la inicial, pero sin su primer \nmiembro. Estos dos operadores utilizados combinadamente permiten acceder a \ncualquier miembro de una lista: \n \n> (first '(7 17 -3)) \n \n \n===> 7 \n \n> (rest '(7 17 -3))  \n \n \n===> (17 -3) \n \n> (first (rest '(7 17 -3))) \n \n===> 17 \n \n> (first (rest (rest '(7 17 -3)))) ===> -3 \nObsérvese el siguiente ejemplo de comportamiento de rest: \n \n> (rest '(-3)) ===> NIL \nPor último el predicado endp nos informa de si una lista es vacía (esto es, igual a \nnil): \n \n> (endp '(7 17 -3))  \n===> NIL \n \n> (endp '()) \n \n \n===> T \n \n> (endp ()) \n \n \n===> T \n \n> (endp 'nil)  \n \n===> T \n \n> (endp nil) \n \n \n===> T \n \n> (endp (rest '(-3))) \n===> T \nEstas pocas herramientas para el tratamiento de listas, utilizadas junto a la \nrecursividad, nos permiten ya implementar algoritmos para el procesamiento de \ndatos estructurados. Por ejemplo, la siguiente función calcula la suma de los \nelementos de una lista de enteros (se impone que si la lista de entrada es vacía se \ndevuelva 0). \n \n> (defun suma-lista-enteros (lista-enteros) \n \n \n(if (endp lista-enteros) \n \n \n \n0 \n \n \n \n(+ (first lista-enteros)  \n \n \n \n   (suma-lista-enteros (rest lista-enteros))))) \n",
  "speaker": "SYSTEM",
  "uuid": "8afbf34a-d288-46d5-af22-c6a0674de7ad"
}