{
  "message": "SYSTEM: Wiki: https://delicias.dia.fi.upm.es/wiki/index.php/Art%C3%ADculos_relacionados_con_el_data_provenance \n\nAutores :\nSatya S. Sahoo, Roger Barga, Amit Sheth, Krishnaprasad Thirunarayan, Pascal Hitzler\nFecha :\nWWW 2010,(24-30 de Abril), Universidad Wright State, Dayton y Microsoft Research, Radmond.\nUn sistema provenance es completamente inútil sin un sistema de queries bien definido. No sirve de nada tener toda la información referente al origen de un objeto si luego no sabemos cómo recuperarla.\nSe presenta el sistema prOM, que modela y resuelve los problemas de queries en la gestión del provenance.\nSucio:\nNecesidad de una representación común en la terminología del provenance. Las ontologías son consideradas como soluciones adecuadas para los requerimientos que tenemos, y además soportan el razonamiento para descubrir conocimiento implícito en amplias colecciones de datos.\nSin embargo, la información provenance no se limita a un solo dominio, por lo que el desarrollo de una ontología común es impracticable. En el paper se propone un enfoque multi-ontológico modular, fundado en una ontología para provenance llamada Provenir. Esta ontología se puede expandir para crear provenance sobre dominios específicos, como bien se muestra en el artículo con la ontología llamada Tridente.\nHasta la fecha no ha habido ningún estudio significativo sobre las características de las queries que deben poder hacerse a un sistema provenance. Se propone un esquema de clasificación para las queries, para categorizarlas y definir operadores en términos de la ontología Provenir.\nModelo\nPrimer problema: encontrar el equilibrio entre las ontologías abstractas de alto nivel y las de dominio específico. Provenir representa un set de términos provenance que son comunes a los dominios y que pueden ser fácilmente extensibles a dominios específicos por los desarrolladores de acuerdo a sus requisitos particulares.\nProceso, dato y agente son las tres clases clave en la ontología Provenir. Para relacionarlos entre sí se define la “Relation ontology”, que propone un set de 10 propiedades con dominio y rango bien definidos. Además, también se clasifican los parámetros de espacio, tiempo y tema, (por ejemplo, la localización geográfica de un sensor es un parámetro de espacio).\nProvenance query y análisis:\nLas queries se pueden dividir en 3 categorías: las que recuperan información provenance de una entidad, las que recuperan entidades que satisfagan una serie de restricciones y las que efectúan operaciones con la información provenance, (como modificación o comparación).\nPara llevar a cabo cada una de las queries, se proponen los operadores.  El primero sirve para satisfacer las queries de la categoría 1: provenance. Tiene 2 fases: inicialización y recursiva. En la fase de inicialización, se añaden todos los individuos de la clase proceso que tienen que ver con la entrada a través de la propiedad “has_participant”. En la fase recursiva, se utilizan los procesos individuales para rescatar todas las entidades que están relacionadas con process mediante la relación “preceeded_by”.\nPara el segundo operador, provenance_context, usamos directamente en el primer operador. Como entrada admite los valores de provenance a modo de restricciones, y como salida da las entidades que satisfacen dichas restricciones.\nEn último lugar, los operadores restantes sirven para comparar y mezclar provenance. Se usa la definición RDF equivalencia de grafos con la funcionalidad añadida de “colorear” los nodos y etiquetar aristas usando la ontología Provenir, de manera que se puedan comparar dos grafos provenance. Para realizar la mezcla, se eligen como entrada 2 grafos provenance y como salida obtenemos un grafo mezclado y sin duplicados.\nImplementación y evaluación:\nPara la implementación se usa un compositor de queries, que hace un mapping de los operadores a SPARQL; una función para procesar el cierre transitivo en RDF eficientemente, y un optimizador de queries usando vistas materializadas de provenance, que permite al motor de peticiones escalar grandes sets de datos RDF.\nEn cuanto a la evaluación, se realiza la separación entre la complejidad de la expresión de la query y la complejidad de los datos. En ambos casos, los resultados obtenidos son que la implementación directa del provenance no es escalable si los datos se van incrementando. Por ello se introducen las vistas materializadas de provenance, que materializa sub-grafos provenance para las clases de las entradas seleccionadas. Con ellas los resultados mejoran enormemente.\nPara terminar el artículo se hace una pequeña revisión del estado del arte, en donde se muestran las diferencias con el OPM, y las carencias y contradicciones que muestra a la hora de hacer una implementación.",
  "speaker": "SYSTEM",
  "uuid": "09a11f57-2a8e-4db9-9cce-dd2cccb656d3"
}