{
  "message": "SYSTEM: BUSQUEDA.pdf: Página 52\nBÚSQUEDA \n \n52 \nJ. Rubio / P.R. Muro / J. Bañares \n \nOctubre 2004 - Curso 2004-2005 \nprimero es el símbolo t eso indica que deseamos mostrar la información en el \ndispositivo estándar de salida (por defecto, la pantalla). En este caso el valor \ndevuelto por format es nil. El segundo argumento debe ser una cadena de \ncaracteres (delimitada por comillas) que se denomina cadena de control del format. \nDentro de la cadena de control aparecen los caracteres estándar, que serán escritos \nliteralmente en pantalla, y los caracteres de control que son precedidos por el \ncarácter reservado ~. En el ejemplo, aparece el carácter de control % que hace que \nel cursor salte de línea y también el carácter de control s. Este último indica que \nformat va a tener más argumentos: tantos como veces aparezca la subcadena ~s; \ndichos argumentos serán evaluados y sus valores reemplazarán a las subcadenas \n~s correspondientes. Véase su uso en el objeto (format t \"~%Mala entrada: \n~s\" entrada). \n  (defun pregunta () \n \n(format \nt \n \n       \"~% Introduzca una vocal ('Fin' para terminar): \") \n \n(let ((entrada (read))) \n \n  (if (eq entrada 'fin) \n \n      (progn \n \n        (format t \"~%Si esta seguro pulse 'y', si no 'n'\") \n \n        (if (y-or-n-p)  \n \n            (progn \n \n              (format t \"~%Pulse espacio para terminar\") \n \n              (read-char) \n \n              (values)) \n \n          (pregunta))) \n \n    (progn  \n \n      (case entrada \n \n        (a (print 'agua)) \n \n        (e (print 'este)) \n \n        (i (print 'idioma)) \n \n        (o (print 'oso)) \n \n        (u (print 'unico)) \n \n        (otherwise  \n \n          (format t \"~%Mala entrada: ~s\" entrada))) \n \n      (pregunta))))) \nSiguiendo en el cuerpo de pregunta (es un progn implícito), encontramos un let \nen el que la variable local entrada es ligada con el resultado devuelto por la \nprimitiva de lectura read. Si se utiliza sin argumentos, read lee un objeto Lisp del \nteclado y lo devuelve (sin evaluar) como valor. En el cuerpo del let aparece un \ncondicional y en su condición utilizamos la primitiva eq. Se trata de una función \n",
  "speaker": "SYSTEM",
  "uuid": "0d54fefd-515f-4a7d-b31b-696548752923"
}