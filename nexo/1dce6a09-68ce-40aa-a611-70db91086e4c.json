{
  "message": "SYSTEM: Wiki: https://delicias.dia.fi.upm.es/wiki/index.php/DevTools,_a_plug-in_installer \n\n<dependencies>\n    <!--\n      Define the tools used by your environment here\n    -->\n  </dependencies>\n </project>\nThe\ntoolsDirectory\nshould be the same for every project in your company: one of the goals of the DevTools plugin is to have a unique installation of a given tool, and share it between projects.When\nmvn devtools:update\nis run in the directory containing this POM, the DevTools plugin downloads and installs any tool that is not already on the workstation.\ndevtools:update\n\nFull name:\nnet.sf:maven-devtools-plugin:1.0-SNAPSHOT:update\nDescription:\nFor a particular environment, downloads and installs the development tools not yet present on the workstation. These tool are expressed as dependencies in the environment's POM.\nAttributes:\nRequires a Maven 2.x project to be executed.\nRequired Parameters\nName\nType\nSince\nDescription\ntoolsDirectory\nFile\n-\nThe base installation directory, in which all tools will be\ninstalled\nOptional Parameters\nName\nType\nSince\nDescription\nlocalRepository\nArtifactRepository\n-\nThe local repository\nremoteRepositories\nList\n-\nThe remote repositories\nParameter Details\n\nlocalRepository:\nThe local repository.\nType\n:\norg.apache.maven.artifact.repository.ArtifactRepository\nRequired\n:\nNo\nExpression\n:\n${localRepository}\nremoteRepositories:\nThe remote repositories\nType\n:\njava.util.List\n</li>\nRequired\n:\nNo\nExpression\n:\n${project.remoteArtifactRepositories}\ntoolsDirectory:\nThe base installation directory, in which all tools will be\ninstalled\nType\n:\njava.io.File\nRequired\n:\nYes\nExpression\n:\n${toolsDirectory}\nPreparing the tools configuration\n\nHaving all the tools automatically installed on the workstation is not enough: typically, your developers will also need configuration files and startup scripts to start using them. One important rule here is\nnot to introduce project-specific configuration in tool installations\n.\nTools are shared between projects, so it should always be safe to expect that a tool is the same as when it was first installed from the repository. For instance, suppose project two projects use the same version of Tomcat, but different security realms. If we don't properly isolate the two configurations, we won't be able to share the same Tomcat installation.\nHow to do this varies between products. For instance:\nfor Tomcat, use the\nCATALINA_BASE\nenvironment variable. This is explained in the\nRUNNING.txt\nfile at the root of the Tomcat distribution.\nfor Eclipse, put your workspace\nand\nconfiguration away from the Eclipse installation. This is controlled by the\n-data\nand\n-configuration\nswitches of the Eclipse executable.\nfor BEA Weblogic, put your domain outside of the Weblogic installation. If you need to add anything to the classpath (for instance, a license file), do it in the server's startup script, not by adding files in the default installation.\nWhen a new developer joins your project, you provide him the environment's POM and the tools' configuration (storing these files in a SCM module can be a good idea). He then runs\nmvn devtools:update\nto complete his environment with the tools.\nPresentation\n\nYou can download it from\nhere\n.",
  "speaker": "SYSTEM",
  "uuid": "1dce6a09-68ce-40aa-a611-70db91086e4c"
}