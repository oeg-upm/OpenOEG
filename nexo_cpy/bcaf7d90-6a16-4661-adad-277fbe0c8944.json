{
  "message": "SYSTEM: Wiki: https://delicias.dia.fi.upm.es/wiki/index.php/Proyectos_Fin_de_Carrera \n\nTipo: TFG\nResumen general del trabajo:  El software que se desarrolla en investigaciones científicas es cada vez más importante para reproducir y reutilizar los resultados descritos en artículos académicos. Dicho software se suele describir en archivos README y documentación dedicada, de manera fragmentada, heterogénea y no accesible programáticamente. Este TFG extenderá trabajos de otros alumnos y definirá métodos para la evaluación de técnicas existentes de reconocimiento de entidades nombradas sobre READMEs para generar grafos de conocimiento.\nLista de objetivos concretos:\nCreación de un framework de evaluación de entidades nombradas en software\nExtensión del framework para evaluar los grafos de conocimiento generados\nCreación de un gold standard con 40-50 repositorios característicos\nEvaluación de las herramientas de extracción existentes con el framework\nIdentificación de puntos de mejora de las herramientas existentes\nDesglose de la dedicación total del trabajo en horas (324 horas en los Grados):\nFamiliarización con Ner4Soft y despliegue del servicio (20%)\nConstrucción de un corpus de hasta 40-50 repositorios para evaluar los resultados (20%)\nDefinición de grafos de conocimiento para comparar resultados (20%)\nCreación de resúmenes de las evaluaciones para comparar resultados (20%).\nMemoria y documentación (20%)\nConocimientos previos recomendados para hacer el trabajo:\nPython\nRDF\nProcesamiento de Lenguaje Natural\nTítulo del trabajo:  Creación de un framework para comparar proyectos de software científico similares\n\nTipo: TFG\nEstado: No empezado, propuesto\nResumen general del trabajo: Repositorios de código como GitHub tienen millones de herramientas de software libre para diversas actividades. Sin embargo, es difícil encontrar y comparar herramientas con un propósito similar. En este TFG se aplicarán distintas métricas de similitud de software científico para facilitar su comparación basados en su documentación, código o metadatos.\nLista de objetivos concretos:\nAplicaciones de métricas de similitud basados en metadatos.\nAplicaciones de métricas de similitud basados en texto (embeddings)\nAplicaciones de métricas de similitud basados en código (embeddings)\nAplicaciones de métricas de similitud basados en métodos híbridos\nConstrucción de un corpus de repositorios para demostrar los resultados\nCreación de una página web para visualizar los resultados\nDesglose de la dedicación total del trabajo en horas (324 horas en los Grados):\nFamiliarización con técnicas de extracción automática de grafos de conocimiento de metadatos (SOMEF) (10%)\nFamiliarización con técnicas de similitud de texto basado en embeddings con modelos pre-entrenados (10%)\nFamiliarización con técnicas de similitud de código basados en embeddings con modelos pre-entrenados (10%)\nCreación de un framework que extraiga similitudes dados dos o más herramientas (20%)\nCreación de un corpus y demostración (30%)\nDocumentación y memoria (20%)\nConocimientos previos recomendados para hacer el trabajo:\nPython\nRDF\nJSON\nHuggingface y procesamiento del lenguaje natural\nTítulo del trabajo: Creación de APIs para consultar datos de grafos de conocimientos de manera intuitiva\n\nTipo: TFG\nEstado: No empezado, propuesto\nResumen general del trabajo: Los grafos de conocimiento se han vuelto una tecnología popular entre instituciones y empresas para representar y agregar datos de distintos dominios. Sin embargo, una gran cantidad de desarrolladores no conocen las tecnologías semánticas como SPARQL. Este TFG utilizará una herramienta para crear APIs sobre grafos de conocimiento, y la actualizará según la última versión de OpenAPI para que se generen servidores de manera automática.\nLista de objetivos concretos:\nActualización de la última versión de OBA con OpenAPI de manera manual, incluyendo la realización de queries.\nConstrucción del servidor de manera automática\nDespliegue con contenedores Docker\nDesglose de la dedicación total del trabajo en horas (324 horas en los Grados)\nFamiliarización con OBA (\nhttps://github.com/KnowledgeCaptureAndDiscovery/OBA/\n) (10%)\nFamiliarización con OpenAPI (5%)\nFamiliarización con JSON-LD y JSON-LD framing (5%)\nActualización de OBA con la última versión de OpenAPI (50%)\nComprobación del funcionamiento del servidor (10%)\nDocumentación y memoria (20%)\nConocimientos previos recomendados para hacer el trabajo:\nPython\nRDF\nJSON\nJava\nOpenAPI\nTítulo del trabajo: Creación de grafos de conocimiento a partir de contenedores para facilitar su monitorización\n\nTipo: TFG\nEstado: No empezado, propuesto\nResumen general del trabajo: Los contenedores software (por ejemplo, Docker) se han convertido en una herramienta indispensable para el despliegue de aplicaciones en distintas infraestructuras. Sin embargo, monitorizar los contenedores desplegados en una organización es una tarea que conlleva esfuerzo para los administradores de sistemas. En este TFG se extenderá trabajo anterior sobre la descripción de dependencias en contenedores para monitorizar los contenedores desplegados en una organización.\nLista de objetivos concretos:\nAnálisis para representar de contenedores software.\nExtensión de c2t (\nhttps://github.com/osoc-es/c2t\n)  para:\n1) enlazar con repositorios de vulnerabilidades comunes en paquetes software\n2) exportar los contenedores desplegados en un servidor.\nCreación de una página web que utilice el grafo de conocimiento para visualizar la monitorización producida.\nDesglose de la dedicación total del trabajo en horas (324 horas en los Grados):\nFamiliarización con c2t (10%)\nRepresentación de todos los contenedores en una organización (10%)\nExtensión del paquete c2t para describir y exportar grafos de conocimiento de contenedores. (40%)\nCreación de un portal de visualización de monitorización (20%)\nDocumentación y memoria (20%)\nConocimientos previos recomendados para hacer el trabajo:\nPython\nRDF\nJSON\nTítulo del trabajo: Creación de un servicio de enriquecimiento de metadatos de software a partir de repositorios de código científico\n\nTipo: TFG\nEstado:No empezado, propuesto\nResumen general del trabajo: Software Heritage es un repositorio de software científico cuyo objetivo es almacenar de manera sistemática todo el código existente. Sin embargo, dicho código raramente está descrito con metadatos que faciliten su descubrimiento o reutilización. En este TFG, el alumno explorará las APIs de software Heritage para crear un servicio de enriquecimiento de metadatos software que derive nuevo conocimiento sobre software almacenado en la plataforma.\nLista de objetivos concretos:\nExplorar la API de Software Heritage, y cómo recuperar contenidos dependiendo de los releases e identificadores utilizados\nIntegrar los servicios de descripción de software desarrollados en UPM para enriquecer los registros de Software Heritage.\nDefinición de un marco de evaluación para medir el enriquecimiento producido por el servicio.\nCorrección de fallos en las herramientas desarrolladas en la UPM\nCreación de un grafo de conocimiento de ejemplo a partir de 100 repositorios de Software Heritage.\nDesglose de la dedicación total del trabajo en horas (324 horas en los Grados):\nFamiliarización con la API de Software Heritage (10%)\nFamiliarización con SOMEF (\nhttps://github.com/KnowledgeCaptureAndDiscovery/somef/\n)  (10%)\nIntegración de resultados con Morph-KGC (20%)\nCreación de un grafo de conocimiento de 100 repositorios (20%)\nEvaluación de los resultados (10%)\nCreación de consultas de ejemplo y explotación de los resultados (10%)\nDocumentación y memoria (20%)\nConocimientos previos recomendados para hacer el trabajo:\nJSON\nPython\nRDF\nTítulo del trabajo: Creación de grafos de conocimiento de metadatos de software a partir de múltiples fuentes de datos",
  "speaker": "SYSTEM",
  "uuid": "bcaf7d90-6a16-4661-adad-277fbe0c8944"
}