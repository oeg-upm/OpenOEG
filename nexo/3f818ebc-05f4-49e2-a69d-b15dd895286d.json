{
  "message": "SYSTEM: Poveda_et_al_ISWC_2010_vFinal.pdf: Página 6\nontology. An example of this type of pitfall is to create the relationship \n“memberOfTeam” and to miss the class representing teams; thus, the \nrelationship created is isolated in the ontology. \nP5. Defining wrong inverse relationships: two relationships are defined as inverse \nrelations when actually they are not. For example, something is sold or \nsomething is bought; in this case, the relationships “isSoldIn” and “isBoughtIn” \nare not inverse. \nP6. Including cycles in the hierarchy [6, 8]: a cycle between two classes in the \nhierarchy is included in the ontology, when it is not intended to have such \nclasses as equivalent. That is, some class A has a subclass B and at the same \ntime B is a superclass of A. An example of this type of pitfall is to create the \nclass “Professor” as subclass of “Person”, and the class “Person” as subclass of \n“Professor”. \nP7. Merging different concepts in the same class: a class whose identifier is \nreferring to two or more different concepts is created. An example of this type of \npitfall is to create the class “StyleAndPeriod” or “ProductOrService”. \nP8. Missing annotations: the ontology terms lack of annotations properties. It is \nworth mentioning that this type of properties improve the ontology \nunderstanding and usability from a user point of view. \nP9. Missing basic information: needed information is not included in the ontology. \nSometimes this pitfall is related with requirements in the ORSD [12, 13] that are \nnot covered by the ontology.  Other times it is related with details that could be \nadded to the ontology in order to make it more complete without complicate it \ntoo much.  An example of this type of pitfall is to create the relationship \n“startsIn” to represent that the routes have a starting point in a particular \nlocation; and to miss the relationship “endsIn” to show that a route has an end \npoint.  \nP10. Missing disjointness [6, 8, 11]: the ontology lacks of disjoint axioms between \nclasses or between properties that should be defined as disjoint. For example, we \ncan create the classes “Odd” and “Even” (or the classes “Prime” and \n“Composite”) without being disjoint; such representation is not correct based on \nthe own definition of these types of numbers. \nP11. Missing domain or range in properties: relationships and/or attributes without \ndomain or range (or both) are included in the ontology. There are situations in \nwhich the relation is very general and the range can be the most general concept \n“Thing”; however, in other cases, the relations are more specific. An example of \nthis type of pitfall is to create the relationship “hasWritten” in an ontology about \nart in which the relationship domain could be “Writer” and the relationship \nrange could be “LiteraryWork”. This pitfall is related to the common error when \ndefining ranges and domains described in [11]. \nP12. Missing equivalent properties: when an ontology is imported into another, \nclasses that are duplicated in both ontologies are normally defined as equivalent \nclasses. However, the ontology developer misses the definition of equivalent \nproperties in those cases of duplicated relationships and attributes. For example, \nthe classes “CITY” and “City” in two different ontologies are defined as \nequivalent classes; however, relationships “hasMember” and “has-Member” in \ntwo different ontologies are not defined as equivalent relations. \n",
  "speaker": "SYSTEM",
  "uuid": "3f818ebc-05f4-49e2-a69d-b15dd895286d"
}