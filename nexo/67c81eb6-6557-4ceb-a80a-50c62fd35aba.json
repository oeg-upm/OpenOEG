{
  "message": "SYSTEM: Neon_2008_d2.2.2.pdf: Página 35\nD2.2.2 Methods and Tools Supporting Re-engineering\nPage 35 of 124\nThis tool is intended to create instances of an existing ontology on demand or in a batch process-\ning. Therefore, D2R supports the approach to transforming resource content into instances of an\nexisting ontology. D2R Server performs a semi-automatic conversion and uses a formal spec-\niﬁcation of the conversions between entities of the database schema and the ontology schema.\nD2R Server contemplates syntactic transformation aspects, and how symbols are structured in\nthe database and ontology formats. It also contemplates semantic transformation aspects, and the\nsemantic interpretation of the resource elements when deﬁning transformations to ontology elements.\nHowever, D2R Server does not tackle the internal data model of the resource, nor does it describe\nhow the resource data is represented and accessed for the transformation. The tool does not provide\nthe resource provenance information, so the resultant ontology does not keep the reference to the\ndatabase. D2R Server consists of:\n– A D2RQ mapping language, a declarative mapping language for describing the relation between\nan ontology and a relational data model.\n– A D2RQ engine, a plug-in for the Jena and Sesame Semantic Web toolkits, which uses the\nmappings to rewrite Jena and Sesame API calls to SQL queries against the database and passes\nquery results up to the higher layers of the frameworks.\nThis tool produces one single ontology and generates ontology instances. The resultant ontology\ninstances are expressed in RDF.\n• TopBraid Composer41 is an enterprise-class modeling environment for developing Semantic Web\nOntologies. TopBraid Composer can convert databases into ontologies. This tool has a relational\ndatabase importer, D2RQ42. It follows the approach to transforming resource schema into an on-\ntology schema and the resource content into instances of the ontology. TopBraid Composer\nperforms a semi-automatic conversion and uses a formal speciﬁcation of the conversions be-\ntween entities of the database schema and the ontology schema. TopBraid Composer contemplates\nsyntactic transformation aspects, and how symbols are structured in the database and ontology for-\nmats. It also contemplates semantic transformation aspects, and the semantic interpretation of the\nresource elements when deﬁning transformations to ontology elements. TopBraid Composer does not\ntackle the internal data model of the resource, nor does it describe how the resource data is rep-\nresented and accessed for the transformation. This tool does not provide the resource provenance\ninformation, therefore the resultant ontology does not keep the reference to the database.\nTopBraid Composer, for converting databases into ontologies, performs the following tasks:\n– Static import schema, where tables become classes, columns become properties and link tables\nbecome object properties.\n– Dynamic import of actual data, where rows become instances on the ﬂy, i.e. data can stay where\nit is.\nThis tool follows, for converting XML into ontologies, the following two approaches:\n– Transforming XML schema into an ontology schema and XML content into ontology in-\nstances. In this case the tool employs a formal speciﬁcation of the conversions between\nentities of the resource and the ontology.\n– Transforming XML content into an ontology schema. Here the tool employs an ad-hoc wrap-\nper for transforming XML elements into ontology classes, and XML attributes into datatype prop-\nerties.\n41http://www.topbraidcomposer.com/\n42http://www4.wiwiss.fu-berlin.de/bizer/d2rq/\n2006–2008 c⃝Copyright lies with the respective authors and their institutions.\n",
  "speaker": "SYSTEM",
  "uuid": "67c81eb6-6557-4ceb-a80a-50c62fd35aba"
}