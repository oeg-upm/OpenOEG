{
  "message": "SYSTEM: D5.3.1-v1.0.pdf: Página 31\nD5.3.1 NeOn Development Process and Ontology Life Cycle \nPage 31 of 111 \n2006–2007 © Copyright lies with the respective authors and their institutions. \n \n \nFigure 6. Extreme Programming Methodology \nXP methodology is particularly targeted to small to medium sized teams building software with \nvague and/or rapidly changing requirements. XP is an agile and very light methodology, it \nemphasizes customer satisfaction but does not stress the production of detailed design \ndocumentation. For this reason it is not particularly adequate for use by organizations dealing with \nlife-critical or high-reliability systems. \n2.3.9. Reuse components life cycle model \nReuse components life cycle model [19, 38] is the discipline that attempts to reduce development \ncosts by incorporating previously proven designs and code in new software products. The basic \npremise behind this model is that systems should be built using existing components, as opposed \nto custom-building new components. The net effect of reusing components would be shorter \ndevelopment schedules and more reliable software since the developer is using components that \nhave been previously “shaken down”. \nThe reuse-oriented approach relies on a large base of reusable software components and some \nintegrating framework for these components. While the initial requirements specification stage and \nthe validation stage are comparable with other processes in other life cycle models, the \nintermediate stages in a reuse-oriented approach are different. Such intermediate stages includes: \ncomponent analysis, requirements modification, system design with reuse, and development and \nintegration. \nThe advantages of reusing software components are obvious [52]. If it is possible to find and use a \nsoftware component that fulfils the requirements at hand, it will in general cheaper and include \nmore functionality than an in-house component would. Furthermore, its quality is known and it is \nimmediately available. With this approach the amount of software to be developed is reduced and \nso cost and risks are also reduced. It usually also leads to faster delivery of the software. \nHowever, requirements compromises are inevitable and this may lead to a system that does not \nmeet the real needs of users. Furthermore, some control over the system evolution is lost as new \nversions of the reusable components are not under the control of the organisation using them [52]. \nClearly, what is needed are techniques to create reusable components, techniques and tools to \nstore and retrieve reusable components, and component specification techniques to help catalog \nand locate relevant components. \n",
  "speaker": "SYSTEM",
  "uuid": "d1beb466-e39f-4503-8ad4-632d371aaa97"
}