{
  "message": "SYSTEM: NeOn-Methodology-OntologySpecificationGuidelines.pdf: PÃ¡gina 7\nNeOn Methodology for Building Ontology Networks: Ontology Specification \nPage 7 of 18 \nIf people are geographically distributed, wiki tools, such as Cicero1 [5], can be used for identifying \nthe requirements, in the form of CQs and associated responses.  \nTask 5. Group requirements.  \nThe goal of this task is to group the list of CQs into several categories. Users, domain experts and \nthe ontology development team carry out this task taking as input the list of CQs written in natural \nlanguage (obtained in task 4) for obtaining different groups of CQs, using techniques as Card \nSorting, when the grouping is done manually, and Clustering NL sentences or Information \nExtraction when the grouping is done automatically; and using tools as MindMap Tools or Cicero \nTool (for distributed teams).   \nThe task output is a set of groups including different CQs. \nTo group the requirements is useful for guiding the ontology development based on different \nontology modules or based on prototypes involving different features of the ontology.  \nCompetency questions are grouped in such a way that each group includes those questions that \nare relevant to a specific feature of the ontology.  \nFor grouping the requirements we proposed a hybrid approach that combines: \n\u0001 The analysis of the frequency of terms and the grouping of CQs based on those terms \nthat have a higher frequency.  \n\u0001 The use of pre-established categories, such as time and date, units of measure, \ncurrencies, location, languages, etc. \nTask 6. Validate the set of requirements.  \nThe goal of this task is to identify possible conflicts between CQs, missing CQs, and contradictions \nin CQs. Users and domain experts carry out this task taking as input the set of grouped CQs for \ndeciding if such CQs are valid or not. \nThe task output is a confirmation about the validity of the set of CQs. \nFor validating the identified CQs, the following criteria are proposed: \n\u0001 Correctness. We can say that a set of requirements is correct if each requirement refers to \nsome features of the ontology to be developed. That is, any requirement is necessary.  \n\u0001 Completeness. A requirement specification is considered as complete if no requirement is \nomitted. Practically and adapting this consideration to the ontology engineering field, we \ncan say that if users and domain experts review the requirements and confirm that they do \nnot know more necessary requirements, then the set of requirements can be considered \ncomplete.   \n\u0001 Consistent. The set of requirements can be considered internally consistent if no conflicts \nexit between requirements. Conflicts can be between terms (different terminology is used in \nthe requirements to refer to the same need) and between characteristics (two or more \nrequirements refer to contradictory features of the ontology to be developed).  \n\u0001 Verifiable. We can say that the set of requirements is verifiable if each requirement is \nverifiable. That is, a finite process with a reasonable cost exists to test that the final \nontology satisfies each requirement. A necessary condition to have a verifiable requirement \nis that such a requirement should be unambiguous.  \n\u0001 Understandable. Each requirement must be understandable by users and domain experts.  \n\u0001 No Ambiguity. We can say that an ontology requirement is unambiguous if it has only one \ninterpretation. \n                                                \n1 http://cicero.uni-koblenz.de/wiki \n",
  "speaker": "SYSTEM",
  "uuid": "085a3e4b-cc6a-4337-a7d4-b562ca8878fe"
}