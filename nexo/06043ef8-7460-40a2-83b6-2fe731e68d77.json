{
  "message": "SYSTEM: StreamingDataAccess_ISWC2010.pdf: Página 4\n2.2\nQuerying Relational Data Streams\nA relational data stream is an append only, potentially inﬁnite, sequence of\ntimestamped tuples [14], examples of which include stock market tickers, heart\nrate monitors, and sensor networks deployed to monitor the environment. Data\nstreams can be classiﬁed into two categories:\nEvent-streams. A tuple is generated each time an event occurs, e.g. the sale\nof shares, and can have variable, potentially very high, data rates.\nAcquisitional-streams. A tuple is measured at a predeﬁned regular interval,\ne.g. the readings made by a sensor network.\nUsers are typically interested in being informed continuously about the most re-\ncent stream values, with older tuples being less relevant. Classical database query\nprocessing is not adequate since data must ﬁrst be stored and then queried with\none-oﬀevaluation. Hence, query languages [15,16] and data stream management\nsystems (DSMS) [4,5,6,7] have been developed to process continuous long-lived\nqueries over data streams as tuples arrive.\nOne existing approach is sneeql, which has a well deﬁned, uniﬁed seman-\ntics for declarative expressions of data needs over event-streams, acquisitional-\nstreams, and stored data [15]. sneeql can be viewed as extending sql for pro-\ncessing data streams. The additional constructs are explained below.\nWindow. A window over a data stream transforms the inﬁnite sequence of tu-\nples into a bounded bag of tuples over which traditional relational operators\ncan be applied. A window is speciﬁed as ‘FROM start TO end [SLIDE int unit]’,\nwhere start and end are of the form ‘NOW −literal’ and deﬁne the range\nof the window with respect to the evaluation time. The optional SLIDE pa-\nrameter speciﬁes how often windows are evaluated.\nWindow-to-Stream. Window-to-stream operators are used to convert a stream\nof windows into a stream of tuples. sneeql supports three such operators:\nRSTREAM for all tuples appearing in the window, ISTREAM for tuples that\nhave been added since the last window evaluation, and DSTREAM for tuples\nthat have been deleted since the last window evaluation.\nQueries expressed in the sneeql language are optimised for evaluation within\na sensor network over acquisitional-streams by the snee compiler[6]. snee has\nrecently been extended to enable query evaluation over event-streams out-with\nthe sensor network.\n3\nOntology-based Streaming Data Access\nOur approach to enable ontology-based access to streaming data is depicted in\nFig 1. The service receives queries speciﬁed in terms of the classes and prop-\nerties5 of the ontology using sparqlStream, an extension of sparql that sup-\nports operators over rdf streams (see Section 4.1). In order to transform the\n5 We use the owl nomenclature of classes, and object and datatype properties for\nnaming ontology elements.\n4\n",
  "speaker": "SYSTEM",
  "uuid": "06043ef8-7460-40a2-83b6-2fe731e68d77"
}