{
  "message": "SYSTEM: NeOn_2007_D5.3.1.pdf: Página 42\nPage 42 of 111 \nNeOn Integrated Project EU-IST-027595 \nwith the Software Engineering field. The long term goal of the Ontology Engineering field will be to \nreach a similar degree of maturity to the degree of Software Engineering field today.  \nUnlike what happens in the Software Engineering field, in the Ontology Engineering field:   \n1. It does not exist an activity glossary that identifies and defines the activities that \npotentially could be carried out when single ontologies and ontology networks are \ndeveloped. Neither of the most well known methodologies (METHONTOLOGY, On-To-\nKnowledge and DILIGENT) includes a definition for the activities they propose. It is also \nremarkable that during the last years, new activities were identified when building ontologies, \nthough they have no concrete and precise definition for new and old activities. This situation \nresults from a lack of standardization on the ontology engineering field terminology, in contrast \nwith the IEEE Standard Glossary of Software Engineering Terminology [1] in the Software \nEngineering field. \n2. Little research has been carried out in development process and life cycle of single \nontologies and ontology networks. METHONTOLOGY proposes explicitly the ontology \ndevelopment process that identifies a set of activities performed during ontology development, \nbut such set includes also the maintenance and the use of the ontology, which is not compliant \nwith software development process that only refers to development issues [1] and not to \nmaintenance and use ones. Furthermore, On-To-Knowledge and DILIGENT does not include \nan explicit definition.  \n3. Life cycle models defined in SE have not been seriously analyzed and no new life cycle \nmodels has been proposed yet to treat the special features of network of ontologies. \nMETHONTOLOGY proposes a unique type of life cycle model based on evolving prototypes for \nbuilding single ontologies. On-To-Knowledge proposes an incremental and cyclic ontology life \ncycle model based on evolving prototypes, and DILIGENT proposes an ontology life cycle \nmodel based on evolving prototypes. The ontology engineering field lacks of a set of ontology \nlife cycle models, in contrast with the software life cycle models. \n4. There are no guidelines that help software developers and ontology practitioners to \nselect a specific life cycle model to create a particular ontology life cycle. \n5. Existing methodologies do not cover more complex scenarios in with reuse and \nreengineering of ontological and non-ontological resources are needed. \na. METHONTOLOGY and On-To-Knowledge are up to now the most complete methodologies \nfor building ontologies from scratch. They mainly include guidelines for single ontology \nconstruction from the ontology specification to the implementation. However, neither \nmethodologies consider distributed ontology engineering among heterogeneous and \ngeographically distributed groups of domain experts and ontology practitioners. DILIGENT \ndoes it, but only provides a rich argumentation framework in order to quickly proceed with \nbuilding a single ontology and tracking all relevant discussions about the conceptualization \nactivity [21].  \nb. METHONTOLOGY and DILIGENT do not consider the reuse of existing information and \nknowledge resources for speeding up the ontology building process. In On-To-Knowledge, \nontology learning methods from textual resources are used for reducing the efforts made to \ndevelop the ontology.  \nc. Only METHONTOLOGY provides a definition and initial guidelines for reengineering \nontologies [25, 33]. \nTaking into account the previous limitations and the NeOn project vision, the Ontology Engineering \nfield needs to systematize, extend and improve the methodological work to reach a similar level of \nmaturity than in the Software Engineering field by means of:  \n¾ Defining adequately the activities involved in the development process of networks of \nontologies. \n \n",
  "speaker": "SYSTEM",
  "uuid": "23f32d19-44b4-4863-826f-484e17aefffa"
}