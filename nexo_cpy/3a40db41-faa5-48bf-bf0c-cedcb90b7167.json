{
  "message": "SYSTEM: D5.3.2.pdf: PÃ¡gina 40\nPage 40 of 48 \nNeOn Integrated Project EU-IST-027595 \n \nTask 4. Set the order of processes and activities.  \nAfter obtaining the mapping between the selected processes and activities and the selected \nONLCM, software developers and ontology practitioners should place in order the selected \nprocesses and activities, obtaining in this way the ontology network life cycle. \nThe order in which processes and activities will be performed are determined by three major \nfactors: \na) The selected ONLCM will dictate an initial ordering of processes and activities.  \nb) Processes and activities may be mapped for parallel execution rather than for serial execution. \nc) The entry and exit criteria of associated processes and activities might impact on the ordering. \nThe availability of output information from one process or activity could affect the start of \nanother process or activity. The second process or activity might require, as inputs, one or \nmore of the outputs of the first one. The initial ordering may always be amended, changed and \nupdated.  \nTask 5. Establish resource restrictions and assignments.  \nAfter obtaining the ontology network life cycle, software developers and ontology practitioners \nshould include information about temporal scheduling and human resource assignments. The \noutput of such task can be represented as a Gantt diagram similar to the one shown in Figure 17. \nAs general motivation here, we decided to reuse Gantt charts, which are de facto standard in \nsoftware project management. The main idea was not to create new representations for schedules \nin ontology engineering, but to adapt the existing ones (such as Gantt diagrams) to ontology \ndevelopers.  \n \nFigure 17. Example of Gantt Diagram \n",
  "speaker": "SYSTEM",
  "uuid": "3a40db41-faa5-48bf-bf0c-cedcb90b7167"
}