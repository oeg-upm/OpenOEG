{
  "message": "SYSTEM: Neon_2008_d2.2.2.pdf: Página 45\nD2.2.2 Methods and Tools Supporting Re-engineering\nPage 45 of 124\nChapter 3\nNeOn Method for Re-engineering\nNon-ontological Resources\nIn this chapter we provide a general overview of the NeOn pattern based approach for re-engineering non-\nontological resources, i.e., classiﬁcation schemes, and thesauri. We outline the pattern-based method for\nre-engineering non-ontological resources and present a template for describing the patterns.\n3.1\nNeOn Method for Re-engineering Non-ontological Resources\nIn this section we present our method for non-ontological resource re-engineering. We have opted for a\npattern-based approach to carrying out the non-ontological re-engineering process. This method will be\napplied to classiﬁcation schemes (chapter 4), and thesauri (chapter 5). Then, we present the proposed\ntemplate used to describe the patterns for re-engineering them.\nIn summary, the NeOn method for re-engineering non-ontological resources into ontologies aims to:\n• perform a conversion, as fully as possible, of knowledge included in the resource into ontologies,\n• transform the resource into an ontology in one single step,\n• take advantage of the data model underlying the non-ontological resource to guide the re-engineering\nprocess,\n• employ re-engineering patterns to guide the transformation process; these re-engineering patterns\ndo not deal with the resource implementation since they are focused in the upper levels, i.e., non-\nontological resource types and non-ontological resource data models.\n• generate two kinds of ontologies: taxonomies and lightweight ontologies.\n– a taxonomy [SFBG+07] is the way of organizing an ontology as a hierarchical structure of classes\nonly related by subsumption relations.\n– a lightweight ontology [SFBG+07] adds the following features to the taxonomy structure: (a) a\nclass can be related to other classes through an ad-hoc relation; (b) object and datatype prop-\nerties can be deﬁned and used to relate classes; and (c) a speciﬁc domain and range can be\nassociated with deﬁned object and datatype properties.\n• offer the user the possibility to choose what kind of ontology (s)he wants to generate,\n• generate ontologies at a conceptualization level, independent of the ontology implementation lan-\nguage,\n• keep the provenance information of the resultant ontology.\n2006–2008 c⃝Copyright lies with the respective authors and their institutions.\n",
  "speaker": "SYSTEM",
  "uuid": "c8c3ae77-c2f6-4d1a-85be-763ee1c71664"
}