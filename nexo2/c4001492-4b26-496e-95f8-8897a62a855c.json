{
  "message": "SYSTEM: BUSQUEDA.pdf: Página 56\nBÚSQUEDA \n \n56 \nJ. Rubio / P.R. Muro / J. Bañares \n \nOctubre 2004 - Curso 2004-2005 \n  (format t \"~% Responda si desea ver el camino solucion: \") \n  (if (y-or-n-p) \n      (escribe-camino-solucion nodo) \n    (escribe-solucion-sin-camino nodo))) \n \n;; (defun escribe-camino-solucion (nodo) ...) --> \"indefinido\" \n; Procedimiento final que muestra en pantalla el camino solucion encontrado. \n; Depende de ciertas decisiones de disen~o y, en particular, de la estructura \n; de los nodos. \n \n;; (defun escribe-solucion-sin-camino (nodo) ...) --> \"indefinido\" \n; Depende de ciertas decisiones de disen~o, pero como codigo generico se \n; podria tomar: \n \n(defun escribe-solucion-sin-camino (nodo) \n  (format t \"~%~% El estado objetivo alcanzado ha sido:\") \n  (dibuja-estado (estado-de-nodo nodo)) \n  (values)) \n \n;; En ese procedimiento se usa: \n;; (defun dibuja-estado (estado) ...) --> \"indefinido\" \n; Se trata de un procedimiento auxiliar que muestra en pantalla una \n; representacion grafica de un estado. \n \n;; (defun informacion-proceso-busqueda (nodo) ...) --> \"indefinido\" \n; Procedimiento auxiliar para ayudar a comprender el modo de funcionamiento \n; de la busqueda. Puede ser complejo, pero una version simple generica \n; podria ser: \n \n(defun informacion-proceso-busqueda (nodo) \n  (dibuja-estado (estado-de-nodo nodo)) \n  (read-char)) ; Espera que se pulse una tecla tras escribir el ultimo estado \n               ; examinado. \n \n;;; EJEMPLOS \"ARTIFICIALES\". \n;; Los operadores estan \"camuflados\" (no se trata de verdaderos sistemas \n;; de produccion) \n \n;; Comenzamos decidiendo las componentes de los nodos y el modo \n;; (cabeceras) de acceder a ellas, asi como de construir nodos. \n;; (Recuerdese que 'estado-de-nodo' ya ha sido fijado mas arriba.) \n \n;; Vamos a almacenar en un nodo la informacion acerca de su nodo padre \n;; (el nodo inicial no tendra padre, pero completaremos ese campo con NIL) \n \n;; (defun padre-de-nodo (nodo) ...) --> nodo (o NIL) \n \n;; (defun crea-nodo (estado padre) ...) --> nodo \n; Construye un nodo a partir de un estado y de su nodo padre (o de NIL, \n; en el caso del nodo inicial) \n \n;; Una vez determinada la estructura abstracta de los nodos, elegimos \n;; una representacion para ellos. En este caso elegimos una representacion \n;; con registros. \n \n(defstruct nodo padre estado) \n \n;; Los tres operadores quedan en este caso: \n \n(defun estado-de-nodo (nodo) \n  (nodo-estado nodo)) \n \n(defun padre-de-nodo (nodo) \n  (nodo-padre nodo)) \n \n(defun crea-nodo (estado padre) \n  (make-nodo :padre padre :estado estado)) \n \n;; Supondremos que en todos los ejemplos el estado inicial es \n;; el simbolo i \n \n(defun crea-nodo-inicial () \n  (crea-nodo 'i NIL)) \n",
  "speaker": "SYSTEM",
  "uuid": "c4001492-4b26-496e-95f8-8897a62a855c"
}