{
  "message": "SYSTEM: RQRQR.pdf: Página 4\nimportant diﬀerences in the expressiveness of these mappings [8], for instance in\nhow the selection of the data from the DB is performed, in whether it is possible\nto select elements just from tables or whether ﬁlter conditions can be applied\nto rows and columns, etc. The transformation operations to generate URIs and\nderived data from raw data are also a signiﬁcant source of diﬀerences among\nsystems.\nThose diﬀerences will lead to the generation of RDF code with diﬀerent de-\ngrees of quality. For instance, it is specially relevant if there is some “information\ngain” in the conversion, in comparison to a pure syntactical conversion, which is\noften found in automatic tools [1]. However the information gain is still limited\nin systems with run-time query answering approach, since the reasoning capa-\nbilities that the use of an ontology may provide are often omitted due to the\neﬃciency penalty that reasoning implies in the query rewriting process.\nA compromise solution consists in performing some eﬃcient reasoning, in\npolynomial time, with limited expressiveness and reasoning capabilities, as ex-\nplained in the next section.\n2.2\nQuery rewriting on description logics\nQuery rewriting produces diﬀerent a number of rewritings of a query that pre-\nserve the desired results that are to be obtained from it. Query rewriting can\nbe seen as a search for solutions, in this case rewritings, which may be logical\n(among classes or properties) or physical (among sources of information) [3].\nIn an information integration scenario, where there may be several distributed\nsources with diﬀerent capabilities in the information that they provide, physical\nsearch will be crucial. Besides, the logical search is focused on selecting the con-\ncepts and properties that provide useful answers for the query that is posed to\nthe system.\nThe eﬃciency of the query rewriting process is inﬂuenced by two factors:\nﬁrsts, the number of axioms in the ontology and the speciﬁc way in which these\nare combined in it; second, the expressiveness of the ontology language that is\nused to describe the global schema. From these two factors, the most relevant\none in terms of determining the eﬃciency of the process is the latter. Several\nalternatives have been proposed in the search of this eﬃciency while covering\nthe highest expressiveness that is possible at an adequate level of complexity.\nWith this motivation DL-Lite was created as a family of description logics\nthat keeps eﬃcient reasoning. Speciﬁcally, the complexity of reasoning in DL-Lite\nis polynomial in time and size of the TBox and LogSpace with respect to the\nsize of the ABox [7]. The DL-Lite family includes DL-LiteF and DL-LiteR, the\nformer includes the possibility to express functional restrictions on roles while\nthe latter includes ISA and disjointness assertions between roles.\nAs a desired consequence of this limited expressiveness for a more eﬃcient\nhandling, these logics ease the representation of ABox assertions as relations\nmanaged in a secondary storage in a database, which is consequent with the\nRDB2RDF approach. This allows to get the most from both approaches, the\n",
  "speaker": "SYSTEM",
  "uuid": "dc84e330-98a5-48cd-88d5-74ca8d55fa46"
}