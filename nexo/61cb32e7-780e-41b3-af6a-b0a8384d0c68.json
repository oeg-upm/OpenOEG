{
  "message": "SYSTEM: Neon_2008_d2.2.2.pdf: Página 107\nD2.2.2 Methods and Tools Supporting Re-engineering\nPage 107 of 124\nIn the following rules, <sub> and <super> are like variable names for the subclasses and superclasses\nto be generated; CN means class of, group of, etc.; CATV is a classiﬁcation verb2; PUNCT is punctuation;\nNPlist is a conjoined list of NPs (“X, Y and Z”).\n1. Subclass rules\n• NP<sub> be NP<super>\n• NPlist<sub> be CN NP<super>\n• NPlist<sub> (group (in|into|as) | (fall into) | (belong to)) [CN]\nNP<super>\n• NP<super> CATV CV? CN? PUNCT? NPlist<sub>\nExample: Frogs and toads are kinds of amphibian.\n2. Equivalence rules\n• NP<class> be (the same as|equivalent to|equal to|like) NP<class>\n• NP<class> (call | denominate | (designate by|as) | name)\nNP<class> (where the verb is passive)\n• NP<class> have (the same|equal) (characteristic | feature |\nattribute | quality | property) as NP<class>\nExample: Poison dart frogs are also called poison arrow frogs.\n3. Properties\n• NP<class> have NP<property>\n• NP<instance> have NP <property>\nExample: Birds have feathers.\nWhile these patterns are quite productive (for example X is a Y), most of them are potentially ambiguous\nand susceptible to overgeneration. For example, in the following sentence:\nMistakenly, some artists and writers have penguins based at the North Pole.\nthe patterns produced the inference that writers have penguins, recognising penguin as a property of writer.\nClearly it is ludicrous that every expression of the form X has Y should result in the relation Y is a property\nof X. The difﬁculty is deciding where to draw the line between acceptable patterns and those that just over-\ngenerate. To start with, we took the simple patterns which generated new basic instances, subclasses and\nproperties, described below.\n7.2.3\nContextual patterns\nWe also deﬁned a set of rules designed to make use of contextual information in the text about known entities\nalready existing in the ontology (unlike the lexico-syntactic patterns which assume no previous ontological\ninformation is present). These rules are used in conjunction with the OntoRootGazetteer plugin in GATE,\nwhich enables any morphological variant of any class, instance or label in the ontology to be matched with\n(any morphological variant of) any word or words in the text. Which elements from the ontology are to be\nconsidered (e.g., whether to include properties, and if so which ones) is determined in advance by the user\nwhen setting up the application. Initially we use the following rules to ﬁnd new classes and instances:\n2E.g., classify in/into, comprise, contain, compose (of), group in/into, divide in/into, fall in/into, belong (to).\n2006–2008 c⃝Copyright lies with the respective authors and their institutions.\n",
  "speaker": "SYSTEM",
  "uuid": "61cb32e7-780e-41b3-af6a-b0a8384d0c68"
}