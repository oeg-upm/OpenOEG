{
  "message": "SYSTEM: D5.3.1-v1.0.pdf: Página 37\nD5.3.1 NeOn Development Process and Ontology Life Cycle \nPage 37 of 111 \n2006–2007 © Copyright lies with the respective authors and their institutions. \n \n The formalization activity transforms the conceptual model into a formal or semi-\ncomputable model.  \n The implementation activity builds computable models in an ontology language. \nThe post-development activities include the maintenance activity, that updates and corrects \nthe ontology if needed, and the (re)use activity, that refers to the (re)use of the ontology by \nother ontologies or applications.  \n3. Ontology support activities include activities that are necessary to assure the successful \ncompletion of an ontology project. This group includes a series of activities performed at the \nsame time as the development-oriented activities, without which the ontology could not be built. \nSuch activities are:  \n The knowledge acquisition activity whose goal is to acquire knowledge from experts of a \ngiven domain or through some kind of (semi)automatic process, which is called ontology \nlearning. \n The evaluation activity makes a technical judgment of the ontologies, of their associated \nsoftware environments, and of the documentation. This judgment is made with respect to a \nframe of reference during each stage and between stages of the ontology’s life cycle.  \n The integration activity is required when building a new ontology by reusing other \nontologies already available.  \n The merging activity consists in obtaining a new ontology starting from several ontologies \non the same domain. The resulting ontology is able to unify concepts, terminology, \ndefinitions, constraints, etc., from all the source ontologies. The merge of two or more \nontologies can be carried out either in run-time or design time.  \n The alignment activity establishes different kinds of mappings (or links) between the \nontologies involved. Hence this option preserves the original ontologies and does not \nmerge them.  \n The documentation activity details, clearly and exhaustively, each and every one of the \ncompleted stages and products generated.  \n The configuration management activity records all the versions of the documentation and of \nthe ontology code to control the changes. \nFrom this analysis we can conclude that the ontology development process identifies which \nactivities are to be performed. However, it does not identify the order in which the activities should \nbe performed [26, 3].  \n2.6.2. Ontology development process in On-To-Knowledge \nThe On-To-Knowledge methodology [53] for building ontologies proposes to build the ontology \ntaking into account how the ontology will be used in further applications. Consequently, ontologies \ndeveloped with this methodology are highly dependent of the application. The processes proposed \nby this methodology can be summarized as follows:  \n1. Feasibility study. On-To-Knowledge adopts the kind of feasibility study described in the \nCommonKADS methodology [51]. According to On-To-Knowledge, the feasibility study is applied \nto the complete application and, therefore, should be carried out before developing the ontologies. \nIn fact, the feasibility study serves as a basis for the kickoff process. \n2. Kickoff. The result of this process is the ontology requirements specification document that \ndescribes the following: the domain and goal of the ontology; the design guidelines (for instance, \nnaming conventions); available knowledge sources (books, magazines, interviews, etc.); potential \nusers and use cases as well as applications supported by the ontology. \n",
  "speaker": "SYSTEM",
  "uuid": "9c6e417e-bed8-4b62-8a79-9ae76ff6312f"
}