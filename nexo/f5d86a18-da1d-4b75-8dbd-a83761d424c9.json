{
  "message": "SYSTEM: ORequirementsSpecification.pdf: Página 10\n• \nInspired by [19], a set of requirements can be considered complete, if users \nand domain experts review the requirements and confirm that they are not \naware of additional requirements.  \n• \nA set of requirements can be considered internally consistent if no conflicts \nexist between them.  \n• \nA set of requirements is verifiable, if there is a finite process with a reasonable \ncost that tests whether the final ontology satisfies each requirement. \n• \nEach requirement must be understandable to end-users and domain experts.  \n• \nAn ontology requirement is unambiguous if it has only one meaning; that is, if \nit does not admit any doubt or misunderstanding. \n• \nA set of requirements is concise, if each and every requirement is relevant, and \nno duplicated or irrelevant requirements exist.  \n• \nA set of requirements is realist, if each and every requirement meaning makes \nsense in the domain. \n• \nA set of requirements is modifiable if its structure and style allow changing \nissues in an easy, complete and consistent way.  \nTask 7. Prioritize requirements. The goal here is to give different levels of priority \nto the non-functional and functional ontology requirements identified. In the case of \nfunctional ontology requirements, priorities should be given to the different groups of \nCQs, and, within each group, to the different CQs. Users, domain experts and the \nontology development team should carry out this task taking as input the requirements \nidentified in task 4 and the groups of CQs written in natural language obtained in task \n5. The task output is a set of priorities attached to each requirement and to each group \nof CQs and to each CQ in a group. The output is included in the slots 6a and 6b of the \ntemplate. \nPriorities in CQs will be used by the ontology development team for planning and \nscheduling the ontology development and for deciding which parts of the ontology are \ngoing to be developed first. This task is optional, but recommended. In fact, if no \npriorities are given to the groups of CQs, ontology developers will start modeling the \nontology without any guidance regarding the requirements that should be \nimplemented first; in this case the waterfall ontology life cycle model should be \nselected during the scheduling of the ontology project. On the contrary, if different \npriorities have been assigned to ontology requirements, the iterative-incremental \nontology life cycle model [15] should be selected in the scheduling activity. \n \n \n \n \n \n \n \n \n",
  "speaker": "SYSTEM",
  "uuid": "f5d86a18-da1d-4b75-8dbd-a83761d424c9"
}