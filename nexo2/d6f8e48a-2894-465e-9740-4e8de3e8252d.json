{
  "message": "SYSTEM: The_Return_of_the_Entity-Relationship_Model_-_Ontological_Query_Answering.pdf: Página 6\n6\nAndrea Cal`ı, Georg Gottlob and Andreas Pieris\ndescription logic syntax, which could turn out to be slightly awkward to database\npractitioners. Due to the popularity of the ER model in the industry, and to its intu-\nitive graphical representation, the ER+ formalism is likely to be adopted as ontology\nlanguage, especially when employed in visual design tools. More speciﬁcally, the\nlanguages of the DL-Lite family [5, 6], as already explained, enjoy the desirable\nproperty of tractable conjunctive query answering, in particular in AC0 in data com-\nplexity, again ensured by their ﬁrst-order rewritability. Both our formalisms non-\nconﬂicting ER+ and non-conﬂicting ER+\nB, with the addition of negative constraints,\nwhich do not increase the complexity of query answering, properly generalize the\nlanguages DL-LiteF and DL-LiteR; at the same time, the data complexity of query\nanswering is the same as that of the DL-Lite languages.\nThe notion of chase [7, 8, 11] of a database against a set of inclusion depen-\ndencies is crucial in ontological query answering; such notion has been extended\nto expressive rules called tuple-generating dependencies (TGDs) [23, 24]. In partic-\nular, [23] considers the data exchange problem, where a target database is materi-\nalized starting from a source database and a mapping expressed as a set of TGDs;\nin this setting the chase procedure needs to terminate [24, 25]. However, this is\nnot appropriate for ontological databases. The ﬁrst work to tackle the problem of a\nnon-terminating chase was [8].\nRecent works [14, 26, 27, 28] deal with so-called tuple-generating dependencies,\nrules that constitute the Datalog± family of languages, some of which are ﬁrst-order\nrewritable. Datalog± languages (enriched with non-conﬂicting key dependencies as\nin [2] or [26]) are not capable of capturing non-conﬂicting ER+ schemata. For an\noverview of some Datalog± languages we refer the reader to [29].\nFinally, the work [30] deals with general (non-separable) ER+ schemata: a\ntechnique for query rewriting into recursive Datalog is presented, and complexity\nbounds are signiﬁcantly higher than those shown here.\n1.2 Preliminaries\nIn this section we recall some basics on databases, queries, dependencies, and the\nchase procedure.\n1.2.1 General\nWe deﬁne the following pairwise disjoint (inﬁnite) sets of symbols: (i) a set Γ of\nconstants (constitute the “normal” domain of a database), (ii) a set ΓN of labeled\nnulls (used as placeholders for unknown values, and thus can be also seen as vari-\nables), and (iii) a set ΓV of variables (used in queries and dependencies). Differ-\nent constants represent different objects (unique name assumption), while different\nnulls may represent the same object. A lexicographic order is deﬁned on Γ ∪ΓN,\n",
  "speaker": "SYSTEM",
  "uuid": "d6f8e48a-2894-465e-9740-4e8de3e8252d"
}