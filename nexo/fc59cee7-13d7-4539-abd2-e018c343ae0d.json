{
  "message": "SYSTEM: D5.3.1-v1.0.pdf: Página 27\nD5.3.1 NeOn Development Process and Ontology Life Cycle \nPage 27 of 111 \n2006–2007 © Copyright lies with the respective authors and their institutions. \n \ncase of throwaway prototypes, software developers are likely to implement only those aspects of \nthe system that are poorly understood or doubtful. \nThe objective of throwaway prototyping is to validate or derive the software requirements. The \ndevelopment should start with requirements that are not well understood in order to find out more \nabout them. Requirements that are straightforward may never need to be prototyped [52]. \nThrowaway prototypes have a very short lifetime. It must be possible to change them rapidly during \ndevelopment, but long term maintainability is not required. Poor performance and reliability may be \nacceptable in a throwaway prototype so long as it helps everyone understand the requirements \n[52]. \nThis kind of model is used when the user does not know exactly what he wants, or when what the \nuser wants is not understood by the development team, or when the viability of the solution is not \nclear. \n2.3.7. Spiral life cycle model \nThe spiral model [46] was designed to include the best features from the waterfall and prototyping \nmodels, and it introduces a new component: the concept of risk, which appears because of the \nuncertainties in the requirements, and its assessment. This life cycle model [39] is based on the \nidea of showing the historical cycles of the Earth’s geology.  \nThe spiral life cycle model [46, 16, 15], shown in Figure 5, proposes to combine the development \nactivities with the risk management activities to minimize and control the risk. This model divides \nthe software engineering space into four quadrants: management planning, formal risk analysis, \nengineering, and customer assessment. The development of the system is divided into n-cycles. \nEach cycle consists of waterfall phases. The result of each cycle is a prototype, and the \ndevelopment cycle continues until the final version of the product is reached. With each iteration \naround the spiral (beginning at the center and working outward), more complete versions of the \nsystem are progressively built. Furthermore, user feedback is considered at the output of each \ncycle, and new additional features are included into the next cycle. \n",
  "speaker": "SYSTEM",
  "uuid": "fc59cee7-13d7-4539-abd2-e018c343ae0d"
}