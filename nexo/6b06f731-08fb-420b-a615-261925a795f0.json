{
  "message": "SYSTEM: Wiki: Catalogue of Pitfalls in Ontology Engineering\nP1. Creating polysemous elements:\nan ontology element whose name has different meanings is included in the ontology to represent more than one conceptual idea. For example, the class “Theatre” is used to represent both the artistic discipline and the place in which a play is performed.\nP2. Creating synonyms as classes:\nseveral classes whose identifiers are synonyms are created and defined as equivalent. As an example we could define “Car”, “Motorcar” and “Automobile” as equivalent classes. Another example is to define the classes “Waterfall” and “Cascade” as equivalents. This pitfall is related to the guidelines presented in [2] which explain that synonyms for the same concept do not represent different classes.\nP3. Creating the relationship “is” instead of using\nrdfs:subClassOf\n,\nrdf:type\nor\nowl:sameAs\n:\nthe “is” relationship is created in the ontology instead of using OWL primitives for representing the subclass relationship (“subclassOf”), the membership to a class (“instanceOf”), or the equality between instances (“sameAs”). An example of this type of pitfall is to define the class “Actor” in the following way ‘Actor ≡ Person ⨅ ∃interprets.Actuation ⨅ ∃is.Man’. This pitfall is related to the guidelines for understanding the “is-a” relation provided in [2].\nP4. Creating unconnected ontology elements:\nontology elements (classes, relationships or attributes) are created with no relation to the rest of the ontology. An example of this type of pitfall is to create the relationship “memberOfTeam” and to miss the class representing teams; thus, the relationship created is isolated in the ontology.\nP5. Defining wrong inverse relationships:\ntwo relationships are defined as inverse relations when actually they are not. For example, something is sold or something is bought; in this case, the relationships “isSoldIn” and “isBoughtIn” are not inverse.\nP6. Including cycles in the hierarchy [1, 2]:\na cycle between two classes in the hierarchy is included in the ontology, although it is not intended to have such classes as equivalent. That is, some class A has a subclass B and at the same time B is a superclass of A. An example of this type of pitfall is represented by the class “Professor” as subclass of “Person”, and the class “Person” as subclass of “Professor”.\nP7. Merging different concepts in the same class:\na class is created whose identifier is referring to two or more different concepts. An example of this type of pitfall is to create the class “StyleAndPeriod”, or “ProductOrService”.\nP8. Missing annotations:\nontology terms lack annotations properties. This kind of properties improves the ontology understanding and usability from a user point of view.\nP9. Missing basic information:\nneeded information is not included in the ontology. Sometimes this pitfall is related with the requirements in the ORSD that are not covered by the ontology. Other times it is related with knowledge that could be added to the ontology in order to make it more complete. An example of this type of pitfall is to create the relationship “startsIn” to represent that the routes have a starting point in a particular location; and to miss the relationship “endsIn” to show that a route has an end point. Another example is to create the relationship “follows” when modelling order relations; and do not create its inverse relationship “precedes”.\nP10. Missing disjointness [1, 2, 3]:\nthe ontology lacks disjoint axioms between classes or between properties that should be defined as disjoint. For example, we can create the classes “Odd” and “Even” (or the classes “Prime” and “Composite”) without being disjoint; such representation is not correct based on the definition of these types of numbers.\nP11. Missing domain or range in properties:\nrelationships and/or attributes without domain or range (or none of them) are included in the ontology. There are situations in which the relation is very general and the range should be the most general concept “Thing”. However, in other cases, the relations are more specific and it could be a good practice to specify its domain and/or range. An example of this type of pitfall is to create the relationship “hasWritten” in an ontology about art in which the relationship domain should be “Writer” and the relationship range should be “LiteraryWork”. This pitfall is related to the common error when defining ranges and domains described in [3].\nP12. Missing equivalent properties:\nwhen an ontology is imported into another, classes that are duplicated in both ontologies are normally defined as equivalent classes. However, the ontology developer misses the definition of equivalent properties in those cases of duplicated relationships and attributes. For example, the classes “CITY” and “City” in two different ontologies are defined as equivalent classes; however, relationships “hasMember” and “has-Member” in two different ontologies are not defined as equivalent relations.\nP13. Missing inverse relationships:\nthere are two relationships in the ontology that should be defined as inverse relations. For example, the case in which the ontology developer omits the inverse definition between the relations “hasLanguageCode” and “isCodeOf”, or between “hasReferee” and “isRefereeOf”.\nP14. Misusing\nowl:allValuesFrom\n[3]:\nthis pitfall can appear in two different ways. In the first, the anomaly is to use the universal restriction (“allValuesFrom”) as the default qualifier instead of using the existential restriction (“someValuesFrom”). This means that the developer thinks that “allValuesFrom” implies “someValuesFrom”. In the second, the mistake is to include “allValuesFrom” to close off the possibility of further additions for a given property. An example of this type of pitfall is to define the class “Book” in the following way ‘Book ≡ ∃producedBy.Writer ⨅ ∃uses.Paper’ and closing the possibility of adding “Ink” as an element used in the writing.\nP15. Misusing “not some” and “some not” [3]:\nto mistake the representation of “some not” for “not some”, or the other way round. An example of this type of pitfall is to define a vegetarian pizza as any pizza which both has some topping which is not meat and also has some topping which is not fish. This example is explained in more detail in [3].\nP16. Misusing primitive and defined classes [3]:\nto fail to make the definition ‘complete’ rather than ‘partial’ (or ‘necessary and sufficient’ rather than just ‘necessary). It is critical to understand that, in general, nothing will be inferred to be subsumed under a primitive class by the classifier. This pitfall implies that the developer does not understand the open world assumption. A more detailed explanation and examples can be found in [3].\nP17. Specializing too much a hierarchy:\nthe hierarchy in the ontology is specialized in such a way that the final leaves cannot have instances, because they are actually instances and should have been created in this way instead of being created as classes. Authors in [2] provide guidelines for distinguishing between a class and an instance when modelling hierarchies. An example of this type of pitfall is to create the class “RatingOfRestaurants” and the classes “1fork”, “2forks”, and so on, as subclasses instead of as instances. Another example is to create the classes “Madrid”, “Barcelona”, “Sevilla”, and so on as subclasses of “Place”. This pitfall could be also named “Individuals are not Classes”.\nP18. Specifying too much the domain or the range [2, 3]:\nnot to find a domain or a range that is general enough. An example of this type of pitfall is to restrict the domain of the relationship “isOfficialLanguage” to the class “City”, instead of allowing also the class “Country” to have official language or a more general concept such as “GeopoliticalObject”.\nP19. Swapping intersection and union:\nthe ranges and/or domains of the properties (relationships and attributes) are defined by intersecting several classes in cases in which the ranges and/or domains should be the union of such classes. An example of this type of pitfall is to create the relationship “takesPlaceIn” with domain “OlympicGames” and with range the intersection of the classes “City” and “Nation”. Another example can be to create the attribute “Name” for the classes “City” and “Drink” and to define its domain as the intersection of both classes. This pitfall is related to the common error that appears when defining ranges and domains described in [3] and also related to the guidelines for defining these elements provided in [2].\nP20. Swapping Label and Comment:\nthe contents of the Label and Comment annotation properties are swapped. An example of this type of pitfall is to include in the Label annotation of the class “Crossroads” the following sentence ’the place of intersection of two or more roads’; and to include in the Comment annotation the word ‘Crossroads’.\nP21. Using a miscellaneous class:\nto create in a hierarchy a class that contains the instances that do not belong to the sibling classes instead of classifying such instances as instances of the class in the upper level of the hierarchy. This class is normally named “Other” or “Miscellaneous”. An example of this type of pitfall is to create the class “HydrographicalResource”, and the subclasses “Stream”, “Waterfall”, etc., and also the subclass “OtherRiverElement”.\nP22. Using different naming criteria in the ontology:\nno naming convention is used in the identifiers of the ontology elements. Some notions about naming conventions are provided in [2]. For example, we can name a class by starting with upper case, e.g. “Ingredient”, and its subclasses by starting with lower case, e.g. “animalorigin”, “drink”, etc.\nP23. Using incorrectly ontology elements:\nan ontology element (class, relationship or attribute) is used to model a part of the ontology that should be modelled with a different element. A particular case of this pitfall regarding to the misuse of classes and property values is addressed in [2]. An example of this type of pitfall is to create the relationship “isEcological” between an instance of “Car” and the instance “Yes” or “No”, instead of creating the attribute “isEcological” whose range is Boolean.\nP24. Using recursive definition:\nan ontology element is used in its own definition. For example, it is used to create the relationship “hasFork” and to establish as its range the following ’the set of restaurants that have at least one value for the relationship “hasFork”.\n[1] Gómez-Pérez, A.\nOntology Evaluation\n. Handbook on Ontologies. S. Staab and R. Studer Editors. Springer. International Handbooks on Information Systems. Pp: 251-274. 2004.\n[2] Noy, N.F., McGuinness. D. L.\nOntology development 101: A guide to creating your first ontology.\nTechnical Report SMI-2001-0880, Standford Medical Informatics. 2001.\n[3] Rector, A., Drummond, N., Horridge, M., Rogers, J., Knublauch, H., Stevens, R.,; Wang, H., Wroe, C.\nOwl pizzas: Practical experience of teaching owl-dl: Common errors and common patterns\n. In Proc. of EKAW 2004, pp: 63–81. Springer. 2004.\nFor further information about pitfalls:\nA Double Classification of Common Pitfalls in Ontologies\nCommon Pitfalls in Ontology Development\nSome extensions we are working on:\nExtension 1 to P5. Defining a relationship inverse to itself:\nExtension 2 to P5. Defining inverse relationships for a symmetric one:\nExtension 3 to P5. Defining wrong equivalent relationships:\nExtension 4 to P5. Defining symmetric relationships that do not have same domain and range:\nExtension 5 to P5. Defining transitive relationships that do not have same domain and range:",
  "speaker": "SYSTEM",
  "uuid": "6b06f731-08fb-420b-a615-261925a795f0"
}