{
  "message": "SYSTEM: D5.3.1-v1.0.pdf: Página 16\nPage 16 of 111 \nNeOn Integrated Project EU-IST-027595 \n \n2. State of the Art \nResearch on methodologies for the Ontology Engineering field is in its “adolescence” since this \nfield is only 10 years old. The 1990s and the first years of this new millennium have witnessed the \ngrowing interest of many practitioners in approaches that support the creation and management as \nwell as the population of single ontologies built from scratch. There are some methodological \napproaches (e.g., METHONTOLOGY [32], On-To-Knowledge [53], and DILIGENT [47]) that help \ndevelop ontologies. All these approaches have provoked a step forward by having transformed the \nart of constructing single ontologies into an engineering activity. However, such methodological \napproaches lack guidelines for building ontologies embedded in ontology networks in continuous \nevolution and they do not follow a user-oriented approach.  \nOne important difference between a technical field that is in its \"adolescence\" and another that has \nreached \"adulthood\" is that the mature field has widely accepted methodologies, whereas the \nyoung discipline usually has none or a few. It we look at the Software Engineering field, for \nexample, we can say it has reached “adulthood” because it has widely accepted methodologies for \ndeveloping software; in fact, although different development methodologies are used, the \nmethodologies share the same principles and viewpoints and provide similar activities and \ntechniques [23].  \nThe IEEE standard glossary of Software Engineering terminology [1] defines software as \n“computer programs, procedures, and possibly associated documentation and data pertaining to \nthe operation of a computer system”, Ontologies are part (sometimes only potentially) of software \nproducts. Therefore, ontologies should be developed according to the standards generally \nproposed for software, which should be adapted to the special characteristics of ontologies [23]. \nFor such reasons, we will use and adapt Software Engineering terminology and methodological \nprinciples (taken from different IEEE standards) as basis for the current methodological research in \nthe Ontology Engineering field. \nMethodologies involve the following issues: development process, life cycle models and life cycle, \nmethods, techniques and tools to be used during the ontology building. As mentioned in Chapter 1, \nthis deliverable deals only with the three first issues: development process, life cycle models and \nlife cycle. So in this chapter, some notions related to development process, life cycle model and life \ncycle taken from the Software Engineering field are included as background knowledge to better \nunderstand the complete deliverable. Furthermore, this chapter presents different works on \ndevelopment process and life cycle models carried out in the following fields: Software Engineering \n(Sections 2.2 and 2.3), Knowledge Engineering (Sections 2.4 and 2.5), and Ontology Engineering \n(Sections 2.6 and 2.7). Finally, conclusions about development process and life cycle models are \nincluded.  \n2.1. Basic Terminology from Software Engineering \nIn this section we include several terms defined in Software Engineering, which are crucial for this \ndeliverable. The terminology included have been extracted from the following IEEE documents: \n¾ IEEE Standard Glossary of Software Engineering Terminology (IEEE Std 610.12-1990) [1]. \n¾ IEEE Guide for Developing Software Life Cycle Processes (IEEE Std 1074.1-1995) [2]. \n¾ IEEE Standard for Developing Software Life Cycle Processes (IEEE Std 1074-1997) [3]. \n",
  "speaker": "SYSTEM",
  "uuid": "49b5d45c-7a7b-4a7e-bee4-9af0dba0ecac"
}