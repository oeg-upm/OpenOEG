{
  "message": "SYSTEM: StreamingDataAccess_ISWC2010.pdf: Página 14\nrich domain ontology. The expressiveness of the queries supported by these sys-\ntems is limited to conjunctive queries. However no existing approach takes into\naccount streaming data and continuous queries.\nSeveral stream processing and querying engines have been built in the last\ndecade and can be grouped in two main areas: event stream systems (e.g. Au-\nrora/Borealis [5], stream [4], TelegraphCQ [23]), and acquisitional stream sys-\ntems (e.g. TinyDB [7], snee [6], Cougar [24]). For the ﬁrst, the stream system\ndoes not have control over the data arrival rate, which is often potentially high\nand usually unknown and the query optimisation goal is to minimise latency.\nFor acquisitional streams, it is possible to control when data is obtained from\nthe source, typically a sensor network, and the query optimisation goal is to\nmaximise network lifetime. All these systems have their own continuous query\nlanguage, generally based on sql, although most of them share the same fea-\ntures. cql (Continuous Query Language) [16] is the best known of these lan-\nguages, but there is still no common standard language for stream queries. The\nsneeql [15] language for querying streaming data sources is inspired by cql,\nbut it provides greater expressiveness in queries, including both event and ac-\nquisitional streams, and stored extents. Our work does not aim to improve on\nrelational stream query processing, but to enable these systems to be accessible\nvia ontology-based querying.\nThere are two existing proposals for extending sparql with stream-based\noperators: streamingsparql [8] and c-sparql [9]. Both languages introduce ex-\ntensions for the support of rdf streams, and both deﬁne time-based and triple-\nbased window operators where the upper bound is ﬁxed to the current evaluation\ntime. The sparqlStream windowing operator enables windows to be deﬁned in\nthe past so as to support correlation with historic data. We have not included\ntriple-based windows in sparqlStream due to the problems with their semantics,\ndiscussed in Section 4.1. Window-to-stream operators are also missing in both\nexisting approaches, which provides ambiguous semantics for the language. In\nsparqlStream the result of a window operator is a bag to triples over which tra-\nditional operators can be applied. We have introduced three window-to-stream\noperators inspired by sneeql and cql. The aggregate semantics introduced in\nc-sparql follow an approach of extending the data, which diﬀers from standard\naggregation semantics of summarising the data. We have opted to support the\naggregation semantics being deﬁned for sparql 1.1 [25], which summarise the\ndata.\n8\nConclusions and Future Work\nWe have presented an approach for providing access to streaming data based\non ontologies. We have presented sparqlStream, a sparql extension for rdf\nstreams, and S2O, an extension to R2O for expressing mappings from streaming\nsources to an ontology. We have shown the semantics of the proposed extensions\nand the mechanism to generate data source queries from the original ontological\nqueries using the mappings. The case presented here generated sneeql queries\n14\n",
  "speaker": "SYSTEM",
  "uuid": "b712e690-fd39-4dda-8f84-5c0e21a61292"
}