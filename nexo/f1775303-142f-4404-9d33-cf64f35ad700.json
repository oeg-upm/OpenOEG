{
  "message": "SYSTEM: BUSQUEDA.pdf: Página 55\nBÚSQUEDA \n \n55 \nJ. Rubio / P.R. Muro / J. Bañares \n \nOctubre 2004 - Curso 2004-2005 \n;; de diseño adoptadas (por ejemplo, el modo de representacion de los \n;; nodos). \n \n;; (defun crea-nodo-inicial () ...) --> nodo \n; Construye el nodo inicial para comenzar la busqueda. Dependera de \n; cual es la estructura de los nodos y tambien del problema, mas concretamente \n; del estado inicial del problema. \n \n;; (defun expandir-nodo (nodo) ...) --> lista de nodos \n; Devuelve una lista con los nodos creados a partir del estado asociado al \n; nodo que es su argumento. Si ninguna regla esta sensibilizada para ese \n; estado, se devolvera la lista vacia. Esta funcion recoge el aplicador \n; de reglas, el ciclo reconocimiento-actuacion. Cubre el bucle interno \n; del algoritmo generico, el paso 6 y parte del paso 7. Depende del problema \n; y de la estructura de los nodos. \n \n;; (defun reorganizar-nodos-a-expandir (lista-nodos-nuevos lista-nodos) ...) \n;;       --> lista de nodos \n; Toma como argumentos dos listas de nodos (tal vez vacias) y las reorganiza \n; para devolver una lista de nodos. Esta funcion recoge la parte mas importante \n; del paso 7 del algoritmo y es la que determina el tipo de busqueda que \n; estamos realizando. Por ejemplo, en la busqueda en anchura en arbol la \n; funcion no depende de ninguna otra cosa y su codigo seria: \n \n(defun reorganizar-nodos-a-expandir (lista-nodos-nuevos lista-nodos) \n  (if (endp lista-nodos-nuevos) \n      lista-nodos ; si no hay nodos nuevos la lista ABIERTOS es la de antes \n    (append lista-nodos lista-nodos-nuevos)))  \n        ; en otro caso, los nuevos nodos se an~aden al final de la lista \n \n;; Observese que en la actualizacion de ABIERTOS, se llama a \n;; reorganizar-nodos-a-expandir con segundo argumento (rest ABIERTOS), \n;; con lo que se consigue \"eliminar\" el primer nodo en ABIERTOS, que \n;; ya habra sido examinado y expandido. Notese tambien que la organizacion \n;; del bucle hace que si la busqueda termina sin exito, el valor que tenga \n;; la variable el-nodo no sea realmente un nodo sino el simbolo NIL (el  \n;; \"primer elemento\" de la lista vacia). \n \n;; (defun estado-objetivo? (estado) ...) --> T o Nil \n; Este es el predicado que decide si un estado es un objetivo. Depende \n; exclusivamente del problema. \n \n;; (defun estado-de-nodo (nodo) ...) --> estado \n; Es la funcion que permite acceder al estado asociado a un nodo. Depende \n; exclusivamente de la eleccion de la estructura para los nodos. \n \n;; El uso combinado que se hace de estas dos ultimas funciones y el \n;; comportamiento del DO permite no utilizar una variable como RESUELTO \n;; que aparecia algoritmo generico. \n \n;; (defun solucion-no-encontrada () ...) --> \"indefinido\" \n; Se trata de un procedimiento final que no es llamado para obtener ningun \n; valor (por lo que su resultado queda indefinido), sino para conseguir un \n; efecto lateral: la impresion en pantalla de un mensaje que indique que \n; la busqueda no ha tenido exito. Depende de la eleccion de disen~o del \n; programador (puede querer dar cierta informacion sobre el proceso de \n; busqueda), pero un codigo generico podria ser: \n \n(defun solucion-no-encontrada () \n  (format t \"~%~%Busqueda terminada sin haber encontrado un estado objetivo.\") \n  (values)) \n \n;; (defun escribe-solucion (nodo) ...) --> \"indefinido\" \n; Otro procedimiento final que informara del resultado de la busqueda, \n; en el caso en que un estado objetivo ha sido encontrado. Se  \n; supone que su argumento tiene asociado un estado objetivo. Aunque el \n; procedimiento en general dependera de ciertas decisiones de disen~o, \n; se puede considerar una version generica que pregunta si solo se \n; desea conocer cual ha sido el estado solucion alcanzado (problema de \n; decision) o si tambien se quiere saber cual es el camino seguido hasta \n; encontrarlo (problema de explicacion). En este caso un codigo puede ser: \n \n(defun escribe-solucion (nodo) \n",
  "speaker": "SYSTEM",
  "uuid": "f1775303-142f-4404-9d33-cf64f35ad700"
}