{
  "message": "SYSTEM: BUSQUEDA.pdf: Página 50\nBÚSQUEDA \n \n50 \nJ. Rubio / P.R. Muro / J. Bañares \n \nOctubre 2004 - Curso 2004-2005 \n \n(defun suma-d-t (x) \n \n  (let* ((doble (* 2 x)) \n \n         (triple (+ doble x))  ) \n \n        (+ doble triple))) \nVeamos ahora una primitiva que permite la realización de iteraciones en Common \nLisp. Se trata del bucle do. Supongamos que deseamos pasar las n primeras \ncomponentes de un vector a una lista. Una posible definición sería: \n \n> (defun vector-a-lista (v n) \n \n   (let ((lista (list ))) \n \n    (do  ((i 0 (+ i 1))) \n \n        ((= i n) lista) \n \n      (setq lista (cons (aref v i) lista))))) \nEn primer lugar usamos la primitiva let para ligar la variable local lista con la lista \nvacía. Para construir esta última llamamos a la función list sin ningún argumento. \n(Análogamente podríamos haber empleado nil o ().) El cuerpo del let está \nconstituido por un bucle do. Se trata de un elemento especial que evaluará \nselectivamente algunas partes de sus argumentos. En primer lugar nos encontramos \ncon la lista de variables que dirigen el bucle: ((i 0 (+ i 1))). Se trata de una \nlista de listas, al estilo de let, pero ahora las listas internas tienen tres miembros: un \nsímbolo (i en el ejemplo), un objeto de inicialización (0) y un objeto de actualización \n((+ i 1)). Al entrar al do se evalúan todos los objetos de inicialización y tras esa \nevaluación se realizan las ligaduras locales  (al do) de los valores a los \ncorrespondientes símbolos (obsérvese que el comportamiento es más parecido al de \nlet que al de let*). Una vez realizada esa fase de inicialización, se procede a \ntratar el segundo argumento del do (en el ejemplo, ((= i n) lista)), segundo \nargumento que denominaremos cláusula de parada. Se trata de una lista con dos \npartes bien diferenciadas. El primer miembro ((= i n)), la condición de parada, \nserá evaluado. Si su resultado es \"cierto\" (es decir, es distinto de nil, la lista vacía) \nse procede a evaluar el resto de elementos de la cláusula de parada, que \ndenominamos cuerpo de la cláusula de parada. En el ejemplo, sólo aparece el \nsímbolo lista, que será evaluado y su valor será devuelto como valor del do, que \nterminará de ser evaluado. En general el cuerpo de la cláusula de parada es un \nprogn implícito. Si la condición de parada se evalúa a nil se procede a evaluar el \ncuerpo del do que es el texto que aparece desde que se cierra la cláusula de parada \nhasta que se cierra el do. En el ejemplo, se trata sólo de un elemento Lisp: (setq \nlista (cons (aref v i) lista)). En general, se tratará de un progn \nimplícito. Una vez evaluado el cuerpo, se procede a evaluar los objetos de \n",
  "speaker": "SYSTEM",
  "uuid": "bf49fd26-3a71-4832-b544-244dbf17e9aa"
}