{
  "message": "SYSTEM: IJMSO_Corcho_OntologyBasedAnnotation.pdf: PÃ¡gina 5\n \nOntology based document annotation: trends and open research problems \n51 \nCurrently these approaches have been abandoned and there \nare only a few tools that can be used to create and process \nthese kinds of annotations, as shown in Section 4. Currently, \nOntology based annotations are now implemented using the \nRDF language (Lassila and Swick, 1999). These annotations \ncan be based on ontologies implemented in RDF Schema \n(Brickley and Guha, 2004) or OWL (Dean and Schreiber, \n2004). Earlier, they could be based on ontologies \nimplemented in OIL (Horrocks et al., 2000) or DAML+OIL \n(Horrocks and van Harmelen, 2001), the predecessors of \nOWL. \nRDF, RDF Schema and OWL are recommendations of \nthe W3C, and hence they have had a wide acceptance for \nthe implementation of ontologies and of their annotations. \nBelow we show the same example in RDF. This RDF code \ncould refer either to a RDF Schema or to an OWL ontology, \nand must be inserted also inside the HTML code of the Web \npage or in a different Web resource that refers to the one \nbeing annotated. \n<AA7462 rdf:ID=\"AA7462Feb082003\"> \n  <departureDate rdf:datatype=\"&xsd;date\"> \n     2003-02-08 \n  </departureDate> \n  <arrivalPlace rdf:resource=\"#Seattle\"/> \n</AA7462> \nThough we have presented the most widely adopted \napproach for ontology based annotation, this does not mean \nthat other ontology languages could be also used to express \nthem. For instance, OCML (Motta, 1999) was used in the \nPlanet-Onto approach and can be generated by the MnM \ntool, as will be shown in the next section. This language \nbelongs to the so called traditional ontology language group \nand although it cannot be easily embedded in HTML code, \nit can be stored in ontology servers and be retrieved from \nthem when needed during the annotation consumption \nprocess. \n4 \nOntology based metadata annotation tools \nOntology based annotation tools, aka ontology based \nannotators, are primarily designed to allow inserting and \nmaintaining ontology based markups in Web pages. Most of \nthese tools have appeared recently with the emergence of \nthe Semantic Web. Annotators were first conceived as tools \nthat could be used to alleviate the burden of including \nontology based annotations manually into Web pages. Since \nthen, many of them have evolved into more complete \nenvironments that use Information Extraction (IE) and \nMachine \nLearning \n(ML) \ntechniques \nto \npropose \nsemiautomatic annotations for Web documents. \nIn this section we present the following annotation tools \nor environments: MnM, OntoMat Annotizer, ONTO-H, \nSHOE Knowledge Annotator, and UBOT AeroSWARM. \n \nThis is not an exhaustive list of annotation tools, but rather a \nselection of some relevant tools with features that differ \nfrom each other. We will suppose that this page is not \ngenerated dynamically, but that it is static HTML, as these \ntools have not been designed to annotate content to be \ngenerated dynamically. \n4.1 MnM \nMnM (http://kmi.open.ac.uk/projects/akt/MnM/index.html) \n(Vargas-Vera et al., 2002) is a standalone application that \nintegrates a Web browser and an ontology viewer and that \npermits \nannotating \ndocuments \nmanually, \nsemi-\nautomatically, and automatically. It has been developed by \nthe Knowledge Media Institute at the Open University \n(UK), in the context of the AKT(http://www.aktors.org/) \nInterdisciplinary Research Collaboration. \nMnM is an extensible Java application, based on a plug-\nin \narchitecture, \navailable \nfor \ndownload \nfrom \nthe \naforementioned URL. For the time being it can load \nontologies stored in a WebOnto server or stored in files or \nURLs in any of the following ontology languages: RDF(S), \nOWL, and OCML. Similarly, the annotations created with \nthis tool can be used to populate existing ontologies or be \nattached to the original document (XML format, where the \ntag names are the names of the concepts, of its attributes, \nand of its relations). \nFigure \n4 \nshows \nour \nHTML \ndocument  \nannotated manually with the instance AA7615_Feb08_2003 \nof our Web page. We have selected the text that  \nrepresents this instance in the browser window and the \nconcept instance of which this is an instance. As we can see \nin the figure, we can add the instance name and the values \nand target concepts for its attributes and relations \nrespectively. \nConcerning the automatic annotation of documents, \nMnM uses information extraction engines to detect  \nconcept instances appearing in documents. These engines \nmust be trained with a set of text and HTML  \nannotated documents so that they generate the rules used to \nextract information from other documents. When the \nmodule is trained, it can be used to detect concept instances, \nattribute values, and relation instances in other documents. \nUsers may decide to edit the annotations performed by the \ninformation extraction module or to leave them as they are \ngenerated. \nA plugin for the information extraction engine Amilcare \n(Ciravegna, 2001) is included in the standard distribution. \nOther information extraction engines could be added as \nplugins, too. \nThe annotations generated by this tool can be used in \ndifferent environments. MnM stores instances in various \nformats: OCML (so it can be used by any OCML aware tool \nor application such as WebOnto, Planet-Onto, etc.), RDF, \nOWL, and XML. \n \n \n \n",
  "speaker": "SYSTEM",
  "uuid": "74f2ccb4-b8ff-45da-b8f2-1c080f41abce"
}