{
  "message": "SYSTEM: BUSQUEDA.pdf: Página 118\nBÚSQUEDA \n \n118 \nJ. Rubio / P.R. Muro / J. Bañares \n \nOctubre 2004 - Curso 2004-2005 \nP \nG \nP \nG \nG \nG \nP \nG \nE \nP \nP \nG \nE \nG \nP \nP \nG \nP \nE \nG \nG \nE \nE \nG \nG \nP \n \nFigura 5 \nEjercicios. Definir las nociones de árbol solución para MIN y de árbol ganador para \nMIN. ¿Existe un árbol ganador para MIN en el árbol de juego de la figura 4? \n \n6.2. Algoritmos MiniMax. \nEl método de etiquetado descrito en el apartado anterior requiere un árbol de juego \ncompleto. Para la mayoría de los juegos, desarrollar todo el árbol de juego es una \ntarea impracticable, debido a que existen muchos posibles movimientos en cada \npaso, con lo que el árbol de juego crece enormemente. Un árbol de juego para las \ndamas tiene aproximadamente 1040 posiciones no terminales. Generar el árbol \ncompleto requeriría más o menos 1021 siglos, incluso si en cada segundo se \ngenerasen 3 billones de posiciones. El tamaño de un árbol de juego para el ajedrez \nes todavía más astronómico: unas 10120 posiciones y 10101 siglos con la misma \nvelocidad de generación. Incluso si un adivino nos proporcionase un árbol ganador \n(una estrategia ganadora) no tendríamos posibilidad de almacenarlo ni de recorrerlo. \nPuesto que, por restricciones de tiempo y de espacio, no podemos evaluar la \netiqueta exacta de cada posición sucesora, debemos pensar en una aproximación \nheurística. Podemos suponer que tenemos una función de evaluación (estática) h \nque nos indica cuál es el \"mérito\" de cada una de las posiciones. Al contrario que en \nlos dos temas anteriores, se supone que h asigna valores grandes a las posiciones \nque son más favorables para MAX. Por ejemplo, en el juego de los autos de choque \npodemos suponer que una ficha negra situada en una casilla cuenta por el número \n",
  "speaker": "SYSTEM",
  "uuid": "d02000ff-101e-4de9-ac9c-9c040e304a87"
}