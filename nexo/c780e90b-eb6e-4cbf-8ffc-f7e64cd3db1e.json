{
  "message": "SYSTEM: Neon_2008_d2.2.2.pdf: Página 29\nD2.2.2 Methods and Tools Supporting Re-engineering\nPage 29 of 124\n• Cruz et al. in [CXH04] present a method to transforming XML schema into RDF(S) ontology preserving\nthe XML document structure, i.e., modelling the knowledge implicit in XML schema using RDF(S).\nThis method follows the approach to transforming the resource schema into the ontology schema,\nand resource content into ontology instances. The method uses a formal speciﬁcation of the\nconversions between entities of the XML and the ontology. A speciﬁc tool for supporting the method\nhas been developed for this purpose. This method contemplates syntactic transformation aspects,\nand how symbols are structured in the XML and ontology formats. It also contemplates seman-\ntic transformation aspects and the semantic interpretation of the resource elements when deﬁning\ntransformations to ontology elements. It does not tackle the internal data model of the resource,\nnor does it describe how the resource data is represented and accessed for the transformation. This\nmethod does not provide the resource provenance information, therefore the resultant ontology\ndoes not keep the reference to the XML.\nThe method consists of\n– Element-level transformation, which deﬁnes the basic classes and properties of the RDF(S) on-\ntology according to the following transformations: (1) XML attribute is mapped to a Property;\n(2) XML Simple-type element is mapped to a Property; and (3) XML complex-type element is\nmapped to a Class.\n– Structure-level transformation, which encodes the hierarchical structures of the XML schema\ninto the RDF(S) ontology. The element-attribute relationship is encoded as class-to-literal rela-\ntionship, and the element-subelement relationship is encoded as class-to-class relationship in\nRDF(S). Besides, the authors have deﬁned a new RDF(S) predicate rdfx:contain to represent the\nclass-to-class relationship.\n– Query driven data migration, which transforms the query expressed in RDQL32 into XQuery33\nquery and creates the RDF instances that satisﬁes the query.\nThe method produces a single ontology.\nThe ontology components generated are classes, at-\ntributes, and relations and they are expressed in RDF(S).\nMethods for Transforming Flat Files into Ontologies\nThe main method to transforming ﬂat ﬁle is presented in [FB06] and described next.\n• Foxvog et al. in [FB06] present a method to transforming Electronic Data Interchange (EDI)34 mes-\nsages into ontologies. EDI is intended to handle all aspects of business transactions such as ordering,\nacknowledgements, pricing, status, scheduling, shipping, receiving, invoices, payments, and ﬁnancial\nreporting. Hundreds of standard message types are deﬁned with speciﬁed formats. There are two\nmajor EDI standards EDIFACT [Ber94], deﬁned as an open standard by the United Nations, and ASC\nX1235, primarily used in the United States. ASC X12 calls message types Transaction Sets which\nare composed of strings and loops of Data Segments in a speciﬁed format. Each Data Segment has\na speciﬁed format of Data Elements. The method is centered on the ASC X12 standard. ASC X12\nmessages are stored in ﬂat ﬁles.\nThis method follows the approach to transforming resource schema into an ontology schema, and\nresource content into ontology instances. Such transformation is performed semi-automatically\nwith an ad-hoc conversion program developed for that purpose. This method does not tackle the\ninternal data model of the resource, nor does it describe how the resource data is represented and\n32http://www.w3.org/Submission/2004/SUBM-RDQL-20040109/\n33http://www.w3.org/TR/xquery/\n34http://www.ifla.org/VI/5/reports/rep4/42.htm#chap2\n35http://www.x12.org/\n2006–2008 c⃝Copyright lies with the respective authors and their institutions.\n",
  "speaker": "SYSTEM",
  "uuid": "c780e90b-eb6e-4cbf-8ffc-f7e64cd3db1e"
}