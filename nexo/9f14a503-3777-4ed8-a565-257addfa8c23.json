{
  "message": "SYSTEM: BUSQUEDA.pdf: Página 122\nBÚSQUEDA \n \n122 \nJ. Rubio / P.R. Muro / J. Bañares \n \nOctubre 2004 - Curso 2004-2005 \ncuenta los bloqueos). Idem con 2 capas. Repítase el ejercicio con una y dos capas \nutilizando la segunda heurística. \nPara calcular el valor MiniMax de una posición podemos emplear la siguiente función \nCommon Lisp, que se comporta como una búsqueda en profundidad. Aquí el \nesquema MiniMax ha sido programado como un caso particular de sistema de \nproducción, por lo que hemos denominado estados a las posiciones y hemos \nutilizado una función expandir-estado para calcular la lista de posiciones \nsucesoras a una dada. \n \n; El metodo MiniMax \"en profundidad\" \n; Una llamada al operador seria: (minimax estado <jugador> <numero-capas>) \n \n(defun minimax (estado jugador n) \n \n(if (or (terminal? estado) (= n 0)) \n \n \n(funcion-heuristica estado) \n \n \n(let \n ( \n(s-j (siguiente-jugador jugador)) \n \n \n \n \n \n \n(n-1 (- n 1)) \n \n \n \n \n \n \n(lista-valores '())   ) \n \n \n \n(do \n((plista (expandir-estado estado) (rest plista))) \n \n \n \n \n \n((endp plista) ) \n \n \n \n \n(setq lista-valores \n \n \n \n \n \n \n(cons (minimax (first plista) s-j n-1) \n \n \n \n \n \n \n \n \n \n \nlista-valores))) \n \n \n \n(if \n(eq jugador 'MAX) \n \n \n \n \n \n(maxi lista-valores) \n \n \n \n \n(mini lista-valores))))) \n \n; Funciones auxiliares: \n \n; (defun terminal? (estado) ...) \n; \n \npredicado que determina si una posición es o no es terminal. \n \n; (defun funcion-heuristica (estado) ...) \n; \n \nfuncion que calcula el valor heuristico de una posicion. \n \n(defun siguiente-jugador (jugador) \n \n(if \n(eq jugador 'MAX) \n       'MIN \n     \n'MAX)) \n \n; (defun expandir-estado (estado) ...) \n; \n \nfuncion que calcula la lista de posiciones sucesoras a una dada. \n \n; (defun maxi (lista-numeros) ...) \n; \n \nfuncion que calcula el maximo de una lista de numeros. \n \n; (defun mini (lista-numeros) ...) \n; \n \nfuncion que calcula el minimo de una lista de numeros. \nEs importante notar que en este algoritmo la evaluación de una posición  no está \ncompleta hasta que cada una de sus posiciones sucesoras en el espacio de \nbúsqueda, hasta un cierto nivel, no ha sido evaluada. Se trata por tanto de una \nestrategia exhaustiva, aunque de profundidad limitada. Veremos en el último \napartado que es posible \"podar\" el espacio de búsqueda sin perder información. \n \n",
  "speaker": "SYSTEM",
  "uuid": "9f14a503-3777-4ed8-a565-257addfa8c23"
}