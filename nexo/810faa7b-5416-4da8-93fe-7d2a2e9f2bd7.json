{
  "message": "SYSTEM: BUSQUEDA.pdf: Página 10\nBÚSQUEDA \n \n10 \nJ. Rubio / P.R. Muro / J. Bañares \n \nOctubre 2004 - Curso 2004-2005 \nEl operador predefinido setq es un elemento especial. Su primer argumento debe \nser un símbolo (en otro caso se produce un error) que no será evaluado y su \nsegundo argumento es cualquier elemento Lisp, que será evaluado. El resultado de \nevaluar este segundo argumento será el resultado de la evaluación de la lista inicial \ny además, como efecto lateral, dicho resultado será ligado en el contexto activo en \nese momento (el global en el ejemplo) al símbolo que era el primer argumento del \nsetq. Algunos ejemplos más: \n \n> (setq y  (cuadrado (+ 1 2)))  \n===> 9 \n \n> (+ (cuadrado x) y) \n \n \n===> 34 \nEsta primitiva nos permite manipular los símbolos como variables (su tercer uso \ncomo identificadores enumerado más arriba). Sin embargo, para utilizar los símbolos \ncomo datos en sí todavía nos faltan recursos. Por ejemplo si quisiésemos ligar al \nsímbolo z el símbolo caballo no podríamos teclear algo como: \n \n> (setq z caballo) ===> ¡¡¡¡ ERROR !!!! \nLa razón es que, según se ha explicado más arriba, el evaluador intentará encontrar \nel valor asociado al símbolo caballo lo que producirá un error. Por ello, si \nqueremos utilizar un símbolo como un dato, es obligatorio que podamos impedir la \nevaluación. Esto es posible gracias al elemento especial quote que no evalúa su \núnico argumento, que puede ser cualquier elemento Lisp. Así: \n \n> (quote caballo) \n===> CABALLO \nLo que utilizado en conjunción con setq permite ya manipular símbolos como datos: \n \n> (setq z (quote caballo)) \n===> CABALLO \n \n> z ===> CABALLO \nPuesto que quote es una primitiva muy utilizada (Lisp es un lenguaje muy \nadecuado para la manipulación simbólica, lo que no es ajeno a su amplio uso en \nInteligencia Artificial), los diseñadores de Lisp han previsto una abreviatura, la \ncomilla simple '. Así: \n \n> 'caballo \n \n \n===> CABALLO \n \n> (setq pieza 'alfil) \n===> ALFIL \n \n> pieza \n \n \n \n===> ALFIL \nObsérvese en cambio: \n \n> 'pieza ===> PIEZA \n \n",
  "speaker": "SYSTEM",
  "uuid": "810faa7b-5416-4da8-93fe-7d2a2e9f2bd7"
}