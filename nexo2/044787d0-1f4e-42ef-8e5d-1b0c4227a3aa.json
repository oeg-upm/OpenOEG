{
  "message": "SYSTEM: BUSQUEDA.pdf: Página 94\nBÚSQUEDA \n \n94 \nJ. Rubio / P.R. Muro / J. Bañares \n \nOctubre 2004 - Curso 2004-2005 \npuede quedar desordenada tras una evaluación de expandir-nodo. Por tanto, la \nidea de programar reorganizar-nodos-a-expandir como un algoritmo de \nmezcla de los nuevos nodos y ABIERTOS no es aplicable (al menos directamente). \nObservemos también que siempre se revisa en ABIERTOS y nunca en CERRADOS, \nde modo que esta segunda lista puede seguir siendo una lista de estados (y no de \nnodos). La razón es que una vez que se expande un nodo, ya se ha encontrado la \nmejor manera (camino óptimo) de llegar al estado de ese nodo (esto es un resultado \nteórico que señalamos sin demostración). \nPara el espacio de estados de la figura 3, el árbol de búsqueda \"primero el menos \ncostoso\" en grafo queda recogido en la figura 6, en la que las flechas punteadas no \nsignifican aristas no consideradas, sino aristas que han formado parte del árbol de \nbúsqueda en algún momento y que después han sido desechadas al encontrarse \notros caminos mejores. Del mismo modo, los costes tachados corresponden a \ncostes que han sido mejorados. \nI,0 \nA,2 \nB,3 \nO1,7\nD,7 \nO2,7\nC,5 \n1 \n3 \n2 \n4 \n5 \nX \nX \n4 \n6 \nX \n6 \n \nFigura 6 \nEjercicios. Escribir programas Common Lisp que correspondan a las dos \nestrategias explicadas en este apartado. Escribir programas para resolver con ellos \nel problema del tren, con las tres posibilidades para los costes explicadas más \narriba. \n \n",
  "speaker": "SYSTEM",
  "uuid": "044787d0-1f4e-42ef-8e5d-1b0c4227a3aa"
}