{
  "message": "SYSTEM: The_Return_of_the_Entity-Relationship_Model_-_Ontological_Query_Answering.pdf: Página 23\n1 The Return of the Entity-Relationship Model: Ontological Query Answering\n23\nTheorem 1.7. CQ-Ans under non-conﬂicting CDs is PSPACE-hard in combined\ncomplexity.\nProof. The proof is by reduction of FFG. Consider a set F ∪{f} of bijective func-\ntions from a set S to itself. Suppose that F = {f1,..., fm}, for m ⩾1. Moreover,\nwithout loss of generality, assume that S = [n], for some integer n ⩾2.\nLet q be the Boolean CQ p ←r(cf(1),...,cf(n)), D = {r(c1,...,cn)}, where\n⟨c1,...,cn⟩∈Γ n, and Σ be the set of CDs associated to the schema\nentity E\nrelationship R among E,...,E\n| {z }\nn\nisa: R[f1(1),..., f1(n)],...,R[fm(1),..., fm(n)].\nClearly, Σ is a set of non-conﬂicting CDs since in the CD-graph of Σ there is no\nk-node. It is straightforward to see that ⟨⟩∈ans(q,D,Σ) if and only if f can be\nobtained by composing functions of F. This completes the proof.\nWe conclude this subsection by showing that in the case of non-conﬂicting IPCDs\nand non-conﬂicting BACDs CQ answering is NP-hard.\nTheorem 1.8. CQ-Ans under non-conﬂicting IPCDs and non-conﬂicting BACDs is\nNP-hard in combined complexity.\nProof. It is well-known that the problem of CQ answering under no dependencies,\neven for a relational schema with ﬁxed arity, is NP-hard in combined complex-\nity [10]. The desired lower bounds can be easily established by providing a reduction\nof the above problem.\n1.5.3 Chase Failure\nIn this subsection we show, by exploiting a technique proposed in [26], that the\nproblem whether the chase fails is tantamount to the CQ answering problem (pro-\nviding that the chase does not fail). In what follows we are going to use the notion\nof union of CQs. A union of conjunctive queries Q of arity n is a set of CQs, where\neach q ∈Q has the same arity n and uses the same predicate symbol in the head.\nThe answer to Q over a database D is deﬁned as the set Q(D) = {t | there exists q ∈\nQ such that t ∈q(D)}.\nLemma 1.2. Consider a database D for R, and a set Σ = ΣT ∪ΣK over R, where\nΣT are TGDs and ΣK are KDs. If both R and Σ are arbitrary (resp., ﬁxed), then we\ncan construct in PTIME (resp., in AC0) a database D′ and a union of Boolean CQs\nQ such that chase(D,Σ) fails if and only if ⟨⟩∈Q(chase(D′,ΣT)).\n",
  "speaker": "SYSTEM",
  "uuid": "f0241387-f858-4b1f-a47c-4e5bc4add0e4"
}