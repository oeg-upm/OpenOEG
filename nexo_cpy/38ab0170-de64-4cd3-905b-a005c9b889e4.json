{
  "message": "SYSTEM: OntologyDebugging_KCAP2009.pdf: Página 4\nThe ontology developer misunderstands the subproperty \nrelation between roles, thinking that it is similar to a part-of \nrelation. This anti-pattern is a specialization of SOS be-\ncause C1 ⊆∃R1.C2, R1⊆R2 ╞ C1⊆∃R2.C2. \nAntiPattern SumOfSomWithInverseProperty \n(SOSWIP) \nC2⊆∃R-1 .C1, C1⊆∃R.C3, disj(C2,C3) \nThe ontology developer has created two existential restric-\ntions using a role and its inverse. This anti-pattern special-\nizes SOS because: C2⊆∃R-1.C1 ╞ C1⊆∃R.C2.  \nAntiPattern SomeMeansAtLeastOne (SMALO) \nC1⊆∃R.C2, C1⊆(≥1 R.T) \nThe cardinality restriction is superfluous.  \n2.4 Guidelines \nAs aforementioned, guidelines represent complex expres-\nsions used in an ontology component definition that are \ncorrect from a logical point of view, but in which the ontol-\nogy developer could have used other simpler alternatives \nfor encoding the same knowledge. \nGuideline DisjointnessOfComplement (DOC) \nC1 ≡ not C2  \nThe ontology developer wants to say that C1 and C2 cannot \nshare instances. Even if the axiom is correct from a logical \npoint of view, it is more appropriate to state that C1 and C2 \nare disjoint.  \nGuideline Domain&CardinalityConstraints \n(DCC) \nC1⊆∃R.C2, C1⊆(=2R.T) \nOntology developers with little background in formal logic \nfind difficult to understand that “only” does not imply \n“some” [12]. This antipattern is a counterpart of that fact. \nDevelopers may forget that existential restrictions contain a \ncardinality constraint: C1⊆∃R.C2 ╞  C1⊆(≥1R.C2). Thus, \nwhen they combine existential and cardinality restrictions, \nthey may be actually thinking about universal restrictions \nwith those cardinality constraints.  \nGuideline GroupAxioms (GA) \nC1⊆∀R.C2, C1⊆(≥2R.T) (just as an example) \nIn order to facilitate the comprehension of complex class \ndefinitions, we recommend grouping all the restrictions of a \nconcept that use the same role R in a single restriction.  \nGuideline MinIsZero (MIZ) \nC1⊆(≥0R.T)  \nThe ontology developer wants to say that C1 can be the \ndomain of the R role. This restriction has no impact on the \nlogical model being defined and can be removed. \n3. ONTOLOGY DEBUGGING STRATEGY \nAs mentioned in the introduction, OWL ontology debug-\nging features have been proposed in the literature with dif-\nferent degrees of formality ([4, 5, 16]). These features are \nuseful to debug ontologies and allow identifying the main \nroots for inconsistencies and the superfluous axioms and \nrestrictions, and explaining them in some cases, with differ-\nent degrees of detail, so that the debugging process can be \nguided by them and can be made more efficient. However, \nin general these features are mainly focused on the explana-\ntions of the logical entailments and are not so focused on \nthe ontology engineering side of ontology debugging. \nHence explanations are still difficult to understand for on-\ntology developers. Furthermore, there are no clear strategies \nabout how an ontology developer should debug inconsistent \nontologies, in terms of steps to be followed in this process. \nConsequently, we think that there is a need to complement \nboth types of suggestions in order to make the ontology \ndebugging process more efficient. \nIn the following sections we describe the lifecycle that we \npropose in order to perform this task and the specific rec-\nommendations that we provide users for each of the anti-\npatterns defined in the previous section. \n3.1 A Lifecycle for Ontology Debugging \nFigure 1 shows graphically a usual ontology debugging \nlifecycle, with the roles of knowledge engineer and domain \nexpert identified, although in many cases they are per-\nformed by the same person. As it happens in other disci-\nplines (e.g., software development), the first step is to lo-\ncate where the problems are, so as to propose recommenda-\ntions for corrections, such as the ones presented in the sec-\ntion 3.2. Recommendations cannot always be automated, \nsince they may change the intended meaning of the ontol-\nogy, and should be documented. Once a change is done, \nnew consistency checks should be performed. This is an \niterative process to be followed until there are no more in-\nconsistencies found in the ontology. \n \nFigure 1. Global strategy for ontology debugging. \n",
  "speaker": "SYSTEM",
  "uuid": "38ab0170-de64-4cd3-905b-a005c9b889e4"
}