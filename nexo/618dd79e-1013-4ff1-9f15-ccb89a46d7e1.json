{
  "message": "SYSTEM: Wiki: https://delicias.dia.fi.upm.es/wiki/index.php/SEALS-EvaluatingClassifiers \n\nPara instalar el wrapper en la plataforma SEALS primero hay que instalar el runtime evaluation service tanto el core como el worker. Esta instalación se realizó siguiendo las guías proporcionadas en el deliverable D9.3\nv2.0\nbeta Iterative Evaluation and Implementation of the runtime evaluation service. En general la instalación fue fácil aunque algunos componentes de software ya estan desactualizados y hay que buscar la versión correcta.\nPara poder ejecutar el test de integración hubo que aprender a usar el SOAP UI. Sin embargo al ejecutar el test de integración tuvimos diferentes problemas que resultaron ser de configuración y que nos llevo alrededor de 1 semana solucionar.\nLos errores empezaron por la versión del repositorio de datos de prueba\nque necesitaba una versión diferente (1.1) a la versión instalada (tdrs-web-1.1-b). El error se produjo al seguir las instrucciones de una presentación desactualizada.\nTambién hubo algunos problemas con los puertos utilizados por el res core y el worker. Para encontrar los problemas se siguieron los puertos 8080 y 1890 usando el tcpmon. Para esto se cambiaron estos puertos al 8081 y al 1891.\nEl seguimiento y solución de estos problemas fueron hechos por Miguel Esteban. Tardamos 3 días en solucionarlos.\nDeploy del wrapper simpleTool en el RES Worker\n\nPara hacer el deploy del wrapper se construye el proyecto maven donde está el codigo del SimpleTool. Esta construcción produce un fichero zip (res-itest-tool-1.2-tool-package.zip) en la carpeta target que debe descomprimirse en la carpeta SEALS/package/simple en el res worker. Hay que asegurarse que el fichero SEALS/package/simple/descriptor.xml contenga la siguiente linea (en caso contrario remplazar la existente con lo siguiente):\n<tpd:bridge>\n           <tpd:class>eu.sealsproject.platform.res.domain.itest.simple.SimpleToolBridgeImpl</tpd:class>\nPara probar que el simpleTool funcionará correctamente Miguel Esteban creó un test en el SOAP UI. Sin embargo este test fallo y por tanto se tuvo que realizar un proceso de debug del código. Para esto se uso el debuger de netbeans en un puerto 5005. Este proceso era nuevo para mi así que tuve que aprender a realizarlo. Este debug permitió identificar el problema en la clase FilePublisher que provee seals para publicar ficheros. Se concluyó que era un problema de configuración y fue solucionado.\nEn este proceso se detectó que el runtime evaluation service (1.1) utilizado no era el que se debia utilizar (2.0 snapshot). Así que fue necesario volver a realizar la instalación del res core y del res worker.\nLa ejecución del proyecto SOAP UI fue satisfactoria lo que permitió concluir que el wrapper funcionaba bien.\nTiempo: 4 días\nBPEL\n\nSe reutilizó el fichero bpel integration-testing-evaluation.bpel que viene en seals-res-2.0-SNAPSHOT\\examples\\ed\\res-itest-ed-ode-su\\src\\main\\resources. Se recomienda hacer una copia del directorio ed y trabajar sobre esa copia. Primero tuve que bajar un designer bpel para visualizar el workflow (eclipse designer). Tuve que leer un poco para entender los elementos tipicos de un bpel y posteriormente ser capaz de modificarlo.\nA modo de resumen el workflow descrito en el bpel consulta el repositorio de resultados e itera sobre los data items asociados al conjunto de resultados y la versión que se han especificado en la llamada al bpel. Esta llamada se realiza utilizando un proyecto SOAPUI. Para cada data item (URL) en el repositorio de resultados se ejecuta el SimpleTool que empaqueta una llamada al classificador. El classificador se entrena y se evalua automaticamente devolviendo en un string la ontología con los resultados de evaluación. Estos resultados de evaluación se almacena en una variable metadatos y se adiciona al paquete de resultados. Cuando finalizan los data items del conjunto de pruebas, se publica el paquete resultados en el repositorio de resultados. El fichero bpel se ilustra en la siguiente imagen y se puede descargar en el siguiente enlace\nFile:Integration-testing-evaluation.zip\nNota importante:\nLa propiedad hasComponentType en el conjunto de resultados se utiliza para discriminar entre data items. Así que cada data item debería tener un hasComponentType diferente por caso de prueba. Hablar con Raul y Miguel Esteban.\nUna vez modificado el bpel para que se adaptase a mis requerimientos seguía el deploy. Para hacer el deploy hay que abrir el proyecto maven que esta en seals-res-2.0-SNAPSHOT\\examples\\ed\\res-itest-ed-ode-su\\. Netbeans no fue capaz de abrirlo así que tuve que instalar eclipse JEE. Con eclipse depure el proyecto y lo construí generando el fichero res-itest-ed-sa-2.0-SNAPSHOT.zip en seals-res-2.0-SNAPSHOT\\examples\\res-itest-ed-sa\\target.  Este fichero tenia que desplegarse en el res core. Para esto en el res core (fuse console) hay que verificar si ya esta instalado el paquete correspondiente al integration test usando el comando osgi:list, una vez identificado el numero del bundle entonces desinstalarlo usando uninstall #bundle. Posteriormente hay que instalar el paquete:\ninstall -s file:///D:/SEALS/environment/seals-res-2.0-SNAPSHOT/examples/ed/res-itest-ed-ode-su/target/res-itest-ed-ode-su-2.0-SNAPSHOT.zip\nPara probar el bpel hay que usar el proyecto integrationTest (Res service 2.0) en el SOAP UI. Se recomienda clonar el proyecto existente y trabajar sobre el nuevo.\nResultados de la ejecución del Bpel",
  "speaker": "SYSTEM",
  "uuid": "618dd79e-1013-4ff1-9f15-ccb89a46d7e1"
}