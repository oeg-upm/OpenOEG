{
  "message": "SYSTEM: Neon_2008_d2.2.2.pdf: Página 111\nD2.2.2 Methods and Tools Supporting Re-engineering\nPage 111 of 124\nFigure 7.2: Generated ontology in GATE\ncreate, and manage information without knowledge of complicated standards (such as XML, RDF and OWL)\nor ontology engineering tools. It is implemented as a simpliﬁed natural language processor that allows the\nspeciﬁcation of logical data for semantic knowledge technology purposes in normal language, but with high\naccuracy and reliability. The components are based on GATE’s existing tools for IE (information extraction)\nand NLP (natural language processing). Because the parsing process is deterministic, accuracy is not an\nissue: as long as the user speciﬁes their input in correct controlled language, the system always produces\ncorrect output.\nBecause CLOnE was designed to be used with Controlled Language textual input, it is quite restricted in\nthe patterns it can process and in how it generates the ontological data from them. We therefore developed\nNEBOnE in order to deal speciﬁcally with free text input. As its name suggests, is based on named entity\nrecognition rather than a restricted set of keywords and noun phrases. For example, in CLOnE, the only way\nto derive a new subclass is by using a speciﬁc pattern containing the restricted keywords type of followed\nby the name of the class, e.g., “a dog is a type of animal”. In free text, however, there are many ways in which\na subclass could be stated, e.g., “animals such as dogs” or “dogs are animals”, and so on (as described\nin Section 7.2); the use of a controlled language avoids ambiguity between syntactic structures. CLOnE\nalso imposed strict rules on the order of input sentences and the creation of resources in the ontology. For\nexample, the function to create a subclass required the superclass to exist already, and the function to create\nan instance made the same stipulation about the new instance’s class. We cannot avoid this problem in\nNEBOnE: this is the sacriﬁce made for the gain in ﬂexibility of input, which is essential with real world texts.\nNEBOnE is based on the same underlying principles as CLOnE and is realised as another GATE plugin. The\nidea behind NEBOnE is that once a text has been annotated using Named Entity recognition techniques,\nthese annotations can be used to generate new concepts, instances and properties in the ontology. CLOnE\nuses so-called chunks from the input sentences as candidates for inclusion in the ontology as classes, in-\nstances and properties: these are noun phrases previously created by a chunker in GATE. In NEBOnE,\nhowever, a chunk can be any annotation previously created, and does not need to correspond to a noun\nphrase, thereby ensuring a great deal more ﬂexibility. When the NEBOnE plugin is installed, actions con-\ncerning the ontology are implemented on the RHS of JAPE rules, such as adding or deleting new classes,\ninstances, subclasses, properties and so on.\nIf an item is selected for addition to the ontology as a new class, NEBOnE ﬁrst checks to see whether the\nitem in question already exists in the ontology: if it already exists in the place where it is scheduled to be\nadded, NEBOnE will do nothing. If the item exists as a class elsewhere in the ontology, NEBOnE will add the\nnew class (because it supports multiple inheritance). If the requested parent class and subclass both exist\nand are class names, NEBOnE will make the second a subclass of the ﬁrst and print a message. If either is\nalready an instance, or the parent class does not exist yet, NEBOnE will print a warning message.\n2006–2008 c⃝Copyright lies with the respective authors and their institutions.\n",
  "speaker": "SYSTEM",
  "uuid": "19f3daba-f1ed-4094-bb73-b0bd6b98f3f3"
}