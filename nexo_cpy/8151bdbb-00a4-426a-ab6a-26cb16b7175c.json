{
  "message": "SYSTEM: Eswc2010webofdatatrack_submission_2.pdf: PÃ¡gina 3\nThe aforementioned systems are the most relevant in terms of distributed RDF \ndataset querying. All of them apply some form of optimization, mainly based in join \nreordering algorithms and push down filters (SemWIQ and DARQ also implement \ncost based optimizations). In the case of SemWIQ and Networked Graphs, \noptimizations are inspired by existing work in the area of distributed query processing \n(DQP) in relational databases, adapting them to RDF databases.  \nBased on existing studies that show the relationship between SPARQL and SQL \n[4] and on the claims made in [6], where the authors state that SPARQL access and \noptimization techniques are still in their infancy, our proposal is to use relational \ndatabase DQP techniques and SQL optimization techniques to generate and optimize \nquery plans to be executed against RDF datasets available as SPARQL endpoints. \nHence in this paper we describe a SPARQL query federation system based on the \ntransformation of a subset of SPARQL queries8 into their equivalent SQL queries, the \nextension of an existing relational database DQP system (OGSA-DQP [12]) to \ngenerate optimized query plans across distributed RDF datasets, and the use of the \nOGSA-DAI [2] framework for the robust execution of those queries and for managing \ndirect and indirect access to datasets following the WS-DAI recommendation [3]. In \nthe indirect access model, the result of querying a data source is a new data source \nthat will be incrementally containing the results of the query execution as they are \nbeing generated by the underlying query engine, available as a stream of data tuples \n(or triples, in the case of RDF-based querying). \nOur approach is the first that combines relational database DQP techniques with \nthe use of indirect access modes to data sources, which can be useful for the creation \nof complex data workflows, such as those generated in many e-Science applications.  \n \nThis paper is structured as follows. Section 2 presents the background needed for a \nbetter understanding of this paper, describing previous work on relating SPARQL \nwith the relational model, and some background on relational distributed query \nprocessing. Section 3 describes our solution, SparqlDQP, detailing the design \ndecisions we took and a brief description of some implementation details. Section 4 \npresents an evaluation comparing some of the existing similar systems with our \nsolution. Section 5 presents conclusions of this paper and our future workplan.  \n2   Background: SPARQL and Relational Algebra \n2.1 SPARQL and Relational Algebra \nAs pointed out in the introduction, our approach to federated RDF querying is based \non the application of relational database distribution and optimization techniques. \nObviously, one of the first considerations to be taken into account before moving \nfurther with the description of how we have actually performed this distribution and \noptimization is to assess the validity of the approach, in terms of the preservation of \nthe query language semantics in the transformation between SPARQL and SQL.  \n                                                           \n8 Some SPARQL features like unions or filters have been left temporarily outside the \nimplementation of the system, but they will be implemented in the short term. \n",
  "speaker": "SYSTEM",
  "uuid": "8151bdbb-00a4-426a-ab6a-26cb16b7175c"
}