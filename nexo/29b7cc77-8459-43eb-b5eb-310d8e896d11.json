{
  "message": "SYSTEM: Wiki: https://delicias.dia.fi.upm.es/wiki/index.php/DevTools,_a_plug-in_installer \n\nContents\n[\nhide\n]\n1\nIntroduction\n1.1\nWhat is it?\n1.2\nHow it works\n1.3\nGoals Overview\n1.4\nUsage\n1.5\nDevTools management in a nutshell\n2\nSetting up a tools repository\n2.1\nCreating the repository\n2.2\nDeploying tools to the repository\n3\nConfiguring POM\n3.1\ndevtools:update\n3.2\nParameter Details\n4\nPreparing the tools configuration\n5\nPresentation\nIntroduction\n\nWhat is it?\n\nIt is a Maven2 plug-in that provides a way to manage environments with Maven. The DevTools plugin provides a way to manage development environments with Maven.\nA development environment has a POM where the tools (IDEs, application servers, etc.) that it uses are expressed as dependencies. The DevTools plugin downloads them from a remote repository, and installs them in a standardized path.\nBenefits of using an installer as DevTools\nIt enables installation and pre-configuration of environments\nIt enables the separation of configuration files and binaries\nWe can reuse same binaries with different configurations\nIt is multi-environment, that is, many environments can be installed on the same machine\nIt enables to come back to reference configuration if current becomes corrupted\nIt enables environment upgrades propagation\nOnce a environment is configured in DevTools, it only remains to click and… go!\nHow it works\n\nIt is your responsibility to provide the tools' configuration and startup scripts, written in a way that will not corrupt the standard product installations (this will be detailed in this documentation).\nThis system is intended to automatize environment installations, and standardize workstations in contexts where developers often switch between projects.\nGoals Overview\n\nThe DevTools Maven plugin has one goal:\ndevtools:update\n: for a particular environment, downloads and installs the development tools not yet present on the workstation. These tools are expressed as dependencies in the environment's POM.\nUsage\n\nThere is actually more than just using the plugin in a project:\nyou will need to\nsetup your own tools repository\n.\ninstructions on how to configure the plugin in your environment's POM can be found\nhere\n.\nfinally, guidelines on how to provide startup scripts and configuration for the tools installed by the plugin are available\nhere\n.\nDevTools management in a nutshell\n\n1st step: making a bootstrap file\nIt is composed by a JDK distribution, a Maven2 installation, a SVN client and a shell script\nWe create a self-extracting file\n2nd step: uploading tools to binaries repository\nUsing Maven or Artifactory GUI, we have to upload all binaries we need\n3rd step: making configuration\nIt is a Maven2 pom project\nIt contains two folders:\nbin\n--> custom shell scripts for launching tools\nreference\n--> reference configuration files\nIn\npom.xml\nwe include tools (binaries) as dependencies\n4th step: uploading configuration to SVN repository\n5th step: publishing bootstrap file to be downloaded\n6th step: clicking to file\nIt ask for SVN user and password\nWe fill them and… go!\nResult will be four new folders in our workstation (this is customizable):\n\\bootstrap-seals --> startup scripts\n\\m2repo --> Maven local repository\n\\projects --> projects using DevTools\n\\tools --> software downloaded\nSetting up a tools repository\n\nThe DevTools plugin leverages Maven's powerful repository mechanism to organize development tools: any product to be installed on a developer's workstation is downloaded from a centralized remote repository.\nHowever, there is no public tools repository available on the internet. You will need to setup your own repository, possibly on a server within your organization.\nCreating the repository\n\nSetting up the Maven repository itself is outside of the scope of this documentation. Without going into details, we have installed a third-party tool that provides administration and security features. Such tool is\nArtifactory\n.\nFor more information, refer to the\nIntroduction to repositories\npage in the Maven documentation (especially the section called Internal Repositories). You can also take a look at\nthis article\n.\nYou can find the SEALS Artifactory server\nhere\n.\nDeploying tools to the repository\n\nOnce you have your repository, you can start populating it with the tools that will be used by your development projects.\nChoosing artifact coordinates\nYou are free to use what you want, but what seems most logical is to keep the convention of using the reverted domain name as the groupId. For instance, if we want to deploy Tomcat 6.0.24's ZIP (downloaded from\nhttp://tomcat.apache.org\n), we could use the following coordinates:\ngroupId=org.apache.tomcat\nartifactId=tomcat\nversion=6.0.24\npackaging=zip\nOne thing to keep in mind is that the tool's installation path in the final environment will be constructed from these coordinates. In the previous example, the DevTools plugin will install Tomcat in the following directory:\n$TOOLS_DIR/org/apache/tomcat/tomcat/6.0.24\n(where $TOOLS_DIR is the base directory for tool installations, more on this in the\nnext section\n).\nThe default installer\nIf the file you are deploying to the repository is a ZIP, and if it contains the exact image of the final product installation, you have nothing else to do: by default, the entorno plugin will try to unzip each artifact in its final directory.\nCustom installation with an Ant script\nIf you want to do something more specific than merely unzipping a file, you need to express that something in an\nAnt\nscript, and deploy it in the repository as well.\nAs a simple example, the Tomcat ZIP downloaded above contains a base directory apache-tomcat-6.0.24. We don't really want that directory in our final installation, because we would end up with a very large path with redundant information:\n$TOOLS_DIR/org/apache/tomcat/tomcat/6.0.24/apache-tomcat-6.0.24\nThis can be taken care of with an Ant mapper, as shown in the following script:\n<project name=\"install-tomcat-6.0.24\">\n  <target name=\"install\">\n    <unzip src=\"${net.sf.mojo.entorno.installFile}\"\n      dest=\"${net.sf.mojo.entorno.installTo}\"\n    >\n      <mapper type=\"glob\"\n        from=\"apache-tomcat-6.0.24/*\"\n        to=\"*\"\n      />\n    </unzip>\n  </target>\n</project>\nNotice the following:\nthe two properties\nnet.sf.mojo.entorno.installFile\n(the file to install) and\nnet.sf.mojo.entorno.installTo\n(the target directory) will be injected by the DevTools plugin at installation time.\nthe Ant target performing the installation must be called\ninstall\n.\nthe project name is of no importance.\nAn installer script is deployed with the same coordinates as its corresponding artifact, with the exception of the packaging, which must be set to\ninstaller\n:\ngroupId=org.apache.tomcat\nartifactId=tomcat\nversion=6.0.24\npackaging=installer\nOf course, Ant scripts have much more uses than skipping base directories; for instance, you can use one if your tool artifact is an executable file.\nConfiguring POM\n\nEach development environment is described by a Maven POM:\n<project>\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>com.mycompany</groupId>\n  <artifactId>myproject</artifactId>\n  <version>1.0</version>\n  <packaging>pom</packaging>\n\n  <repositories>\n    <repository>\n      <!--\n        Define your custom tool repository here.\n      -->\n    </repository>\n  </repositories>\n  <pluginRepositories>\n    <pluginRepository>\n      <!--\n        Define the repository containing the DevTools plugin here.\n      -->\n    </pluginRepository>\n  </pluginRepositories>\n\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>net.sf</groupId>\n        <artifactId>maven-devtools-plugin</artifactId>\n        <configuration>\n          <!--\n            The base directory for tool installations:\n          -->\n          <toolsDirectory>E:/tools</toolsDirectory>\n        </configuration>\n      </plugin>\n    </plugins>\n  </build>",
  "speaker": "SYSTEM",
  "uuid": "29b7cc77-8459-43eb-b5eb-310d8e896d11"
}