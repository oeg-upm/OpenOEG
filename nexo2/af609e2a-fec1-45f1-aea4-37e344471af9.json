{
  "message": "SYSTEM: BUSQUEDA.pdf: Página 98\nBÚSQUEDA \n \n98 \nJ. Rubio / P.R. Muro / J. Bañares \n \nOctubre 2004 - Curso 2004-2005 \ntan sólo los esquemas de escalada necesitarían alguna modificación ligeramente \nmayor para adaptarse a la nueva estructura). \nEl cambio más importante consiste en mantener una única lista, llamada NODOS, \nque almacene todos los nodos que van siendo generados en el proceso de \nbúsqueda. Los nodos permitirán ahora acceder al menos a 5 informaciones: \nestado, padre, g, h y ubicacion. La nueva información ubicacion sólo puede \ntener como valor los símbolos ABIERTOS o CERRADOS. Podemos decir que en la \nlista NODOS van a convivir las dos listas de ABIERTOS y CERRADOS, \ndistinguiéndose sus respectivos miembros por el valor de ubicacion.  \nSerá por tanto necesario añadir para los nodos dos nuevas operaciones, una de \nacceso: \n(defun ubicacion-de-nodo (nodo) ...) --> ABIERTOS o CERRADOS \ny otra de modificación: \n   (defun modifica-ubicacion (nodo nueva-ubicacion) ...)  \n   --> indefinido \nademás de cambiar la cabecera de crea-nodo: \n   (defun crea-nodo (estado padre g h ubicacion) ...)  \n   --> nodo \nUna vez comprendida la nueva estructura de almacenamiento, no es difícil modificar \nel esquema de búsqueda para implementar los algoritmos A. Trascribimos a \ncontinuación los fragmentos Lisp fundamentales. \n \n;; Esquema generico A: \n \n(defun busqueda () \n  (let ((NODOS (list (crea-nodo-inicial)))) \n    (do ((el-nodo (selecciona NODOS) (selecciona NODOS))) \n        ((or (eq el-nodo NIL) (estado-objetivo? (estado-de-nodo el-nodo))) \n         (if (eq el-nodo NIL) \n             (solucion-no-encontrada) \n           (escribe-solucion el-nodo))) \n      (modifica-ubicacion el-nodo 'CERRADOS) \n      (setq NODOS (append (expandir-nodo el-nodo NODOS) NODOS)) \n      (informacion-proceso-busqueda el-nodo)))) \n \n; Representacion de los nodos e implementacion de las operaciones: \n \n(defstruct nodo estado padre g h ubicacion) \n \n(defun crea-nodo (estado padre g h ubicacion) \n  (make-nodo :estado estado \n             :padre padre \n             :g g \n             :h h \n             :ubicacion ubicacion)) \n \n(defun estado-de-nodo (nodo)  \n  (nodo-estado nodo)) \n \n",
  "speaker": "SYSTEM",
  "uuid": "af609e2a-fec1-45f1-aea4-37e344471af9"
}