{
  "message": "SYSTEM: Eswc2010webofdatatrack_submission_2.pdf: Página 2\ndifferent endpoints (e.g. in our example, we would first query DBPedia to obtain the \nband names, then we may let users filter these results, then each of these results/URIs \nwould be used in follow up queries to the BBC SPARQL endpoint, the results would \nbe joined in the presentation layer, and so on), others are based on querying a central \ncollection of datasets where all the data is stored in a single location6, others use \nquery mediation and federation systems (e.g. SemWIQ [11], DARQ [14], Networked \nGraphs [15]) and other more recent approaches follow an automated link traversal \napproach over the Web of Linked Data (e.g. Hartig and colleagues’ proposal [8]).  \nWe will now describe briefly some of these approaches: SemWIQ, DARQ, \nNetworked Graphs and Hartig and colleagues’. We will not focus on those operating \nover partial or complete stored copies of existing datasets, since our assumption is \nthat distributed datasets may change at their own pace and we are not interested in \ndevising synchronization mechanisms, caches, etc., even if a pure distributed \napproach to querying will obviously have more performance constraints. \nSemWIQ [11] is a mediator-wrapper based system, where heterogeneous data \nsources (available as CSV files, RDF datasets or relational databases) are accessed by \na mediator through wrappers. Queries are expressed in SPARQL and consider OWL \nas the vocabulary for the RDF data. SemWIQ uses the Jena’s SPARQL processor \nARQ to generate query plans and it applies its own optimizers. These optimizers \nmainly consist in rules to move down filters or unary operators in the query plan, \ntogether with join reordering based on the application of an iterative dynamic \nprogramming algorithm. The system has a registry catalog that indicates where the \nsources to be queried are and the vocabulary to be used. Currently the system does not \nhandle SPARQL endpoints but this is being updated at the time of writing this paper. \nDARQ [14] is a SPARQL query federation system, which also extends the Jena’s \nSPARQL processor ARQ. This extension requires attaching a configuration file to the \nSPARQL query, with information about the SPARQL endpoint, vocabulary and \nstatistics. DARQ applies logical and physical optimizations, focused on using rules \nfor rewriting the original query before query planning (so as to merge basic graph \npatterns as soon as possible) and moving value constrains into subqueries to reduce \nthe size of intermediate results. Unfortunately DARQ is no longer maintained. \nNetworked Graphs [15] also follows a SPARQL query federation approach \n(Distributed SPARQL7), based on the creation of graphs for representing views, \ncontent or transformations from other RDF graphs, and allowing the composition of \nsets of graphs to be queried in an integrated manner. The implementation considers \noptimizations such as the application of distributed semi-join optimization algorithms.  \nFinally, Hartig and colleagues [8] propose a more novel model that tries to exploit \nthe navigational structure of the Web of Data, by incrementally executing queries \nover it. They discover new URIs from the initial SPARQL query and populate a local \nRDF repository, which is queried again for new answers to the initial query. Although \nthis approach looks promising, the optimizations that are being applied for the time \nbeing are still naïve, and there are inherent limitations related to the fact that it is \nfocused on exploiting the navigational nature of the Web of Data. \n                                                           \n6 http://lod.openlinksw.com/sparql \n7http://www.uni-koblenz-\nlandau.de/koblenz/fb4/institute/IFI/AGStaab/Research/systeme/DistributedSPARQL \n",
  "speaker": "SYSTEM",
  "uuid": "3f7e53b4-d074-410f-a049-1c371f8c43aa"
}