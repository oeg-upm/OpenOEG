{
  "message": "SYSTEM: BUSQUEDA.pdf: Página 63\nBÚSQUEDA \n \n63 \nJ. Rubio / P.R. Muro / J. Bañares \n \nOctubre 2004 - Curso 2004-2005 \nEjercicios.  \n1) Supóngase conocido un predicado:  \n \n(defun estados-iguales? (estado1 estado2) ...) \n \nque decide si dos estados son iguales. Se pide: \n \n \n \na) Programar una función Lisp \n \n \n \n(defun esta-estado? (estado lista-estados) ...) \n \n \n \nque decida si un estado se encuentra en una lista de estados. \n \n \n \nb) Programar una función Lisp \n \n \n \n(defun aparece-estado? (estado lista-nodos) ...) \nque decida si un estado está asociado a alguno de los nodos de una lista (habrá que \nutilizar la función estado-de-nodo). \n2) Usar las funciones del ejercicio anterior, para redefinir la función expandir-\nnodo en el caso del problema de las garrafas, de modo que los pasos 7' y 7'' del \nanterior algoritmo sean incorporados. Obsérvese que la cabecera de la función debe \ncambiar, pues solamente darán lugar a nuevos nodos los estados que no aparezcan \nen ABIERTOS o estén en cerrados. Una posible cabecera es: \n \n(defun expandir-nodo (nodo lista-nodos lista-estados) ...) \nProgramar también la función estados-iguales? para el problema de las \ngarrafas. \n3) Escribir en Common Lisp la función que correspondería al algoritmo de \nbúsqueda en grafo (utilizará expandir-nodo con la nueva cabecera). \n4) Usando la función del ejercicio (2) y el esquema del (3), compárese el proceso \nde búsqueda para el problema de las garrafas con el obtenido para ese mismo \nproblema con la búsqueda en anchura en árbol. \nUtilizando para el problema del 8-puzzle la estrategia de búsqueda en anchura en \ngrafo es posible obtener un árbol de búsqueda como en el que aparece recogido en \nla figura 4. \n \n",
  "speaker": "SYSTEM",
  "uuid": "1ec99a63-f235-4e76-89a7-0a7c11b6d741"
}