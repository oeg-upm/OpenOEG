{
  "message": "SYSTEM: NeOn_2007_D5.3.1.pdf: Página 39\nD5.3.1 NeOn Development Process and Ontology Life Cycle \nPage 39 of 111 \ninto account the different needs of the users and meets user's evolving requirements has to be \nfound. \n4. Revision. Then, the board revises the ontology by deciding which changes are applied to the \nontology [21]. The board should regularly revise the shared ontology, so that local ontologies do \nnot diverge too far from the shared ontology. Therefore, the board should have a well-balanced \nand representative participation of the different kinds of participants involved in the process. \n5. Local update. In the last step the stakeholders update their local ontologies based upon the \nrevised version of the ontology [21]. Once a new version of the shared ontology is released, users \ncan update their own local ontologies to better use the knowledge represented in the new version. \nEven if the differences are small, users may rather reuse e.g. the new concepts instead of using \ntheir previously locally defined concepts that correspond to the new concepts represented in the \nnew version. \n2.7. Ontology Engineering: Life Cycle Models \n2.7.1. Ontology life cycle model in METHONTOLOGY \nMETHONTOLOGY methodology [26, 14] was developed within the Ontology Engineering Group \nat Universidad Politécnica de Madrid. This methodology enables the construction of ontologies at \nthe knowledge level. METHONTOLOGY is based on the main activities identified by the software \ndevelopment process [3] and in Knowledge Engineering methodologies [58, 34]. This methodology \nincludes: the identification of the ontology development process (already presented in Section 2.6), \na life cycle based on evolving prototypes (to be presented in this section), and techniques to carry \nout each activity in the management, development-oriented, and support activities (to be presented \nin the state of the art in D5.4.1). \nAs mentioned in Section 2.6, the ontology development process does not identify the order in \nwhich the activities should be performed. This is the role of the ontology life cycle. The ontology life \ncycle identifies when the activities should be carried out, that is, it identifies the set of stages \nthrough which the ontology moves during its life time, describes what activities are to be performed \nin each stage and how the stages are related (relation of precedence, return, etc.). \nMETHONTOLOGY proposes an ontology building life cycle based on evolving prototypes because \nit allows adding, changing, and removing terms in each new version (prototype). For each \nprototype, METHONTOLOGY proposes to begin with the schedule activity that identifies the tasks \nto be performed, their arrangement, and the time and resources needed for their completion. After \nthat, the ontology specification activity starts and at the same time several activities begin inside \nthe management (control and quality assurance) and support processes (knowledge acquisition, \nintegration, evaluation, documentation, and configuration management). All these management \nand support activities are performed in parallel with the development activities (specification, \nconceptualization, formalization, implementation and maintenance) during the whole life cycle of \nthe ontology. \nOnce the first prototype has been specified, the conceptual model is built within the ontology \nconceptualization activity. This is like assembling a jigsaw puzzle with the pieces supplied by the \nknowledge acquisition activity, which is completed during the conceptualization. Then the \nformalization and implementation activities are carried out. If some lack is detected after any of \nthese activities, we can return to any of the previous activities to make modifications or \nrefinements.  \nFigure 10 shows the ontology life cycle proposed in METHONTOLOGY, and summarizes the \nprevious description. Note that the activities inside the management and support processes are \ncarried out simultaneously with the activities inside the development process. \n2006–2007 © Copyright lies with the respective authors and their institutions. \n \n",
  "speaker": "SYSTEM",
  "uuid": "ef7e2665-d579-4777-8ee8-864682048134"
}