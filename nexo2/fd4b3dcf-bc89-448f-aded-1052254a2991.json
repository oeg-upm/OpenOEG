{
  "message": "SYSTEM: Planing_Scheduling.pdf: PÃ¡gina 4\nTable 2. Model phases, processes and activities \nInitiation Phase \nO. Requirements Specification Scheduling \nO. Evaluation \nReuse Phase \nNOR Reuse  \nO. Search  \nO. Reuse  \nO. Statements Reuse  \nO. Evaluation \nMerging Phase \nO. Aligning  \nO. Evaluation \nReengineering \nPhase \nNOR Reengineering \nO. Modularization  \nO. Evaluation  \nDesign Phase \nO. Conceptualization \nO. Evolution  \nO. Localization \nO. Evaluation \nImplementation \nPhase \nO. Evaluation  \nMaintenance \nPhase \nO. Evaluation \n \n4.3. Dependencies of processes and activities \n \nThe preliminary order in which processes and activities \nshould be performed is determined by the three \nfollowing major factors: \n1) The selected ontology network life cycle model \ndictates an initial ordering of processes and \nactivities, based on the order in which model \nphases should be performed.  \n2) The availability of output information from one \nprocess or activity could affect the start of another \nprocess or activity. For example, the ontology \nrequirements specification activity should be \nperformed before the scheduling one. \n3) Processes and activities might be executed in a \nparallel way. For example, the ontological \nresource reuse could be performed in parallel with \nthe non-ontological resource reuse rather than in \nserial execution if there are enough developers to \ncarry out the reuse in a parallel fashion. \nThese dependencies have been represented in \nscheduling templates in the form of Gantt charts. The \nscheduling templates show ontology project default \nplans based on the different and possible combinations \namong life cycle models, scenarios [9], and processes \nand activities. We have identified and represented 112 \ntemplates that can be used as preliminary schedules. \nFigure 2 shows one of the scheduling templates. This \ntemplate is used when the model is the 6-phase \nwaterfall and the reuse of non-ontological resources, \nontological resources, and ontology design patterns, as \nwell as the localization of the ontology are considered.  \n \n \nFigure 2. Example of a scheduling template \n \n5. gOntt description  \n \ngOntt is a tool for scheduling and executing \ndevelopment projects. It is implemented as a NeOn \nToolkit2 plug-in with the following main features: \n (a) It uses templates oriented to schedule ontology \ndevelopments.  \n(b) It generates the scheduling of ontology \ndevelopments in the form of Gantt charts following the \nbasis presented in Section 4. \n(c) It informs ontology developers about how to \ncarry out a process or an activity using prescriptive \nmethodological guidelines. It also informs about the \nspecific NeOn Toolkit plug-ins to be used.  \nWe describe gOntt functionalities for scheduling \nontology projects and for helping in their executions. \n \n5.1. Scheduling an ontology development \n \ngOntt provides support to ontology developers so \nthat they can (a) decide which ontology life cycle \nmodel is the most appropriate for building their \nontologies (waterfall or iterative-incremental) and \nwhich processes and activities should be carried out \nand in which order (e.g., specifying ontology \nrequirements before reengineering a knowledge \nresource into an ontology), and (b) create a graphical \nrepresentation in the form of a Gantt chart with the \nprocesses and activities needed, including time \nrestrictions between them. Schedules for ontology \ndevelopment projects can be created either from \nscratch or in a guided way. \nFrom scratch: gOntt allows the developer to \ninclude processes, activities, phases, as well as \nrestrictions among them, according to his needs. \n                                                           \n2 http://www.neon-toolkit.org/ \n",
  "speaker": "SYSTEM",
  "uuid": "fd4b3dcf-bc89-448f-aded-1052254a2991"
}