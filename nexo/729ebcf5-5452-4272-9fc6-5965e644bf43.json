{
  "message": "SYSTEM: BUSQUEDA.pdf: Página 102\nBÚSQUEDA \n \n102 \nJ. Rubio / P.R. Muro / J. Bañares \n \nOctubre 2004 - Curso 2004-2005 \nPor otra parte, si n es un nodo, el valor de h sólo depende del estado e = estado(n), \npor lo que lo denotaremos h(e). Se le denomina término heurístico. Se interpreta \ncomo una estimación del mínimo coste entre los de los caminos que van desde e \nhasta algún estado objetivo. Se trata de una función de evaluación estática (que en \nla implementación Lisp denominamos funcion-heuristica) que depende del \nconocimiento que tengamos sobre el problema a resolver. \nSi e es un estado desde el que podemos encontrar algún camino hasta alguno de \nlos estados objetivo, definimos:  \nh*(e) = mínimo {coste(C); C es un camino de e hasta alguno de los estados \nobjetivo}. \nEn general, h y h* no son comparables. Es decir, no se verifica que h(e) <= h*(e) \npara todo e, ni tampoco h(e) >= h*(e) para todo e. \nSi e es un estado tal que existe un camino solución que pasa por él, definimos: f*(e) \n= g*(e) + h*(e), que es el mínimo de los costes de todos los caminos solución que \npasan por e. El mínimo de f*(e) para todos los estados e (para los que está definido \nf*) será el coste de cada una de las soluciones óptimas. En general, f*(e) y f(n) = \ng(n) + h(e), con e = estado(n), no serán comparables, por no serlo h y h*. \nEn la mayoría de las ocasiones, las funciones g*, h* y f* serán muy costosas de \ncalcular (en general, requerirán búsqueda), así que deben ser interpretadas como \ndefiniciones teóricas que, en principio, no serán calculadas. De hecho, se puede \ninterpretar que la estrategia \"primero el menos costoso\" va calculando los valores \ng*(e) hasta encontrar un camino solución óptimo (se calcula por tanto también el \nmínimo de los f*(e), e implícitamente el valor h* de todos los estados que forman \nparte del camino solución). Veremos a continuación que esta interpretación no \nsiempre es cierta para los algoritmos A. \nVolvamos al ejemplo estudiado en las figuras 9 y 10. Podemos reinterpretar los \nnúmeros que allí aparecen diciendo que h(B) = 4 es mayor que h*(B) = 2, lo que \nimplica que el valor de f = g + h para el nodo que corresponde a B (3 + 4) es mayor \nque f*(B) = 5. De hecho, el valor de f para el nodo de B es también mayor que el \nvalor de f para el primer nodo que aparece de estado O (6 + 0), por lo que al ordenar \nABIERTOS este último nodo pasa por delante del de B (incorrectamente: f*(B) es \nmenor que f del nodo que contiene en ese momento a O). \n",
  "speaker": "SYSTEM",
  "uuid": "729ebcf5-5452-4272-9fc6-5965e644bf43"
}