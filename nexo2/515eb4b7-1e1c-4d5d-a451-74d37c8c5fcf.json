{
  "message": "SYSTEM: StreamingDataAccess_ISWC2010.pdf: Página 5\nFig. 1. Ontology-based streaming data access service\nsparqlStream query, expressed in terms of the ontology, into queries in terms\nof the data sources, a set of mappings must be speciﬁed. These mappings are\nexpressed in S2O, an extension of the R2O mapping language, which supports\nstreaming queries and data, most notably window and stream operators (see\nSection 4.2). This transformation process is called query translation, and the\ntarget is the continuous query language sneeql, which is expressive enough to\ndeal with both streaming and stored sources.\nAfter the continuous query has been generated, the query processing phase\nstarts, and the processor will deploy distributed query processing techniques [17]\nto extract the relevant data from the sources and perform the required query\nprocessing, e.g. selection, projection, and joins. Note that query execution in\nsources such as sensor networks may include in-network query processing, deliv-\nery of data between sources may be pull or push based, and other data source\nspeciﬁc settings. The result of the query processing is a set of tuples that the\ndata translation process transforms into ontology instances.\nThis approach requires several contributions and extensions to the exist-\ning technologies for continuous data querying, ontology-based data access, and\nsparql query processing. This paper focuses on a ﬁrst stage that includes the\nprocess of transforming the sparqlStream queries into queries over the streaming\ndata sources using sneeql as the target language. The following sections provide\nthe syntax and semantics for the querying of streaming rdf data and the map-\npings between streaming sources and an ontology. We will then provide details\nof an implementation of this approach.\n4\nQuery and Mapping Syntax\nIn this section we introduce the sparqlStream query language, an extension to\nsparql for streaming rdf data, which has been inspired by previous proposals\nsuch as c-sparql [9] and sneeql [15]. However, signiﬁcant improvements have\nbeen made that correct the types supported and the semantics of windowing\n5\n",
  "speaker": "SYSTEM",
  "uuid": "515eb4b7-1e1c-4d5d-a451-74d37c8c5fcf"
}