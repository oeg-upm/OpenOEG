{
  "message": "SYSTEM: Neon_2008_d2.2.2.pdf: Página 112\nPage 112 of 124\nNeOn Integrated Project EU-IST-027595\nSimilarly for an instance, if it exists elsewhere as an instance, NEBOnE will add the new instance but generate\na notiﬁcation message. If the item already exists as a class, and an instance of the same name is to be added,\nor vice versa, then NEBOnE will not generate the new instance/class and will produce a warning message.\nThus NEBOnE ensures consistency in the ontology, avoiding the need to run a checker after the ontology\nhas been modiﬁed. A user can of course choose to ignore any potential inconsistencies, by checking the\ngenerated messages and then manually adding any offending items or making other changes to the ontology.\n7.3.3\nImplementation of NEBOnE\nOnce the text has been pre-processed, a JAPE transducer processes each sentence in the input text and\nmanipulates the ontology appropriately. This PR refers to the contents of the ontology in order to analyse\nthe input sentences and check for errors; some syntactically identical sentences may have different results if\nthey refer to existing classes, existing instances, or non-existent names, for example.\nThe canonical feature—from which the name of a new class or instance is derived—is the concatenation of\nthe string values of the tokens and underscores for the space-tokens (which can represent literal spaces,\ntabs or newlines), or the token lemmas.\nThe Java code that tests chunks in the input text against existing classes and instances in the ontology\nreturns a match if any of the three features of the chunk (canonical, root or string) is case-insensitively\nequal to any of those features of an existing class or instance; for example, the chunks ’multiword\nexpressions’ and Multiword expressions match each other, although the class name in the\nontology varies according to which one is ﬁrst used to create the class.\n7.3.4\nNEBOnE functions\nIn this section, we describe the main functions from NEBOnE that we use in our application. These are\nbased on the functions developed for CLOnE, but with some differences (described below).\nCreate a new class\ne.g., There are universities.\nFor each chunk, create a new class (University) immediately under the top class.\nCreate a new instance\ne.g., ’University of Sheffield’ is a university.\nFor each chunk, create an instance (University_of_Sheffield of the class (University). If the\nclass University does not exist in the ontology, create it spontaneously (immediately under the top class).\nIf the instance and class already exist, make the instance a member of the speciﬁed class (in addition to other\nclasses it already belongs to—both NEBOnE and the GATE Ontology API allow this).\nCreate a new subclass\ne.g., Dogs are a type of mammal.\nMake each chunk (Dog) a subclass of the superclass chunk (Mammal); create any required classes that\ndo not already exist in the ontology. This function creates subclass-superclass relations between existing\nclasses too (both NEBOnE and the GATE Ontology API support multiple inheritance).\n",
  "speaker": "SYSTEM",
  "uuid": "b30ccac1-46ee-4df9-97c4-cb330e7be879"
}