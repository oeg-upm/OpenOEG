{
  "message": "SYSTEM: Iswc10_gracia.pdf: Página 9\nrelations to infer a preliminary set of mappings. For example, let us suppose that the\nuser model has a concept labelled Death that is grounded to the DBpedia term Mortal-\nity rate9, and the reference model has a concept labeled Mortality that is also grounded\nto the same DBpedia resource Mortality rate. Therefore, as they share the same mean-\ning, we can infer that Death and Mortality are equivalent terms (which can be expressed\nusing owl:EquivalentClass). The next steps in the process depend on the particular tech-\nnique:\nOntology Matching. The set of mappings inferred from the shared groundings are\nutilized, jointly with the user and reference models, as input of an ontology matching\ntool [18], to generate more pairs of equivalent terms. This enriched set of mapped terms\nare used to give two types of feedback:\nImprovements of terminology. Two terms that have been deemed equivalent in the\nontology matching process should share the same label and grounding. By comparing\nthe user terms with their equivalent reference terms we are able to detect these dif-\nferences and suggest a better option to the user. As an example of this, if a user has\nan entity labelled Sustainable biomass but the equivalent term in the reference model\nhas the label Carrying capacity, the system suggests to the user the replacement of the\ncurrent label by the one used in the reference model.\nMissing or superﬂuous ontological elements. In this type of feedback, we use the\nset of mappings to ﬁnd missing ontological elements in the user model, as well as el-\nements that might be not necessary. The concepts of the reference model that have no\nequivalence in the user model are suggested to the user in order to enrich the model. On\nthe other hand, those user terms with no equivalence in the reference model might be\nsuperﬂuous and hence proposed to be removed from the model.\nSemantic Reasoning. We create a temporary ontology by mixing both the user and\nreference models with the set of previously found equivalences. Then, a semantic rea-\nsoner is applied10 to detect inconsistencies between hierarchies. For example, let us\nsuppose that the user model deﬁnes whale as subclass of ﬁsh. However, the reference\nmodel states that the equivalent term whale is subclass of mammal, and mammal and\nﬁsh have been declared as disjoint classes. Therefore, these two statements are inconsis-\ntent. The system informs about this situation, so that the user can review the hierarchy\nand change it accordingly.\nStructure Comparison. Besides ontology-based comparisons, we also exploit the par-\nticular semantics of the QR vocabulary to perform more QR-speciﬁc comparisons be-\ntween the models. In fact, we can identify common model structures that are present in\nthe reference model but not in the user model, thus revealing the differences between\nmodel structures. These missing structures can modify the ﬁnal behaviour of the model.\nTo detect them, we make a structural comparison between the models. First, patterns in\nthe reference model are searched; then, by means of the set of mappings, we look for\n9 http://dbpedia.org/resource/Mortality rate\n10 We use Jena built-in reasoner in our current prototype (http://jena.sourceforge.net/inference/),\nthough any other reasoner can be used.\n",
  "speaker": "SYSTEM",
  "uuid": "2bb16b0f-3925-45b1-a2bc-99658976ab42"
}