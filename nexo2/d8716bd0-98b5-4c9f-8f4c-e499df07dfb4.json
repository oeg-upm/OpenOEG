{
  "message": "SYSTEM: BUSQUEDA.pdf: Página 42\nBÚSQUEDA \n \n42 \nJ. Rubio / P.R. Muro / J. Bañares \n \nOctubre 2004 - Curso 2004-2005 \nde O a E). El modo concreto en que se organice ese condicional dependerá de las \ndecisiones de diseño que hayamos adoptado previamente. En particular, esta \nversión del algoritmo parece excluir que un mismo operador pueda ser aplicado \nvarias veces sobre el mismo estado (véase el ejemplo del sistema de reescritura \ntratado en 2.5), pero no es difícil adaptarla para que cubra todos los casos. \nEl tipo de búsqueda depende del paso número 7 del algoritmo anterior. Se tratará de \nbúsquedas no informadas si el algoritmo no conoce nada del problema en concreto \nque debe resolver. En nuestro contexto eso quiere decir que el paso 7 se realiza con \ncriterios independientes del dominio del problema. \nUn concepto importante que aparece cuando la estrategia de control reposa sobre la \nnoción de nodo es el de árbol de búsqueda. El árbol de búsqueda es la estructura \ncombinatorial que va siendo construida en el proceso de búsqueda. Sus vértices son \nnodos y existe una arista dirigida de un nodo a otro si el segundo es construido a \npartir del primero en el paso 7 del algoritmo anterior. Esta noción está íntimamente \nrelacionada con la de espacio de estados, pero es necesario no confundir ambas. En \nparticular, la estructura combinatorial construida en la ejecución del algoritmo es \nsiempre un árbol puesto que los nodos en el paso 7 son contruidos y no reutilizados. \nEsto es independiente de que nodos distintos (porque han sido construidos en \ndistintos momentos de la ejecución) tengan asociado el mismo estado. Si esta \nsituación se produce, significa que en el espacio de estados hay ciclos (dirigidos o \nno) y por tanto que se trata de un grafo de estados y no de un árbol de estados. \nOtra noción importante es la de profundidad de un nodo (en el árbol de búsqueda): \nse trata del número de aristas que tiene el camino que lo une con el nodo raíz (ese \ncamino es único, por tratarse de un árbol). \n \n3.2. Búsqueda en anchura. \nEn este tipo de búsqueda, el paso 7 del algoritmo anterior se particulariza del \nsiguiente modo: los nuevos nodos son añadidos al final de la lista ABIERTOS. Así se \nconsigue que los nodos en ABIERTOS estén ordenados según su profundidad, en \norden decreciente: los menos profundos al principio, los más profundos al final. La \nlista ABIERTOS tiene de este modo una forma de acceso que la convierte en una \ncola (o fila de espera): los datos que primero entran (paso 7) son los primeros en \nsalir (paso 3).  \n",
  "speaker": "SYSTEM",
  "uuid": "d8716bd0-98b5-4c9f-8f4c-e499df07dfb4"
}