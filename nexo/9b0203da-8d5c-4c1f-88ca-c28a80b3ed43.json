{
  "message": "SYSTEM: D5.3.1-v1.0.pdf: Página 29\nD5.3.1 NeOn Development Process and Ontology Life Cycle \nPage 29 of 111 \n2006–2007 © Copyright lies with the respective authors and their institutions. \n \n¾ Business risks are risks that affect the organization developing or procuring the \nsoftware (e.g., when a competitor introduces a new product in the market). \n Implementation: a prototype based on the requirements is developed. \n Evaluation: the user evaluates the prototype. If the user is satisfied, the project ends; if not, \nnew requirements are included in the following iteration. \nIn a nutshell, the main difference between the spiral model and other life cycle models is the \nexplicit recognition of risk. Informally, risk simply means something that can go wrong [52]. This \nmodel has an approach driven by the risk. In each cycle, a risk analysis is carried out to identify \npossible situations causing the project failure and to focus first on the software aspects with more \nrisk. \n2.3.8. Extreme programming life cycle model \nThe Extreme Programming1 (XP) [13] is a lightweight methodology for software development, \nwhich emphasizes customer involvement and team work, and targets small to medium sized teams \nbuilding risky software projects with dynamic requirements.  \nKey aspects of XP are: customer satisfaction, daily releases and tests. The software project is \nmanaged as a small pieces puzzle, a way to approach software development that mainly \ndifferentiates XP from other traditional software development methodologies.  \nSoftware requirements are collected by means of user stories that are written by the customers as \n“things that the systems has to do”. User stories consist of two or three sentences and drive the \ncreation of acceptance tests.  \nThe four basic activities in the XP life cycle model are coding, testing, listening, and designing. \nThere is no special order for them, all happen in parallel. \n Coding means to constantly create the simplest possible solutions for tasks based on single \nuser stories, or possibly a few related stories at once. Coding is performed by pairs of \nprogrammers working together. \n Testing means creating executable test scripts even before coding starts. They are run \ndaily, and the number of them that succeed measure the velocity of the project. \n Listening means meeting users regularly, and taking down user stories from them. These \nform the basis of both coding and testing. \n Designing means to apply design patterns and going over the code and ‘refactoring' it in \norder to remove any duplications or inelegant constructs. \nXP methodology is an iterative process. It consists in applying 12 basic rules, which are also called \nXP practices. \n Planning game2: is related to the project planning activity and is aimed at defining a release \nplan (user stories to be implemented for each release, and their dates). The planning \nactivity is treated as a game with a goal, playing pieces, players, and rules for allowable \nmoves. The playing pieces are the user stories. They are estimated, and based on such \nestimates a number of them are put into production. The goal of the planning game is to put \nthe larger number of stories in production over the game time. The Planning game is an \niterative process itself, and has three phases: exploration, commitment, and steering. The \nrelease plan provides the set of stories from which the customer will choose during the \niteration planning meeting whose aim is to plan releases for the next iteration. \n                                                 \n1 http://www.extremeprogramming.org/ \n2 http://c2.com/cgi/wiki?PlanningGame \n",
  "speaker": "SYSTEM",
  "uuid": "9b0203da-8d5c-4c1f-88ca-c28a80b3ed43"
}