{
  "message": "SYSTEM: 4_2010-2011_RDF%28S%29.pdf: Página 34\n•34\nSesame\n•\nA framework for storage, querying and inferencing of RDF \nand RDF Schema\n•\nA Java Library for handling RDF\n•\nA Database Server for (remote) access to repositories of\n•\nA Database Server for (remote) access to repositories of \nRDF data\n•\nHighly expressive query and transformation languages\n•\nSeRQL, SPARQL\n•\nVarious backends\n•\nNative Store\n•\nRDBMS (MySQL, Oracle 10, DB2, PostgreSQL)\ni\n•\nmain memory\n•\nReasoning support\n•\nRDF Schema reasoner\n•\nOWL DLP (OWLIM)\n•\ndomain reasoning (custom rule engine)\n68\nJena example. Graph creation\nhttp://.../JohnSmith\nJohn Smith\nd Gi\nd F\nil\nvcard:FN\nvcard:N\nSmith\nJohn\nvcard:Given\nvcard:Family\n// some definitions \nString personURI = \"http://somewhere/JohnSmith\"; \nString givenName = \"John\"; \nString familyName = \"Smith\"; \nString fullName = givenName + \" \" + familyName; \n// create an empty \n//\np y\nModel Model model = ModelFactory.createDefaultModel(); \n// create the resource \n// and add the properties cascading style \nResource johnSmith = model.createResource(personURI) \n.addProperty(VCARD.FN, fullName) \n.addProperty(VCARD.N, model.createResource()   \n.addProperty(VCARD.Given, givenName)\n.addProperty(VCARD.Family, familyName)); \n69\n",
  "speaker": "SYSTEM",
  "uuid": "9cfb0f85-060d-4acc-a780-230ffe92227e"
}