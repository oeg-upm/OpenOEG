{
  "message": "SYSTEM: BUSQUEDA.pdf: Página 105\nBÚSQUEDA \n \n105 \nJ. Rubio / P.R. Muro / J. Bañares \n \nOctubre 2004 - Curso 2004-2005 \nenormemente el número de operaciones a realizar por el algoritmo. Por ello es de \ngran interés encontrar una propiedad teórica (el equivalente de la \"admisibilidad\" \npara este problema) que garantice que los estados nunca serán expandidos más de \nuna vez.  \nSi nos preguntamos en la figura 11, qué anomalías o incoherencias han podido \nproducir este comportamiento del algoritmo A, veremos que no pueden tener que ver \ncon la admisibilidad de la heurística (en el ejemplo es admisible). En cambio, si \nobservamos localmente la relación entre los costes de cada arista y los valores \nheurísticos de sus extremos, notaremos ciertas inconsistencias. Por ejemplo, la \narista BC tiene coste 1, mientras que el valor heurístico de B es 4 y el de C, 1. \nParece claro que o bien B está sobrevalorado o C está infravalorado. La situación \ninconsistente es recogida en la desigualdad: h(B) > h(C) + coste-arista(B,C). \nSi esta situación no se produce diremos que se verifica la condición de monotonía. \nEs decir, h es monótona si para cada arista (ei,ej) del espacio de estados se verifica \nque \nh(ei) <= h(ej) + coste-arista(ei,ej). \nPara comprender mejor porque se denomina condición de monotonía a la \ndesigualdad anterior, observémos que si nj es un nodo obtenido por expansión de \notro ni y h es monótona, entonces f(ni) <= f(nj). En efecto, f(ni) = h(estado(ni)) + g(ni) \n<= h(estado(nj)) + coste-arista(estado(ni),estado(nj)) + g(ni) = h(estado(nj)) + g(nj) = \nf(nj). De hecho, no es difícil comprobar también que si para todo nodo ni y todo hijo \nsuyo nj se verifica f(ni) <= f(nj), entonces la heurística es monótona. \nNótese que la propiedad de monotonía es local a cada una de las aristas, mientras \nque la condición de admisibilidad se apoya en h* que requiere un conocimiento más \nglobal del espacio de estados. \nUn resultado teórico asegura que si la heurística es monótona, en la ejecución del \nalgoritmo A ningún estado volverá de CERRADOS a ABIERTOS. Por tanto, si h es \nmonótona no es necesario revisar los nodos que ya están en CERRADOS y el \ncondicional correspondiente en la versión de expandir-nodo que hemos dado en \nseudo-código puede ser eliminado. De lo anterior se sigue que CERRADOS ya no \ntiene por qué ser una lista de nodos y puede volver a ser una lista de estados. En \nconclusión, si la heurística es monótona el código que implementa el algoritmo A \npuede ser exactamente el mismo que el de \"primero el menos costoso\", salvo que \nreorganizar-nodos-a-expandir ordena ABIERTOS respecto a f = g + h, en \nlugar de respecto a g. \n",
  "speaker": "SYSTEM",
  "uuid": "8c8d4449-694b-4092-b329-f230ec9ec96b"
}