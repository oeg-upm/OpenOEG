{
  "message": "SYSTEM: NeOn_2007_D5.3.1.pdf: Página 30\nPage 30 of 111 \nNeOn Integrated Project EU-IST-027595 \n Small releases: the approach is to release new versions of the system quickly and \ncontinuously. The system is split into small pieces that are planned to be released every \ntwo weeks. \n Metaphor: the project development is guided by a shared metaphor for the system. This \napproach simplifies the definition of naming/coding conventions and allows developers to \nshare the intuition of how the overall system works. \n Simple design: the design should be simple and intuitive; the use of design pattern is key.  \n Testing: the development is test-driven. Developers write and run test first, and then code. \nEach user stories has its set of acceptance tests to be satisfied. Until this happens, the user \nstory is not considered complete. \n Refactoring: it has to be performed whenever needed and possible, in order to keep the \ncode clean and to improve system design. \n Pair programming: means that two programmers develop software side by side at one \ncomputer. Costs and benefits of pair programming are discussed and shown in [18]. \nSpecifically, the authors show through a project experience that many mistakes are caught \non the fly, the end result contains less defects, design is better and code is shorter, people \nlearn more about software development and share knowledge about all pieces of the \nsystem, people learn team working and enjoy their work more. What is more, these benefit \ncost approximately the 15% that is repaid in shorter and less expensive testing, and quality \nassurance.  \n Collective ownership: in theory, all programmers work on all pieces of the system. \n Continuous integration: integration is performed every few hours as well as testing and \nbuilding. \n 40-hours weeks: never work overtime. \n Onsite customer: direct interaction with and involvement of the customer. \n Coding standards: the use of coding patterns is key, as well as the use of design patterns. \nThey help the entire team to read and refactor code. \nFigure 6 (based on that one appearing in the XP web site3) shows the XP methodology. As a first \nstep, the team develop a Spike Architecture which is a disposable prototype. It is a very simple \nprogram used in order to explore potential solutions and evaluate risks. Based on the Release \nPlanning the needed iterations are performed. Iterations are meant to address a number of user \nstories that are implemented by following the four basic life cycle model activities, i.e. by following \na test-driven approach. Iterations include an Iteration Plan activities for the next iteration to \nperform. The software that is developed during an iteration is presented for judgment. The \nevaluation is performed by means of the Acceptance Tests that have been previously defined by \ncustomers for the user stories. If the software passes the acceptance test, it is released. \n                                                 \n3 http://www.extremeprogramming.org/ \n \n",
  "speaker": "SYSTEM",
  "uuid": "a8b1bc9d-9629-4604-89ab-a2df77551880"
}