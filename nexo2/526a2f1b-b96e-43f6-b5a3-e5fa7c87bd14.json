{
  "message": "SYSTEM: BUSQUEDA.pdf: Página 49\nBÚSQUEDA \n \n49 \nJ. Rubio / P.R. Muro / J. Bañares \n \nOctubre 2004 - Curso 2004-2005 \nes debido a que en un let podemos crear cualquier número de ligaduras locales. \nVéase como ejemplo la siguiente función que calcula la suma del doble y el triple de \nun número dado. \n \n> (defun suma-d-t (x) \n \n    (let ((doble (* 2 x)) \n \n          (triple (* 3 x))  ) \n \n      (+ doble triple))) \nEs importante entender como se comporta el evaluador respecto a la lista de listas \nque es el primer argumento para let. Se procede a evaluar cada uno de los \nsegundos miembros de las listas y tras ese proceso de evaluación se realizan las \nligaduras locales de los valores y los símbolos. Obsérvese el siguiente ejemplo: \n \n> (setq x 'exterior) \n \n===> EXTERIOR \n \n> (let ((x 'interior) \n \n \n      (y x)  ) \n \n \n     (list x y)) \n \n===> (INTERIOR  EXTERIOR) \nPor ello, no es posible reutilizar en el primer elemento de un let una variable \npreviamente definida en ese mismo let. Por ejemplo, la siguiente versión de la \nfunción anterior es incorrecta: \n \n> (defun suma-d-t (x) \n \n   (let ((doble (* 2 x)) \n \n         (triple (+ doble x))  ) \n \n        (+ doble triple))) \nporque el valor local de doble todavía no es conocido cuando se evalúa (+ doble \nx). Para conseguir el efecto deseado se pueden anidar dos let, como en: \n \n> (defun suma-d-t (x) \n \n   (let ((doble (* 2 x))) \n \n    (let ((triple (+ doble x))) \n \n     (+ doble triple)))) \no alternativamente utilizar el objeto especial let* que se comporta como let salvo \nque las ligaduras locales, entre los valores de los segundos miembros y los \nsímbolos, se producen en orden secuencial: se evalúa el primer segundo miembro, \nse realiza la ligadura con el primer símbolo, se procede a evaluar el siguiente \nsegundo miembro, etc. Véase una nueva versión correcta de la anterior función: \n",
  "speaker": "SYSTEM",
  "uuid": "526a2f1b-b96e-43f6-b5a3-e5fa7c87bd14"
}