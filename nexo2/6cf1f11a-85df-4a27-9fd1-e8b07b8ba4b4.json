{
  "message": "SYSTEM: D5.3.1-v1.0.pdf: Página 24\nPage 24 of 111 \nNeOn Integrated Project EU-IST-027595 \n \n \nFigure 3. Waterfall Life Cycle Model [52] \nThe waterfall life cycle model assumes that the requirements are completely known and without \nambiguities at the begining of the development process. Such requirements do not change along \nthe project. Therefore, this model should only be used when the requirements are well understood \nand unlikely to change radically during system development. This model is still used particularly \nwhen the software project is part of a larger systems engineering project [52]. \nThe advantages of the waterfall model are that documentation is produced at each phase, that it is \neasy to understand, and that it is easy to plan a project according to this sequential approach. \nThe main problem with this type of model is that it does not reflect clearly how the software code is \ndeveloped [46] because real projects rarely follow the sequential flow that the model proposes. \nOther problem is its inflexible partitioning of the project into distinct stages. Commitments must be \nmade at an early stage in the process, which makes it difficult to respond to changing customer \nrequirements [52]. More inconvenients of this model is that the requirements can be obsolete at the \nend of the project. And there is no software product to show to the user until the end of the project. \n2.3.2. ‘V’ life cycle model \nThe most commonly known variant of the waterfall model, the ‘V’ life cycle model [46, 8], is a \nsequential path of execution of processes, where each phase must be completed before the next \nphase begins. This model explicitly includes the observation that the result of each development \ntask must be verified in a corresponding test task. This life cycle model gives emphasis to the \nvalidation of the products in each phase. \nFigure 4 shows the graphical representation for the ‘V’ life cycle model. The symmetry between the \nleft and right sides of the model reflects the relationship between the steps on the left and the steps \non the right. The system definition that is generated on the left is ultimately used to verify the \nsystem on the right. The connections between the left and right are indicated by the arrows that \ncross the “V”, showing how plans developed on the left drive the process on the right. These \nconnections provide continuity between the beginning and end of project development and ensure \nthat the engineers are focused on the completion of the project from the beginning [10].  \nThe relation between the right and left sides of the V-model, shown in Figure 4, implies that if \nproblems are found during the verification and validation, then the left part of the ‘V’ can be \nperformed again in order to solve the problem and improve the requirements, the design and the \ncode before redoing the tests. \n",
  "speaker": "SYSTEM",
  "uuid": "6cf1f11a-85df-4a27-9fd1-e8b07b8ba4b4"
}