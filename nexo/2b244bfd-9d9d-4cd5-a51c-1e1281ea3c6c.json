{
  "message": "SYSTEM: Semantic_Annotation_of_Geospatial_RESTful_Services_Using_External_Resources_v5.pdf: Página 4\n3.1   A sample set of RESTful services in the geospatial domain \nNowadays the largest online repository of information about Web 2.0 mashups and \nAPIs is ProgrammableWeb.com. This aggregator site provides information on 4,884 \nmashups and 2,033 APIs that were registered between September 2005 and June \n2010, as of the time of the writing of this paper. Mashups tagged as “mapping” \nrepresent a 34% of the 2,229 mashups that are listed, what represents the importance \nof geospatial information in the generation of these applications. With respect to \nAPIs, GoogleMaps is the most used with a 43%, that is, this API is used on 1,983 \nmashups. These data show the importance of geospatial information in the context of \nthe REST world. The following services are two representative RESTful services in \nthe geospatial domain, taken from the aforementioned site: \n \n• \nService 1. http://ws.geonames.org/countryInfo?country=ES  \nThis service retrieves information related to a ‘country’. More specifically, it \nreturns information about the following parameters: ‘capital’, ‘population’, ‘area’ \n(km2), and ‘bounding box of mainland’ (excluding offshore islands).  \n \n• \nService 2. http://api.eventful.com/rest/venues/search?app_key=p4t8BFcLDt \nCzpxdS&location=Madrid  \nThis service retrieves information about places (venues). More specifically, it \nreturns parameters like: ‘city’, ‘venue_name’, ‘region_name’, ‘country_name’, \n‘latitude’,  ‘longitude’, etc. \n3.2   Syntactic Description: Invocation and Registration into the Repository \nAs aforementioned, RESTful services are normally described or registered in sites \nlike programmableWeb by means of their URLs, plus some natural language \ndescriptions and execution examples, if at all available. Hence, the first step in our \nsystem is to take as input the URL of an available RESTful service that is known by \nusers (for instance, it has been discovered by a user by browsing this site, or it has \nbeen sent to the user by a friend).  \nIn our system, the user adds the URLs of different services as a starting point, with \nthe objective of obtaining automatically information related to each of the \ncorresponding RESTful services. Once URLs have been added, our system invokes \nthe RESTful service with a sample of parameters, obtained from the examples that are \nnormally provided together with the URL (if this information is not available, our \nsystem cannot continue), and analyzes the response to obtain a basic syntactic \ndescription of a parameter set, which is used like inputs and outputs. \nIn this process our system uses the Service Data Object3 (SDO) API to perform the \ninvocation of the RESTful service and determine whether it is available or not. SDO \nis a specification for a programming model that unifies data programming across data \nsource types and provides robust support for common application patterns in a \ndisconnected way [22]. The invocation process is performed as follows: first, it takes \n                                                           \n3 http://www.oasis-opencsa.org/sdo \n",
  "speaker": "SYSTEM",
  "uuid": "2b244bfd-9d9d-4cd5-a51c-1e1281ea3c6c"
}