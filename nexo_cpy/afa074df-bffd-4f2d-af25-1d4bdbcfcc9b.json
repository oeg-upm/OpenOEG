{
  "message": "SYSTEM: NeOn_2007_D5.3.1.pdf: Página 17\nD5.3.1 NeOn Development Process and Ontology Life Cycle \nPage 17 of 111 \nThe terminology is presented in an incremental way, from the most simple term to the most \ncomplex one. \nA task can be defined as the smallest unit of work subject to management accountability. Another \ndefinition of task [2] can be a well-defined work assignment for one or more project members. \nRelated tasks are usually grouped to form activities. \nAn activity [3] is a defined body of work that is to be performed, including its required input and \noutput information. \nA process [1] is a sequence of steps performed for a given purpose. A process is composed of \nactivities.  \nThe software development process [1] is the process by which user needs are translated into a \nsoftware product. The process involves translating user needs into software requirements, \ntransforming the software requirements into design, implementing the design in code, testing the \ncode, and sometimes, installing and checking out the software for operational use. \nA software life cycle model [3] is the framework, selected by each organization, on which to map \nthe activities identified in the software development process to produce the software life cycle. For \nexample, waterfall model [48], evolving prototyping model [19], etc.  \nThe software life cycle [1] is defined as the period of time that begins when a software product is \nconceived and ends when the software is no longer available for use. The software life cycle \ntypically includes a concept phase, requirements phase, design phase, implementation phase, test \nphase, installation and checkout phase, operation and maintenance phase, and, sometimes, \nretirement phase. Furthermore, the software life cycle [3] is the project-specific sequence of \nactivities that is created by mapping the activities identified in the software development process \nonto a selected software life cycle model.  \n2.2. Software Engineering: Development Process  \nA software development process can be seen as a process of solving problems. That is, such \nprocess transforms an user necessity into a computable product, that satisfies the user need. \nThis section briefly summarizes three well-known Software Engineering development process: \nIEEE development process (Section 2.2.1), ISO development process (Section 2.2.2) and RUP \ndevelopment process (Section 2.2.3). \n2.2.1. IEEE development process \nAccording to IEEE [4], the 69 activities identified in the software project development process are \ngrouped administratively into five main activity groups. The full set of activities covers the entire \nsoftware life cycle from concept exploration through the eventual retirement of the software \nsystem. The main activity groups [4] are the following: \n1. Project Management Activity Group [4]. This group includes activities that initiate, monitor, \nand control a software project throughout its life cycle. For example, Project Monitoring and Control \nactivities are used to track and manage the project. During these activities, actual project \nperformance is tracked, reported, and managed against the planned performance. Special \nconsideration is given to the management of risk. This group is divided into three subgroups: \nProject Initiation, Project Planning, and Project Monitoring and Control.  \n2. Pre-Development Activity Group [4]. This group includes the activities that explore and \nallocate system requirements before the software development can begin. For example, the \n2006–2007 © Copyright lies with the respective authors and their institutions. \n \n",
  "speaker": "SYSTEM",
  "uuid": "afa074df-bffd-4f2d-af25-1d4bdbcfcc9b"
}