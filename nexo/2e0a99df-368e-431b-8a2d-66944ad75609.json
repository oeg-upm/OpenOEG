{
  "message": "SYSTEM: D5.3.2.pdf: Página 23\nD5.3.2 Revision and Extension of the NeOn Development Process and Ontology Life Cycle \nPage 23 of 48 \n2006–2009 © Copyright lies with the respective authors and their institutions. \n \nBecause of the importance of reusing and reengineering knowledge resources and merging \nontologies, five significantly different versions of the waterfall ontology network life cycle model \nhave been defined and proposed: (1) five-phase waterfall (initiation, requirement definition, \ndesign, implementation and maintenance phases), (2) six-phase waterfall that extends the \nprevious one with a new phase in which the reuse of already implemented ontological \nresources is considered, (3) six-phase + merging phase waterfall, (4) seven-phase waterfall in \nwhich the six-phase model is taken as general basis and a new phase, the reengineering one, \nis included after the reuse phase, and (5) seven-phase + merging phase. \n\u0001 Incremental model. Its main feature is that it divides the requirements in different parts and \nthen develops each part in a different cycle. The idea is to incrementally “produce and deliver” \nthe network of ontologies (fully developed and functional), that is, the ontology network grows \nin layers (in a concentric way). Figure 7.a shows how an ontology network grows using this \nmodel (the striped parts in the figure designate already developed parts). \n\u0001 Iterative model. Its main characteristic is that it divides all the requirements into small parts and \ndevelops the ontology network including requirements from all the parts. Figure 7.b shows how \nthe ontology network is developed following this model (the striped parts designate the \ndeveloped parts). \n \na. Incremental Model \n \nb. Iterative Model \nFigure 7. Schematic Vision of an Ontology Network following (a) an Incremental Model and \n(b) an Iterative Model \n\u0001 Evolving prototyping model. Its main feature is that it develops a partial product (in this case, \npartial ontology network) that meets the requirements best understood. The preliminary \nversions of the ontology network being developed (that is, the prototypes) permit the user to \ngive feedback of unknown or unclear requirements. \n\u0001 Spiral model. Its main feature is that it proposes a set of repetitive cycles based on waterfall \nand prototype models. In this model, taking into account the special characteristics of ontology \nnetworks, the ontology engineering space is divided into three sections: planning, risk analysis, \nand engineering or development. This division is based on the need to evaluate and assess all \nthe outputs of all the ontology network stages, and not only after the development phase as it \nhappens in software projects.  \nIn preliminary evaluations of the uses of the different proposed models in the collection presented \nin deliverable D5.3.1 [ 10], it was obvious that software developers and ontology practitioners had \nsome difficulties in distinguishing among incremental, iterative, evolving prototyping and spiral \nontology network life cycle models. Some problems found during the selection among the \naforementioned models referred to which model should be chosen when the requirements are not \nwell understood, fully captured, and when the development should carry out by parts. \nThus, (1) taking into account these preliminary evaluation results in which it was demonstrated that \nthe distinction among the different iterative models (incremental, iterative, evolving prototyping and \nspiral) is not easy for software developers and ontology practitioners; (2) taking into account the \nideas presented by Larman [ 6], who proposed the existence of two different models: waterfall and \niterative-incremental, and (3) taking into account the experience we had in ontology development \nin different research projects (Esperonto6, Knowledge Web7, SEEMP8, etc.) in which the main \n                                                \n6 http://esperonto.net \n",
  "speaker": "SYSTEM",
  "uuid": "2e0a99df-368e-431b-8a2d-66944ad75609"
}