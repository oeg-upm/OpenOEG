{
  "message": "SYSTEM: BUSQUEDA.pdf: Página 4\nBÚSQUEDA \n \n4 \nJ. Rubio / P.R. Muro / J. Bañares \n \nOctubre 2004 - Curso 2004-2005 \n \n> (* 3 3) ===> 9 \nEste ejemplo admite una explicación simple (el producto de 3 por 3 es 9), pero \ncontiene la mayor parte de los elementos esenciales de Lisp. Así en él aparecen, \nademás de los números, un símbolo (*) y una lista (un paréntesis que se abre \nseguido por una secuencia de elementos Lisp, separados por espacios en blanco, y \nun paréntesis que se cierra). Además se puede observar que la notación en Lisp es \nprefija: en primer lugar aparece el operador (*) y a continuación los argumentos. El \nsiguiente ejemplo nos permitirá explicar un poco mejor como ha funcionado el \nevaluador (la parte del sistema Lisp que realiza la evaluación) en este caso. \n \n> (+ (* 3 3) (* 5 5)) \n===> 34 \nEn este ejemplo la expresión introducida por el usuario es una lista compuesta por \ntres elementos Lisp: el primero es un símbolo (el operador +) y el segundo y el \ntercero son a su vez listas. Esta es una estructura típica en Lisp (la de listas \nanidadas) que conlleva una multiplicación del número de paréntesis, una de las \ncaracterísticas externas más llamativas de Lisp. Ante una expresión como la \nanterior, el evaluador, tras verificar que el primer elemento de la lista es un operador \nconocido, procede a evaluar secuencialmente el resto de elementos de la lista. En \nnuestro caso, la evaluación de (* 3 3) produce 9 y la de (* 5 5) produce 25. A \nlos resultados así obtenidos se les aplica el operador de la lista inicial (+) y se \nobtiene el resultado final, 34. Obsérvese que el evaluador es recursivo: se llama a sí \nmismo para evaluar los \"argumentos\". En cambio, el bucle de lectura-evaluación-\nescritura no es recursivo. En particular, nótese que los resultados de la evaluación \nde (* 3 3) de (* 5 5) no han sido escritos en la pantalla. La evaluación de esas \nexpresiones (y por tanto la dada en el segundo ejemplo) responde exactamente al \nmismo patrón explicado para la entrada más compleja: se comprueba que el primer \nelemento de la lista es un operador (*) y se procede a evaluar los argumentos; pero, \ncomo ya hemos indicado, un número es evaluado a sí mismo, con lo que \nreencontramos la explicación simple dada más arriba (el producto de 3 por 3 es 9). \nEl ejemplo anterior recoge ya la mayor parte de la sintaxis y de la descripción del \ncomportamiento de los programas Lisp. Pero si tuviesemos que limitarnos a utilizar \nlos operadores predefinidos del lenguaje tendríamos una capacidad expresiva no \nmucho mayor que la de una calculadora (sofisticada) de bolsillo. Sin embargo, Lisp \npermite la definición de funciones de usuario que van a facilitar un desarrollo por \nrefinamientos sucesivos de programas complejos y van a ser la herramienta \nfundamental de organización del software en Lisp. Veamos un ejemplo: \n \n> (defun cuadrado (x) \n \n     (* x x))   \n \n===> CUADRADO \n",
  "speaker": "SYSTEM",
  "uuid": "650ea2ea-6db1-4a05-bb7b-ece198142941"
}