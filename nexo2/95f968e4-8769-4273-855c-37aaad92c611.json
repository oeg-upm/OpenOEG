{
  "message": "SYSTEM: BUSQUEDA.pdf: Página 101\nBÚSQUEDA \n \n101 \nJ. Rubio / P.R. Muro / J. Bañares \n \nOctubre 2004 - Curso 2004-2005 \nI (5) \nA (3) \nB (4) \nO (0) \n2 \n3 \n4 \n2 \n \nFigura 9 \nEn este ejemplo, la estrategia A ha encontrado un camino solución óptimo, pero, en \ngeneral, no tiene por qué ser así. Con el espacio de estados de la figura 9 se obtiene \nel árbol de búsqueda de la figura 10, donde puede comprobarse que el camino \nsolución encontrado no es el óptimo. \nI, 0, 5 \nA, 2, 3 \nB, 3, 4 \nO, 6, 0 \n1 \n2 \n3 \n \nFigura 10 \nSi nos preguntamos cuál es la razón por la que en este segundo ejemplo la solución \nóptima no es encontrada, veremos que la causa es que el valor heurístico de B, h(B) \n= 4, es demasiado grande (se puede ir hasta O con coste 2). Ello hace que la \nordenación respecto a f = g + h en ABIERTOS resulte engañosa y el nodo de estado \nA pase por delante del nodo de estado B, perdiéndose el camino óptimo. \nPara generalizar este análisis, introduzcamos algunas nociones teóricas. Si n es un \nnodo, el valor de g para n, denotado g(n), es el coste del camino \"contenido en n\" \ndesde el estado inicial e0 hasta e = estado(n). Puesto que en el algoritmo A se \nrevisan los nodos respecto a g, resulta que g(n) es el coste mínimo entre todos los \ncaminos desde e0 hasta e que hayan aparecido hasta ese momento. \nSi e es un estado tal que existe un camino desde e0 hasta él, definimos:  \ng*(e) = mínimo {coste(C); C es un camino de e0 a e}. \nSegún la observación anterior, se verificará que g(n) >= g*(e) para todo nodo n tal \nque estado(n) = e. \n",
  "speaker": "SYSTEM",
  "uuid": "95f968e4-8769-4273-855c-37aaad92c611"
}