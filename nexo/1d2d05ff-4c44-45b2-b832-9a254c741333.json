{
  "message": "SYSTEM: BUSQUEDA.pdf: Página 12\nBÚSQUEDA \n \n12 \nJ. Rubio / P.R. Muro / J. Bañares \n \nOctubre 2004 - Curso 2004-2005 \n \n> (equal 'a 'b) \n===> NIL \n \n> (equal 'a 'a) \n===> T \nLa función predefinida equal sirve para determinar si dos elementos Lisp son \niguales. Existe otro operador de comparación de la igualdad que sólo puede ser \nutilizado con números: \n \n> (= 3 8)  \n \n \n===> NIL \n \n> (= 9 (cuadrado 3)) \n===> T \nAunque en Lisp no hay un \"tipado explícito\" de los datos y variables, sí que existe un \n\"tipado implícito\" que consiste en que ciertos operadores predefinidos producen error \nsi sus argumentos (definitivos: tras la evaluación) no son del tipo adecuado. Así: \n \n> (= 9 'y) \n===> ¡¡¡¡ ERROR !!!! \n \n> (= 9 y)  \n===> T \nya que, si continuamos en la misma sesión desde el comienzo del tema, \n \n> y ===> 9 \nLo mismo sucede con otros operadores numéricos, ya sean de comparación (>, <, \n>=, <=) o aritméticos (+, *, –, …). \nUna vez que conocemos ciertos predicados, podemos pasar a considerar la primitiva \ncondicional más elemental en Lisp: if. Veamos algunos ejemplos: \n \n> (setq x 7) \n===> 7 \n \n> (if (< x 5) \n \n \n 'menor_que_cinco \n \n \n 'mayor_o_igual_que_cinco) \n \n \n===> MAYOR_O_IGUAL_QUE_CINCO \n \n> (setq x 3) \n===> 3 \n \n> (if (< x 5) \n \n \n 'menor_que_cinco \n \n \n 'mayor_o_igual_que_cinco) \n \n \n===> MENOR_QUE_CINCO \nEl condicional if es un elemento especial. Tiene tres argumentos, de los cuales el \nprimero (la condición) será siempre evaluado; su valor tendrá una interpretación \nbooleana. Si dicho valor es \"cierto\" (es decir, distinto de nil, la lista vacía), el \nsegundo argumento del if (la rama \"entonces\") será evaluado y su valor será \ndevuelto como valor del if; el tercer argumento del if no será evaluado. Si el valor \n",
  "speaker": "SYSTEM",
  "uuid": "1d2d05ff-4c44-45b2-b832-9a254c741333"
}