{
  "message": "SYSTEM: BUSQUEDA.pdf: Página 46\nBÚSQUEDA \n \n46 \nJ. Rubio / P.R. Muro / J. Bañares \n \nOctubre 2004 - Curso 2004-2005 \nEjercicios. Consideremos el problema de las 4 reinas. Se pide: \n1) comenzar a dibujar el espacio de búsqueda en anchura con la representación \ndel problema del apartado 2.5; \n2) modificar la definición de regla sensibilizada para evitar que se examinen \nconfiguraciones del tablero que no pueden llevarnos a una solución;  \n3) estudiar como cambia el árbol de búsqueda en anchura con la modificación del \nejercicio anterior. \nEn cuanto a la estimación de la eficacia de la búsqueda en anchura, podemos \nidentificar genéricamente la complejidad en tiempo con el número de nodos \ngenerados (esta simplificación ignora, entre otras cosas, los costes de la verificación \nde la aplicabilidad de las reglas y de aplicación de las mismas) y la complejidad en \nespacio con la longitud máxima que puede alcanzar la lista ABIERTOS. \nEn las complejidades influyen dos factores que son denotados b y d. El número b es \nel factor de ramificación (branching factor): media del número de nodos generados \ndesde un nodo. El número d mide la profundidad del estado objetivo (aquí se supone \nque existe solución): mínimo del número de aplicaciones de reglas necesarias para \nllegar del estado inicial a un estado objetivo. \nNo es difícil entonces comprobar que la complejidad en tiempo es de orden \nexponencial O(bd). Puesto que en ABIERTOS se extraen los elementos de uno en \nuno pero se añaden (en media) de b en b, concluimos que la complejidad en espacio \nes también exponencial O(bd). Esta complejidad espacial hace que el algoritmo sea \nimpracticable para problemas grandes. Por ejemplo, para el problema del 8-puzzle, b \n= 3, d = 20 y bd = 3.486.784.401. En el caso de las garrafas de vino, b = 3, d = 6, bd \n= 729. \nEn resumen, las características de la búsqueda en anchura en esta primera versión \nson las siguientes. Si existe una solución en el espacio de estados \n(independientemente de la estructura combinatorial de éste), la encuentra y además \ncon la secuencia solución más corta. Si el espacio de estados es un grafo dirigido \nacíclico la ejecución termina en todos los casos (si no existe solución, habría que \nimponer además que el grafo fuese finito), pero puede ser muy ineficaz por explorar \nen muchas ocasiones las mismas ramas (en particular, en ABIERTOS pueden \naparecer muchos nodos con el mismo estado asociado). Si el grafo tiene ciclos \ndirigidos (o es un grafo no dirigido), el algoritmo puede no terminar si no existe \nsolución y si ésta existe el algoritmo puede ser muy ineficaz por las mismas razones \n",
  "speaker": "SYSTEM",
  "uuid": "5625f0d7-53fa-4268-92ab-c73245749d35"
}