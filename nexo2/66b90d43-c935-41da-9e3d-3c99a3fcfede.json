{
  "message": "SYSTEM: 04_OntologyLanguages_RDF%28S%29.pdf: Página 39\nQuerying a model\n// List everyone in the model who has a child:\nResIterator parents = model.listSubjectsWithProperty(parentOf);\n// Because subjects of statements are Resources, the method returned a ResIterator\n//\nj\n,\nwhile (parents.hasNext()) {\n// ResIterator has a typed nextResource() method\nResource person = parents.nextResource();\n// Print the URI of the resource\nSystem.out.println(person.getURI());\n}\n// Can also find all the parents by getting the objects of all \"childOf\" statements\n// Objects of statements could be Resources or literals, so the Iterator returned\n// contains RDFNodes\nN d It\nt\nP\nt\nd l li tObj\nt OfP\nt ( hildOf)\n© O. Corcho, R.García-Castro, O. Muñoz-García\n77\nRDF and RDF Schema\nNodeIterator moreParents = model.listObjectsOfProperty(childOf);\n// To find all the siblings of a specific person, the model itself can be queried \nNodeIterator siblings = model.listObjectsOfProperty(edward, siblingOf);\n// But it's more elegant to ask the Resource directly\n// This method yields an iterator over Statements\nStmtIterator moreSiblings = edward.listProperties(siblingOf);\nUsing selectors to query a model\n// Find the exact statement \"adam is a spouse of dotty\"\nmodel.listStatements(adam,spouseOf,dotty);\n// Find all statements with adam as the subject and dotty as the object\nmodel.listStatements(adam,null,dotty);\n// Find any statements made about adam\nmodel.listStatements(adam,null,null);\n© O. Corcho, R.García-Castro, O. Muñoz-García\n78\nRDF and RDF Schema\n// Find any statement with the siblingOf property\nmodel.listStatements(null,siblingOf,null);\n",
  "speaker": "SYSTEM",
  "uuid": "66b90d43-c935-41da-9e3d-3c99a3fcfede"
}