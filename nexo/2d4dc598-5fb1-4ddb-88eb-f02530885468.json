{
  "message": "SYSTEM: Wiki: https://delicias.dia.fi.upm.es/wiki/index.php/DrInventor \n\nInstallation\n\nPrerequisites\nSome application server (Jetty\nhttp://www.eclipse.org/jetty/\nor Tomcat)\nVirtuoso open-source edition\nDownload virtuoso open-source edition (\nhttp://virtuoso.openlinksw.com/dataspace/doc/dav/wiki/Main/VOSDownload\n)\nWindows: Follow the instructions of prerequisites and installation from the virtuoso site,\nhttp://virtuoso.openlinksw.com/dataspace/doc/dav/wiki/Main/VOSUsageWindows\nLinux:\nhttp://virtuoso.openlinksw.com/dataspace/doc/dav/wiki/Main/VOSUbuntuNotes\nCreate a Virtuoso service\nCassandra. Copy the resources provided with the epnoi distribution. Add the folder to $PATH\nLinux: export PATH=$PATH:/new/path\nWindows: sistema -> configuración avanzada -> variables de entorno -> add\nSOLR. Copy the resources provided with the epnoi distribution. Add the folder to $PATH\nLinux: export PATH=$PATH:/new/path\nWindows: sistema -> configuración avanzada -> variables de entorno -> add\nDeploy in Tomcat\nCopy the .war file to the home user folder\nMove the .war file to\nmv epnoiUIA.war /var/lib/tomcat7/webapps/\nOpen in a browser:\nhttp://zavijava.dia.fi.upm.es:8080/epnoiUIA/\nDeploy in Jetty\nJetty is installed in /opt/jetty and the port has been configured to listen in 8081, in order to avoid conflicts with Tomcat.\nStart the jetty service:\nsudo service jetty start\nCopy the .war file to the home user folder\nMove the .war file to\nmv epnoiUIA.war /opt/jetty/webapps/\nOpen in a browser:\nhttp://zavijava.dia.fi.upm.es:8081/epnoiUIA/\nFunctionalities\n\nWORK IN PROGRESS\nAccording to the Presentation provided by Rafa (Dropbox\\DrInventor\\meetings\\03.CallJun2014, slide 22), the funcionalities of the repository are:\nHandling\nCRUD operations over ROs\nAnnotations: interface AnnotationHandler\nSearch\nKeyword-based faceted search\nSPARQL search\nRO Model: ??\nAnnotations\nIndexing\nScientific resources crawling\nOAI-PMH (arxiv, citeseer, pubmed)\nRSS syndicated content (feeds, blogs)\nLocal file system synchronizing capabilities (dropbox alike)\nAPI REST\n\nHandling services\n/user\nNot available\n: POST /user/create : creates a new user in the repository\nNot available\n: GET /user/{id} : retrieves the user information\nNot available\n: GET /user/{id}/allResources :  retrieves all the resources that belongs to the user {id}\nNot available\n: POST /user/delete : removes the user information from the repository\nNot available\n: POST /user/{id}/addResource :  add a new resource for the user {id}\n/resource\nNot available\n: GET /resource/all : get all the resources (\nI am not sure that this operation is useful\n)\nNot available\n: POST /resource/create : creates a new resource in the repository\nNot available\n: POST /resource/delete/{id} : removes the resources {id} from the repository\nNot available\n: POST /resource/edit/{id} : edit the information of the resource {id}\nNot available\n: GET /resource/{id} : get all the information of the resource {id}\nnext, this information can be presented to the user filtered\n/annotations\nNot available\n: GET /annotations/getAll/{topic} : get all the resources annotated as {topic}\nNot available\n: GET /annotations/getAll/ : get all the annotations\nNot available\n: POST /annotations/create : annotates a new resource\nNot available\n: POST /annotations/remove/{URI}/{topicURI} : removes the annotation {topicURI} from the resource {URI}\nin the source code there are others methods related with labels but I don't know what is the difference between annotations and labels\nSearch services\n/UIA/searchs\nGET \"\" : faceted search. retrieve a list of resources based on the query+facets+filters.\nwhat are each one? (query, facet, filter)\nNot available\n: GET \"/searchAll/{id_resource}\" gets all the resources from the information source with {id_resource}\nNot available\n: GET \"/search/\" retrieves the resources from sparql search\nIndexing services\n\"/rss\"\nNot available\n: POST \"rss/parse/\" : add a new RSS feed with {URI}\nNot available\n: GET \"rss/read/\" : reads the RSS feed with {URI}\nNot available\n: POST \"rss/edit/{ID_RSS}\" : edits the information of the RSS feed with {ID_RSS}\nNot available\n: POST \"rss/remove/{ID_RSS}\" : removes the RSS feed with {ID_RSS}\n\"/oaipmh\"\nNot available\n: POST \"oaimph/harvest/\" : harvests all the repository {name}\nNot available\n: POST \"oaimph/harvestFile\" : haverts the file {file}\nNot available\n: POST \"oaimph/add\" : add a new archive to the indexed archives\nLogin services\n/loginService\nGET /login/{ID} : no disponible\nPOST /login :  login with user and password\nNotifications services\n/users/{USER_ID}/notifications/informationSources\nGET \"\"  : gets the new subscritions from all the information sources\nGET \"/{INFORMATION_SOURCE_ID}\" : gets the new subscriptions from the information sources with ID {ID}\n/notificationsService\nGET \"/suscribe\" :\nno estoy segura de lo que hace\n/users/{USER_ID}/subscriptions/informationSources\nGET \"\" : gets all the subscritions for a user {USER_ID}\nGET \"/{INFORMATION_SOURCE_ID}\" : gets all the resources from a information source? (\nI'm not sure\n)\nUIA\n/UIA\nGET \"/status/\" : shows the information stores that are available.\nPOST \"/resources/{RESOURCE_TYPE}\" : add a new resource?\nI'm not sure but I think that the implemented method doesn't do what are suppose that it will do.\nGET \"/resources/{RESOURCE_TYPE}\" : retrieves the resource that matches the query and is a {RESOURCE_TYPE}\nGET \"/notifications/\" :\nSystem architecture\n\nProject build managed with\nMaven\n. It's used the Jetty Maven Plugin to run the web application in development mode.\nPom.xml structure\n\nPreguntar si el artifactory del grupo está accesible desde fuera\nSetting up a local repository in order to store propietary jars\nhttp://stackoverflow.com/questions/364114/can-i-add-jars-to-maven-2-build-classpath-without-installing-them\n<repository>\n <id>lib</id>\n  <releases>\n     <enabled>true</enabled>\n     <checksumPolicy>ignore</checksumPolicy>\n  </releases>\n  <snapshots>\n     <enabled>false</enabled>\n  </snapshots>\n  <url>file://${project.basedir}/lib</url>\n</repository>\nBuilding for different enviorments: profiles to build and package artifacts\nDefault profile\n: builds the web applications and its ready to be deployed in a server\n<profile>\n   <id>default-profile</id>\n   <activation>\n       <activeByDefault>true</activeByDefault>\n   </activation>\n   <build>\n       <finalName>epnoiUIA</finalName>\n       <plugins>\n           <plugin>\n               <groupId>org.mortbay.jetty</groupId>\n               <artifactId>jetty-maven-plugin</artifactId>\n               <version>${jettyVersion}</version>\n               <configuration>\n                <webApp>\n                   <contextPath>/epnoiUIA</contextPath>\n                </webApp>\n                <connectors>\n                   <connector implementation=\"org.eclipse.jetty.server.nio.SelectChannelConnector\">\n                   <port>8081</port>\n                   </connector>\n                 </connectors>\n                </configuration>\n           </plugin>\n       </plugins>\n    </build>\n</profile>\nJetty managged version\n: According to Jetty slogan, \"Don't deploy your application in Jetty, deploy Jetty in your application.\" this profile allows running Jetty in embedded mode. That means that we put an HTTP module into our application, rather than putting your application into an HTTP server.\nWORK IN PROGRESS\nIt's necessary to implement a Jetty server\nhttp://www.eclipse.org/jetty/documentation/current/embedding-jetty.html\nFuture work\nDevelop enviroment: add cassandra maven plugin for develop enviroment (\nhttp://mojo.codehaus.org/cassandra-maven-plugin/examples/developing-webapp.html\n). The aim is to combine the usage of the cassandra-maven-plugin with the jetty-maven-plugin to make development testing of the web application a lot easier.",
  "speaker": "SYSTEM",
  "uuid": "2d4dc598-5fb1-4ddb-88eb-f02530885468"
}