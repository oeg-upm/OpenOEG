{
  "message": "SYSTEM: D5.3.1-v1.0.pdf: Página 38\nPage 38 of 111 \nNeOn Integrated Project EU-IST-027595 \n \nAnother outcome of this process is a semi-formal description of the ontology. \nIn the kickoff process the developers should look for potentially reusable ontologies already \ndeveloped. \n3. Refinement. The goal here is to produce a mature and application oriented “target ontology” \naccording to the specification given in the kickoff process. This refinement process is divided into \ntwo activities: \n Activity 1: Knowledge elicitation process with domain experts. The baseline ontology, that \nis, the first draft of the ontology obtained in process 2, is refined by means of interaction \nwith experts in the domain. When this activity is performed, axioms are identified and \nmodeled. During the elicitation, the concepts are gathered on one side and the terms to \nlabel the concepts on the other. Then, terms and concepts are mapped. \n Activity 2: Formalization. The ontology is implemented using an ontology language. Such \nlanguage is selected according to the specific requirements of the envisaged application.  \n4. Evaluation. The evaluation process serves as a proof of the usefulness of the developed \nontologies and their associated software environment. The product obtained is called ontology \nbased application. During this process two activities are carried out: \n Activity 1: Checking the requirements and competency questions. The developers check \nwhether the ontology satisfies the requirements and “can answer” the competency \nquestions. \n Activity 2: Testing the ontology in the target application environment. Further refinement of \nthe ontology can arise in this activity. This evaluation process is closely linked to the \nrefinement process. In fact, several cycles are needed until the target ontology reaches the \nenvisaged level. \n2.6.3. Ontology development process in DILIGENT \nThe DILIGENT methodology [47] is intended to support domain experts in a distributed setting to \nengineer and evolve ontologies. The ontology development process proposed by this methodology \nincludes the following five main activities: \n1. Build. The build phase aims at creating an initial version of the ontology quickly, so that the \nstakeholder can start using the ontology soon [21]. Having domain experts, users, knowledge \nengineers and ontology engineers building an initial ontology. The team involved in building the \ninitial ontology should be relatively small, in order to more easily find a small and consensual first \nversion of the shared ontology. Moreover, we do not require completeness of the initial shared \nontology with respect to the domain. \n2. Local adaptation. During the next phase users locally adapt the ontology according to their own \nneeds, while the ontology is in use e.g. to organise knowledge [21]. Once the product is made \navailable, users can start using it and locally adapting it for their own purposes. Typically, due to \nnew business requirements, or user and organization changes, their local ontologies evolve in a \nsimilar way as folder hierarchies in a file system. In their local environment they are free to change \nthe reused shared ontology. However, they are not allowed to directly change the ontology shared \nby all users. Furthermore, the control board collects change requests to the shared ontology. \n3. Analysis. The analysis phase requires the ontology control board to evaluate the changes \nsuggested by the stakeholders [21]. The board analyzes the local ontologies and the requests and \ntries to identify similarities in users' ontologies. Since not all of the changes introduced or \nrequested by the users will be introduced, a crucial activity of the board is deciding which changes \nare going to be introduced in the next version of the shared ontology. The input from users \nprovides the necessary arguments to underline change requests. A balanced decision that takes \n",
  "speaker": "SYSTEM",
  "uuid": "ccc1f80e-0f51-4883-9a29-f09a7b4ce9dd"
}