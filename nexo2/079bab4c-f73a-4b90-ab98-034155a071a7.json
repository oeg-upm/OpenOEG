{
  "message": "SYSTEM: BUSQUEDA.pdf: Página 33\nBÚSQUEDA \n \n33 \nJ. Rubio / P.R. Muro / J. Bañares \n \nOctubre 2004 - Curso 2004-2005 \nnuevo estado) no disponemos de instrumentos para hacerlo. Por ejemplo, un código \ncomo el siguiente: \n \n> (defun  modifica-garrafa4 (garrafas n)  \n \n \n(setq garrafas (list n (second garrafas))) \n \n \ngarrafas)  \n \n===> MODIFICA-GARRAFA4 \nno tendría el efecto perseguido (¿por qué?). Se puede decidir entonces reconstruir el \nestado en lugar de modificar el que pasa como argumento. Pero en ese caso \nmodifica-garrafa4 y modifica-garrafa3 son operaciones secundarias que \npueden ser programadas en función de construye-garrafas, garrafa4 y \ngarrafa3. \nEjercicios.  \n1) Programar modifica-garrafa4 y modifica-garrafa3 en términos de \nconstruye-garrafas, garrafa4 y garrafa3, entendiéndose que \"modificar\" es \ninterpretado como \"construir a partir de\". \n2) Representar garrafas por medio de listas e implementar las operaciones \nprimarias construye-garrafas, garrafa4 y garrafa3. \nLas listas sí pueden ser modificadas en Lisp al estilo de lo que sucede con los \nregistros y vectores, pero un uso inadecuado de esa posibilidad puede conllevar \nciertas dificultades bastante graves, por lo que esa posibilidad debe ser utilizada con \nprecaución. La razón por la que las listas pueden ser modificadas reposa en que los \nprimitivas que hemos presentado como de acceso (first, second, third, rest) \nen realidad también denotan variables generalizadas, por lo que pueden ser \nmodificadas de un modo destructivo (irrecuperable) por medio del elemento especial \nsetf. Por ejemplo, podríamos definir: \n \n> (defun  modifica-garrafa4 (garrafas n)  \n \n \n(setf (first garrafas) n) \n \n \ngarrafas)  \n \n \n \n===> MODIFICA-GARRAFA4 \ncon el siguiente comportamiento: \n \n> (setq g '(1 2)) \n \n \n \n===>  \n(1 2) \n \n> (modifica-garrafa4 g 4) \n \n===>  \n(4 2)  \n \n> g  \n \n \n \n \n \n===>  \n(4 2) \nEjercicio. Estudiar la representación de los estados para el 8-puzzle. Llegar hasta el \nnivel físico de la representación. \n",
  "speaker": "SYSTEM",
  "uuid": "079bab4c-f73a-4b90-ab98-034155a071a7"
}