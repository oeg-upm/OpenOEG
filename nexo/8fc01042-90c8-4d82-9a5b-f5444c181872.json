{
  "message": "SYSTEM: Neon_2008_d2.2.2.pdf: Página 44\nPage 44 of 124\nNeOn Integrated Project EU-IST-027595\nRe-engineering patterns embody expertise about how to guide a re-engineering process, they improve the\nefﬁciency of the re-engineering process, make the transformation process easier, and improve the reusability\nof non-ontological resources. Therefore, re-engineering patterns are a suitable technique for the transforma-\ntion. However, none of the methods use re-engineering patterns as a technique for the transformation.\nIn conclusion, we can state that there is a clear need for some sort of re-engineering methods and tools that\n• propose a formal speciﬁcation of the transformation between entities of the resource and the ontology,\n• contemplate the semantics of the non-ontological resource relationships,\n• propose re-engineering patterns to guide the re-engineering process,\n• support the re-engineering process activities by using the aforementioned re-engineering patterns,\n2.5.3\nResults According to the Ontology\nTable 2.3 and table 2.6 summarize the methods and tools presented according to the characteristics of the\nresultant ontology: the ontology components, the ontology implementation language and whether one or\nmore ontologies are generated.\nMethods\n• According to the ontology components. Seven methods generate classes, attributes and relations; ﬁve\nmethods generate classes, attributes, relations and instances; two generate classes and relations; four\ngenerate only instances.\n• According to the ontology implementation language. One method deals with RDF(S) and OWL-DLP\nontologies; three methods deal OWL-DL ontologies; two deal with RDF instances; two deal with\nRDF(S) and OWL Full ontologies; one method deals with DAML+OIL ontologies; other method deals\nwith LOOM/ACL ontologies; only one deals with SKOS RDF ontologies; three deal with RDF(S) on-\ntologies; one deals with F-Logic/RDF ontologies, other deals with OWL Full/RDF ontologies; and one\ndeals with CycL, OWL Full and WSML ontologies.\n• According to whether the method generates one or several ontologies. There are two methods which\ngenerate several ontologies, the remaining sixteen methods generate one single ontology.\nTools\n• According to the ontology components. One tool generates classes, attributes and relations; three\ntools generate classes, attributes, relations and instances; and eight tools generate only instances.\n• According to the ontology implementation language. One tool deals with RDF(S) and OWL-DLP on-\ntologies; other tool deals with F-Logic and RDF ontologies; other deals with OWL Full and RDF ontolo-\ngies; one tool deals with ontologies implemented in OWL (Full, DL or Lite) and RDF ontologies; the\nremaining seven deal with RDF instances.\n• According to whether the tool generates one or several ontologies. Two tools generate several ontolo-\ngies, and ten tools generate one single ontology.\nAfter having analyzed the characteristics related to the resultant ontology, we can conclude that there is a\nlack of re-engineering methods and tools which support several ontologies. Most of the presented research\nefforts only generate one single ontology.\n",
  "speaker": "SYSTEM",
  "uuid": "8fc01042-90c8-4d82-9a5b-f5444c181872"
}