{
  "message": "SYSTEM: BUSQUEDA.pdf: Página 9\nBÚSQUEDA \n \n9 \nJ. Rubio / P.R. Muro / J. Bañares \n \nOctubre 2004 - Curso 2004-2005 \nfuera de una lista). En el primer caso, el evaluador busca si el símbolo tiene \nasociada una función, con el objeto de aplicarla a (los valores obtenidos por \nevaluación de) sus argumentos. En el segundo, intenta encontrar el valor que tiene \nligado en el contexto actual. Ambos procesos son totalmente independientes. Por \nejemplo: \n \n> cuadrado \n===> ¡¡¡¡ ERROR !!!! \nEsta consideración permite ver que un símbolo es en Lisp un objeto muy rico (mucho \nmás que un identificador en lenguajes como C o Pascal) en el que hemos podido \ndistinguir, hasta el momento,  tres componentes: \n• \nsu nombre (la secuencia de caracteres que nos permite referirnos a él) \n• \nsu valor (como en el caso de la ligadura local de x y 3) \n• \nsu valor funcional (que puede ser creado o modificado usando defun) \nPrácticamente ya conocemos todos los elementos básicos que nos van a permitir \nprogramar en Lisp. Al ser tan reducido el número de herramientas con las que \ncontamos, va a ser obligatorio que algunos de estos elementos puedan ser utilizados \npara varios fines. Esto es lo que sucede con los símbolos y las listas. Los símbolos \npueden ser utilizados como: \n• \nIdentificadores: para nominar funciones (como cuadrado), parámetros formales \n(como x en la definición de cuadrado) o variables (todavía no tenemos ningún \nejemplo de este último uso). \n• \nDatos, como veremos en breve. \nLas listas a su vez pueden ser utilizadas como: \n• \n\"Programas\", es decir expresiones que pueden ser evaluadas, como en la \nmayoría de los ejemplos anteriores. \n• \nDelimitadores sintácticos, como en el caso de las listas de parámetros formales. \n• \nEstructuras de datos, como veremos al final del tema. \nVamos a continuación a explicar cómo es posible ligar, de modo global un símbolo y \nun elemento Lisp. Veamos algunos ejemplos: \n \n> (setq x 5)  ===> 5 \n \n> x  \n \n===> 5 \n \n> (+ x 8)  \n===> 13 \n",
  "speaker": "SYSTEM",
  "uuid": "f3bb4e75-f363-40dc-8023-b2cb311498bd"
}