{
  "message": "SYSTEM: Neon_2008_d2.2.2.pdf: Página 104\nPage 104 of 124\nNeOn Integrated Project EU-IST-027595\n7.1.1\nNE Recognition with GATE and ANNIE\nGATE, the General Architecture for Text Engineering, is a framework providing support for a variety of lan-\nguage engineering tasks. It includes a vanilla information extraction system, ANNIE, and a large number of\nplugins for various tasks and applications, such as ontology support, information retrieval, support for differ-\nent languages, WordNet, machine learning algorithms, and so on. There are many publications about GATE\nand ANNIE – see for example [MTC+02]. We summarise brieﬂy below the components and method used for\nrule-based information extraction in GATE.\nANNIE consists of the following set of processing resources: tokeniser, sentence splitter, POS tagger,\ngazetteer, ﬁnite state transduction grammar and orthomatcher. The resources communicate via GATE’s\nannotation API, which is a directed graph of arcs bearing arbitrary feature/value data, and nodes rooting this\ndata into document content (in this case text).\nThe tokeniser splits text into simple tokens, such as numbers, punctuation, symbols, and words of different\ntypes (e.g. with an initial capital, all upper case, etc.), adding a \"Token\" annotation to each. It does not need\nto be modiﬁed for different applications or text types.\nThe sentence splitter is a cascade of ﬁnite-state transducers which segments the text into sentences.\nThis module is required for the tagger. Both the splitter and tagger are generally domain and application-\nindependent.\nThe tagger is a modiﬁed version of the Brill tagger, which adds a part-of-speech tag as a feature to each\nToken annotation. Neither the splitter nor the tagger is a mandatory part of the NE system, but the annotations\nthey produce can be used by the semantic tagger (described below), in order to increase its power and\ncoverage.\nThe gazetteer consists of lists such as cities, organisations, days of the week, etc. It contains some entities,\nbut also names of useful key words, such as company designators (e.g. \"Ltd.\"), titles (e.g. \"Dr.\"), etc. The\nlists are compiled into ﬁnite state machines, which can match text tokens.\nThe semantic tagger (or JAPE transducer) consists of hand-crafted rules written in the JAPE pattern lan-\nguage [CMB+02], which describe patterns to be matched and annotations to be created. Patterns can be\nspeciﬁed by describing a speciﬁc text string or annotation (e.g. those created by the tokeniser, gazetteer,\ndocument format analysis, etc.).\nThe orthomatcher performs coreference, or entity tracking, by recognising relations between entities. It also\nhas a secondary role in improving NE recognition by assigning annotations to previously unclassiﬁed names,\nbased on relations with existing entities.\nANNIE has been adapted to many different uses and applications: see [MC03, MTBC03, May03] for some\nexamples. In terms of adapting to new tasks, the processing resources in ANNIE fall into two main categories:\nthose that are domain-independent, and those that are not. For example, in most cases, the tokeniser,\nsentence splitter, POS tagger and orthographic coreference modules fall into the former category, while\nresources such as gazetteers and JAPE grammars will need to be modiﬁed according to the application.\nSimilarly, some resources, such as the tokeniser and sentence splitter, are largely language-independent\n(exceptions may include some Asian languages, for example), and some resources are more language-\ndependent, such as gazetteers. The feasibility of reusing grammars and other components for named entity\nrecognition tasks is discussed at length in [PMC+02]; the conclusions drawn were very positive given 4\nfactors: use of a ﬂexible and robust architecture (such as GATE), use of an appropriate rule formalism (such\nas JAPE), the nature of the application(s) in question, and the languages used.\n7.1.2\nOntology population\nOntology population is a crucial part of knowledge base construction and maintenance that enables us to\nrelate text to ontologies, providing on the one hand a customised ontology related to the data and domain\nwith which we are concerned, and on the other hand a richer ontology which can be used for a variety\nof semantic web-related tasks such as knowledge management, information retrieval, question answering,\n",
  "speaker": "SYSTEM",
  "uuid": "6c9a1b56-0025-4892-b448-696b3305fdfc"
}