{
  "message": "SYSTEM: D5.3.1-v1.0.pdf: Página 22\nPage 22 of 111 \nNeOn Integrated Project EU-IST-027595 \n \n2.3. Software Engineering: Life Cycle Models \nThe life of a software product can be modelled by a life cycle model consisting of stages [7]. \nSoftware life cycle models define how to develop and maintain a software system, i.e., they \ndescribe different ways of organizing the activities to be carried out [46]. Software life cycle models \nare abstractions of the phases or states a software product passes through along its life. These \nmodels could also determine the order of the phases and establish the transition criteria between \nphases. \nIt is known that there is no a life cycle model valid for all the software projects. Each software life \ncycle model is appropriate for a concrete project, depending on several characteristics: \n \nSoftware organization culture: the organization is enterprising or conservative (that is, it \nlikes to assume or not risks in projects). \n \nPrevious experience of the software development team. \n \nSoftware application area. \n \nComprehension and volatility of the software requirements. \nOnce a particular software life cycle model has been choosen for the software project, then the \nconcrete software life cycle is obtained. The software life cycle describes the software product life \nfrom its conception until its implementation, deliver, use, and maintenance. That is, the software \nlife cycle describes the states a software product passes through from its conception until its dead. \nThis section briefly summarizes the most commonly used and well-known software life cycle \nmodels. Such models are based on the existing literature, but it was difficult to summarize them \nbecause different authors explain some models in a different way. For these reason, we include in \nthis section our own understanding of the existing literature.  \n¾ The sequential models, such as the waterfall (Section 2.3.1) and the ‘V’ model (Section \n2.3.2). \n¾ The gradual models, such as the incremental development (Section 2.3.3) and the iterative \ndevelopment (Section 2.3.4). \n¾ The prototype-based models, such as evolutionary prototyping model (Section 2.3.5) and \nrapid throwaway prototyping approach (Section 2.3.6). \n¾ The spiral model (Section 2.3.7). \n¾ The extreme programming model (Section 2.3.8). \n¾ The reuse components model (Section 2.3.9).       \n2.3.1. Waterfall life cycle model  \nThe pure waterfall life cycle model shown in Figure 3 was defined by Royce [48] to help cope with \nthe growing complexity of the development of software projects. The use of such a model \nencourages the developer to specify what the system is supposed to do (i.e., to define the \nrequirements) before building the system and to plan how components are going to interact (i.e., \ndesigning) before building the components (i.e., implementing). This model enables project \n",
  "speaker": "SYSTEM",
  "uuid": "6fc2d2fe-a5ad-4294-a851-1a5d4f3023c4"
}