{
  "message": "SYSTEM: BUSQUEDA.pdf: Página 30\nBÚSQUEDA \n \n30 \nJ. Rubio / P.R. Muro / J. Bañares \n \nOctubre 2004 - Curso 2004-2005 \n2.4.3. Listas como estructuras de datos en Lisp. \nAl final del tema anterior ya hemos introducido de modo breve las listas como \nestructuras de datos. Allí explicamos las operaciones de acceso first y rest y el \npredicado que permite decidir si una lista es la vacía: endp. Para construir listas \nutilizábamos las características del bucle de lectura-evaluación-escritura y el \nelemento especial quote que impide la evaluación. Pero para poder diseñar \nalgoritmos de manipulación de listas como estructuras de datos son necesarias \noperaciones de construcción de listas. A continuación explicamos las más básicas e \nimportantes. \nLa primitiva cons es una función que construye una nueva lista al añadir el elemento \nque es su primer argumento como primer miembro en la lista que es su segundo \nargumento. La función list toma cualquier número de argumentos y construye una \nlista con ellos. Por último, append es la función que concatena dos listas. Una \ncuestión que es frecuentemente olvidada por los programadores principiantes en \nLisp es que estas tres primitivas son funciones y, como tales, no tienen ningún \nefecto lateral. En particular, no modifican el valor de ninguno de sus argumentos. \nObsérvese el siguiente comportamiento: \n \n> (setq lista '(1 2 3)) ===> (1 2 3) \n \n> (cons 0 lista) \n \n===> (0 1 2 3) \n \n> lista \n \n \n \n===> (1 2 3) \nVéase en los siguientes ejemplos las diferencias de comportamiento entre cons, \nlist y append. \n \n> (cons '(a)  '(b c)) \n===> ((A) B C) \n \n> (list '(a)  '(b c)) \n===> ((A) (B C)) \n \n> (append '(a)  '(b c)) ===> (A B C) \nPara terminar indiquemos otros operadores de acceso como second y third que \npermiten acceder, respectivamente, al segundo y tercer elemento de una lista. Por \nejemplo: \n \n> (third '(a b c)) ===> C \nObsérvese el siguiente comportamiento: \n \n> (third '(a b)) \n===> NIL \ny el par de ejemplos siguientes: \n \n> (second '(a b)) \n===> B \n \n> (rest '(a b)) \n===> (B) \n",
  "speaker": "SYSTEM",
  "uuid": "3bab1a5a-f922-4461-970d-86fbb0f7fe70"
}