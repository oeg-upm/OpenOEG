{
  "message": "SYSTEM: BUSQUEDA.pdf: Página 25\nBÚSQUEDA \n \n25 \nJ. Rubio / P.R. Muro / J. Bañares \n \nOctubre 2004 - Curso 2004-2005 \nEjercicios.  \n1) Especificar como reglas el resto de operadores. \n2) Dibujar el espacio de estados correspondiente, a partir del estado inicial (0,0) \nhasta que encontréis un estado objetivo, es decir un estado de la forma (2,y). \nPara estudiar el nivel físico, que es el más cercano a la implementación del sistema, \nvamos a analizar las estructuras de datos en Lisp. \n \n2.4. \nEstructuras \nde \ndatos \nen \nLisp: \nvectores, registros, listas. \n2.4.1. Vectores en Lisp. \nLa función que permite construir vectores en Lisp es make-array. Esta función \ntoma un único argumento cuyo valor debe ser un número entero positivo; llamemos \nn a dicho número. Devuelve como valor un vector con n  componentes que \ncontendrán un valor por defecto (que depende del entorno concreto con el que \nestemos trabajando y que será denotado <vd> en las figuras). Atención: los índices \nde los elementos en el vector comienzan en 0 y terminan en n-1 (como en C; de \nhecho, todo el tratamiento de vectores en Lisp es mucho más cercano al que se \nhace en C que al de otros lenguajes como Pascal). Por ejemplo,  \n \n> (make-array 3) \n===> dependiente del entorno \nconstruye un vector que puede ser representado como aparece reflejado en la \nFigura 4. Nótese que puesto que el vector así construido no ha sido ligado a ningún \nsímbolo, ni pasado como parámetro, es un elemento que no puede volver a ser \nreutilizado. \n0 \n<vd>\n0 \n<vd>\n0 \n<vd>\n1 \n<vd>\n2 \n<vd>  \nvalores por defecto en la implementación \nFigura 4 \n",
  "speaker": "SYSTEM",
  "uuid": "c667a998-e1bc-417a-ab49-e32b9d9f29f0"
}