{
  "message": "SYSTEM: Neon_2008_d2.2.2.pdf: Página 109\nD2.2.2 Methods and Tools Supporting Re-engineering\nPage 109 of 124\nThe application can either create an ontology from scratch, or modify an existing ontology. The ontology\nmust be loaded with the application (in the former case, a blank ontology is loaded; in the latter, the ontology\nto be modiﬁed) and referenced by the grammar via the runtime parameter. The ontology used is the same\none for the whole corpus: this means that if a number of documents are to be processed, the same ontology\nwill be modiﬁed. If this is not the desired behaviour, then there are two options:\n1. A separate corpus is created for each document or group of documents corresponding to a single\noutput ontology. The application must be run separately for each corpus.\n2. A processing resource can be added to the application that clears the ontology before re-running on\nthe next document. This of course requires that the ontology is saved at the end of the application,\nafter processing each document.\n7.3.1\nImplementation of patterns\nThe patterns themselves are implemented as JAPE rules.\nOn the LHS of the rule is the pattern to be\nannotated. This consists of a number of pre-existing annotations which have been created as a result of\npre-processing components (such as POS tagging, gazetteer lookup and so on) and earlier JAPE rules. The\nexample below shows a pattern for matching a subclass relation, such as \"Frogs are a kind of amphibian\"\nwhere \"frog\" is a subclass of \"amphibian\".\nRule:Subclass1\n(\n({CloneNP}):sub\n(\n{Lookup.minorType == be}\n{Token.category == DT}\n{Lookup.majorType == kind}\n)\n({CloneNP}):super\n) -->\nThis pattern matches a noun phrase (identiﬁed by a previous JAPE grammar), followed by the verb \"to be\"\nin some format (identiﬁed via the gazetteer lookup), a determiner (identiﬁed via the POS tagger), some\nword indicating a \"kind of\" relation (identiﬁed via the gazetteer lookup) followed by another noun phrase\n(identiﬁed by a previous JAPE grammar). The two noun phrases (corresponding ultimately to the subclass\nand superclass) are given labels (\"sub\" and \"super\" which will used in the second part of the rule.\nThe right hand side of the rule invokes NEBOnE and creates the new items in the ontology, as well as adding\nannotations to the document itself. NEBOnE is responsible also for ensuring that the resulting changes to\nthe ontology are wellformed: this is described in more detail in Section 7.3.2.\n{\n// get the relevant annotations\ngate.AnnotationSet subSet = (gate.AnnotationSet)bindings.get(\"sub\");\ngate.Annotation subAnn = (gate.Annotation)subSet.iterator().next();\nAnnotationSet superSet = (gate.AnnotationSet)bindings.get(\"super\");\ngate.Annotation superAnn = (gate.Annotation)superSet.iterator().next();\n// add a new class just below the root class\ntry {\nneon.nebone.Nebone.createOrLinkClass(ontology, doc, superAnn, null);\n2006–2008 c⃝Copyright lies with the respective authors and their institutions.\n",
  "speaker": "SYSTEM",
  "uuid": "5621a62c-aae1-4758-a6db-ac328c6a56a0"
}