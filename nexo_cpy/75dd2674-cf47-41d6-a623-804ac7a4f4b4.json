{
  "message": "SYSTEM: Wiki: https://delicias.dia.fi.upm.es/wiki/index.php/Herramientas_y_proyectos_relacionados_con_el_data_provenance \n\nKARMA\nDiseñado para recoger y consultar provenance de datos procedentes de workflows científicos en el contexto del Challenge, (año 2006-07). Está dirigido por eventos y una granularidad variable, porque aunque no trata directamente la restricción del acceso del usuario según sus permisos, sí que admite la anidar workflows para simplificarlos ofreciendo una vista a más alto nivel.\nTanto la gestión como la creación del provenance es automática, manteniéndose actualizada a pesar de que el workflow se esté ejecutando en ese momento. Como soporte, utiliza el sistema XBaya Workflow Composer, usando el lenguaje de descripción de workflows BPEL, (Bussiness Process Execution Language)\nSin embargo, la principal limitación que presenta es que no responde a todas las consultas formuladas en el Challenge, en concreto a la consulta nueve. No utiliza ningún recurso ontológico.\nPASS\nAcrónimo de “Provenance Aware Storage Systems”, sistemas de almacenamiento que tratan el provenance como un objeto de primera clase, recolectándolo automáticamente, almacenándolo, gestionándolo y también aportando un sistema para consultarlo respondiendo a todas las consultas del Challenge.\nSe diseñó el primer prototipo de PASS durante 2005 y 2006, pero el Challenge obligó a desarrollar rápidamente una herramienta de consulta ad-hoc, puesto que el sistema se había centrado en el almacenamiento y gestión automática de provenance sin tener en cuenta qué es lo que iba a pedir el usuario.\nEstá orientado a workflows, y destaca porque posee una granularidad muy fina, a nivel de archivo. Está orientado por eventos.\n\tTener una granularidad muy fina, por otra parte, también hace que muchas veces se almacene el provenance de datos que no nos interesa, además de necesitar un sistema de almacenamiento mucho mayor.\nD-PQuery (Implementación)\nSe trata del algoritmo desarrollado por Paul T.Groth para determinar el provenance de fuentes múltiples en workflows de manera paralela, siendo la única herramienta de las que se analizan en este documento que lo hace de ese modo.\nGenera un provenance representado en un grafo dirigido acíclico, basado en tiempo e independiente de un dominio concreto, y además lo genera de manera totalmente automática a partir de las grabaciones Kickstart, que son producidas en varias aplicaciones de e-Science actuales.\nAunque es reciente (2008-09), no se basa en el OPM, pero entra dentro de sus propósitos generar documentación compatible con dicho modelo. En cuanto a granularidad, se centra en las colecciones de datos y sus miembros.\nComo limitaciones, el provenance que genera representa ejecuciones pasadas de los objetos que incluye, no su estado actual, y obviamente, si queremos general el grafo a partir de otras grabaciones, deberemos desarrollar herramientas que las conviertan al formato de datos que admite el algoritmo. Además, a pesar de que el tiempo de ejecución cuando hay muchos archivos es muy bueno debido al paralelismo de la propuesta, cuando hay pocos archivos tiene un tiempo de reacción muy lento.\nKOPE(Implementación)\n“Knowledge-Oriented Provenance Environment”, es una herramienta  para workflows cuyo objetivo es analizar logs de provenance. Se basa en el modelo de PASOA, y utiliza las librerías PSM (“Problem Solving Methods”), para generar provenance de manera automática en tres niveles de abstracción y granularidad.  El nivel uno representa la observación inicial y la representación de la información, el nivel dos realiza una primera descomposición de la tarea original en subtareas que describen el proceso en más detalle, y el nivel tres descompone las tareas que aún admiten descomposición tras el nivel dos.\nLa herramienta no gestiona la consulta del grafo dirigido acíclico resultante, sino que se centra en la construcción del mismo. Su única limitación es que la granularidad que ofrece es de grano grueso, sin especificar los detalles específicos de la ejecución del proceso en cuestión.\nTupelo\nImplementación del OPM, que permite leer y escribir información OPM en un contexto como datos RDF. Aporta una representación de alto nivel del OPM que puede ser extendida para soportar otras serializaciones del OPM tan pronto como estén disponibles.\nTaverna\nConjunto de herramientas de software libre para el diseño y ejecución de workflows. Permite automatizar métodos experimentales a través de una serie de servicios, (como servicios Web), de un conjunto diverso de dominios, (desde biología o química hasta música).\nHerramientas\nHerramienta\nLicencia\nFuncionalidad\nProcedencia\nThe Open Provenance Model\nModelo de Provenance que define una serie de reglas para identificar las inferencias válidas que pueden hacerse en los grafos provenance\nSurge de la colaboración conjunta de las universidades de Southampton, Indiana, Manchester, Davis, Hasselt, Utah,USC, y Microsoft, NSCA y PNNL\nD-PQuery\nAlgoritmo para determinar el provenance de datos a partir de provenances distribuidos y de manera paralela.\nUniversidad de California del Sur\nVDL\n“Virtual Data Language”. Lenguaje que permite a los usuarios especificar flujos de ejecución grid para derivar información.\nUniversidad de Chicago\nWS-BPEL\n“Bussiness Process Execution Language”. Lenguaje basado en XML diseñado para el control dentralizado de la invocación de diferentes servicios Web. Es uno de los estándares de OASIS.\nOASIS\nVisTrails\nSistema relativamente reciente que aporta una gestión del provenance para tareas computacionales exploratorias, combinando características de los sistemas de flujo de ejecución y de visualización.\nUniversidad de Utah\nKarma\nHerramienta para el almacenamiento de provenance que puede ser añadida a una ciberestructura existente.  Utiliza una arquitectura modular que permite soportar múltiples plugins que la hacen usables en distintos entornos.\nPegasus-WMS\nHerramienta para gestionar los flujos de ejecución. Basada en el Pegasus mapper y el motor DAGMan para flujos de ejecución\nFundación de Ciencia Nacional(NSF), bajo el programa OCI SCDI\nPegasus Mapper\nMotor para realizar el mapping automático de flujos de ejecución en infraestructuras distribuidas.\nDesarrollado en el seno de diversos proyectos para su utilización, como GriPhyn, NVO y SCEC_VME\nPegasus GUI\nHerramienta que aporta una interfaz gráfica sencilla de usar para editar y monitorizar workflows\nEnsemble Manager\nHerramienta que coordina y maneja eficientemente gran cantidad de flujos de ejecución simultáneamente (de 100 a 1000).\nKepler\nHerramienta que ayuda a los usuarios a reutilizar y compartir datos, flujos de ejecución y componentes desarrollados por la comunidad científica.\nNSF (National Science Foundation).\nPASS\nHerramienta para capturar el provenance.\nUniversidad de Harvard\nKOPE\n“Knowledge Oriented Provenance Environment”. Sirve para analizar logs  de provenance. Basado en el modelo de datos de PASOA.\nUPM and University of Manchester\nTaverna\nHerramiente de software libre para diseñar y ejecutar flujos de ejecución.\nCreada por el proyecto myGrid\nTupelo Provenance API\nAPI Java para almacenar datos OPM (“Open Provenance Model”), como datos RDF.\nCreada a partir del proyecto Tupelo\nOrchestra\nSistema que coordina un set de sitios web participantes, cada uno de los cuales maneja una base d e datos. Permite propagar las actualizaciones del contenido de los sitios en función de la confianza de la actualización..\nUniversidad de Pennsylvania.\nBreve resumen de los proyectos:\nProvenance Challenge\nDada la importancia que empezó a cobrar el provenance durante los últimos años, en la IPAW’06 la comunidad decidió que era necesario entender las diferentes representaciones usadas para el provenance, sus aspectos comunes y las razones de sus diferencias. Para ello se creó el “First Provenance Challenge”, en Junio de 2006.\nEn ese evento, 17 equipos contribuyeron con resultados muy distintos, y dado su éxito se decidió convocar un segundo Challenge para fomentar la interoperabilidad entre los sistemas. En esta segunda cita ya empezó a haber acuerdos y consenso entre los distintos equipos, y como resultado surgió el Open Provenance Model, que aunque no ofrecía una implementación fundaba las bases para crear un modelo estándar.",
  "speaker": "SYSTEM",
  "uuid": "75dd2674-cf47-41d6-a623-804ac7a4f4b4"
}