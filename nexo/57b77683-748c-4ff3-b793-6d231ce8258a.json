{
  "message": "SYSTEM: NeOn_2007_D5.3.1.pdf: P치gina 106\nPage 106 of 111 \nNeOn Integrated Project EU-IST-027595 \n7. Conclusions and Future Work \nAfter analysing the state of the art, we can say that the degree of maturity of the Ontology \nEngineering field is very low if we compare it with the Knowledge Engineering field and, specially, \nwith the Software Engineering field. The long term goal of the Ontology Engineering field will be to \nreach a degree of maturity similar to the one that the Software Engineering field has today. In this \nsense, the results included in this deliverable provide a step forward in the way of achieving the \nsame degree of maturity in the Ontology Engineering field as in the Software Engineering field. \nThis deliverable presents and advance by means of the following contribution: \n출 The first version of the NeOn Glossary of Activities, which identifies and defines the activities \npotentially involved in the ontology network construction, included as part of the NeOn ontology \ndevelopment process, as a first step for solving the lack of a standard glossary in contrast with \nthe IEEE Standard Glossary of Software Engineering Terminology [1] in the Software \nEngineering field. \nThe definitions in the NeOn Glossary of Activities have been collaboratively built and \nconsensuated by all NeOn partners.  \nThe activities in the NeOn Glossary have been divided into activities required for ontology \nnetwork development and other that could be or not applicable, depending on the concrete \ncase, and consequently non-essential or dispensable. \n출 Identification and description of eight scenarios for building network of ontologies \ncollaboratively with special emphasis in reuse, reengineering and merging ontological and non-\nontological resources. Such complex scenarios have been taken into account for the \ndevelopment of the work included in this deliverable, and they should be covered by the future \nmethodological work to be carried out within WP5. \n출 The first collection of several theoretical ontology network life cycle models, based on those \ndefined in the Software Engineering field and taking into account the specific features of the \nontology network development. Such collection has been proposed in order to solve the lack of \nontology life cycle models and ontology network life cycle models, in contrast with the collection \nof software life cycle models existing in the literature.  \nRelated to this issue, METHONTOLOGY proposes a unique type of life cycle model based on \nevolving prototypes for building single ontologies; On-To-Knowledge proposes an incremental \nand cyclic ontology life cycle model based on evolving prototypes; and DILIGENT proposes an \nontology life cycle model based on evolving prototypes. However, it is known that there is no a \nunique life cycle model valid for all the developments. Each life cycle model is appropriate for a \nconcrete development, depending on several features. For this reason, to propose a unique life \ncycle model for all the ontology network developments is not very realistic, and it is better to \npropose a collection of models and guidelines for deciding which model is the most appropriate \nin a concrete case. \nFrom the collection presented in this deliverable, we can briefly say that the waterfall ontology \nnetwork life cycle model is the easiest model to understand, and that with this model it is also \neasy to schedule an ontology development. The same applies to the different proposed \nversions of this waterfall model that include knowledge resources reuse and reengineering and \nontology merging. Regarding the incremental ontology network life cycle model, it permits to \ndevelop the ontology network by complete layers by following any type of waterfall model. This \nincremental model is also easy to understand, and has as advantage the development of the \nnetwork in increments. Finally, the most sophisticated model is the spiral one that permits to \nanalyze the different risks during the ontology network development. \n \n",
  "speaker": "SYSTEM",
  "uuid": "57b77683-748c-4ff3-b793-6d231ce8258a"
}