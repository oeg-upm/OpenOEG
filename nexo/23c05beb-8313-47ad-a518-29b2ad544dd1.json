{
  "message": "SYSTEM: StreamingDataAccess_ISWC2010.pdf: Página 11\nThe deﬁnition follows the same idea as the previous one. The variables of z will\ncontain the actual values that will be used to construct the datatype property\nvalue using the function f T rf\nA\n.\nWhen a conjunctive query is issued against the global ontology, the proces-\nsor ﬁrst parses it and transforms it into an abstract syntax tree and then uses\nthe expansion algorithm described in [1] (that is based on the PerfectRef algo-\nrithm of [19]) to produce an expanded conjunctive query based on the TBox of\nthe ontology. Afterwards the rewritten query can be translated to an extended\nrelational algebra.\nA query QO(x)[ts, te, δ] is a conjunctive query with a window operator (where\nts, te are the start and end points of the window range and δ is the slide) in\norder to narrow the data set according to a given criteria. For a query:\nQO(x)[ts, te, δ] = (C1(x) ∧R(x, y) ∧A(x, z))[ts, te, δ]\nthe translation is given by λ(Φ), following the mapping deﬁnition:\nλ(ΦS1,...,Sn(x)[ts, te, δ]) = πpP roj(1pJoin (σpSel(ωts,te,δS1), . . .\n, σpSel(ωts,te,δSn)))\nThe expression denotes ﬁrst a window operation ωts,te,δ over the relations or\nstreams S1, . . . , Sn, with ts, te, and δ being the time range and slide. A selec-\ntion σpSel is applied over the result, according to the conditions deﬁned in the\nmapping. A multi-way join 1pJoin is then applied to the selection, also based\non the corresponding mapping deﬁnition. Finally a projection πpP roj is applied\nover the results. For any conjunctive query with more atoms, the construction\nof the algebra expression will follow the same direct translation using the GAV\napproach.\n6\nImplementation and Walkthrough\nThe presented approach of providing ontology-based access to streaming data\nhas been implemented as an extension to the ODEMapster processor [1]. This\nimplementation generates sneeql queries that can be executed by the streaming\nquery processor.\nwindsamples: (sensorId\nINT PK , ts\nDATETIME PK , speed\nFLOAT , direction\nFLOAT)\nsensors: (sensorId\nINT PK , sensorName\nCHAR (45) , lat FLOAT , long\nFLOAT)\nListing 3. Relational schema of the data source.\nConsider the motivating example where a sensor network generates a stream\nwindsamples of wind sensor measurements. The associated stored information\nabout the sensors, e.g. location and type, are stored in a relation sensors. The\nschemas are presented in Listing 3. Also consider the following ontological view:\n11\n",
  "speaker": "SYSTEM",
  "uuid": "23c05beb-8313-47ad-a518-29b2ad544dd1"
}